// NiosII_Processor_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module NiosII_Processor_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                              //                            clk_0_clk.clk
		input  wire        NIOS_CPU_reset_reset_bridge_in_reset_reset, // NIOS_CPU_reset_reset_bridge_in_reset.reset
		input  wire [14:0] LCD_DMA_read_master_address,                //                  LCD_DMA_read_master.address
		output wire        LCD_DMA_read_master_waitrequest,            //                                     .waitrequest
		input  wire        LCD_DMA_read_master_chipselect,             //                                     .chipselect
		input  wire        LCD_DMA_read_master_read,                   //                                     .read
		output wire [7:0]  LCD_DMA_read_master_readdata,               //                                     .readdata
		output wire        LCD_DMA_read_master_readdatavalid,          //                                     .readdatavalid
		input  wire [19:0] NIOS_CPU_data_master_address,               //                 NIOS_CPU_data_master.address
		output wire        NIOS_CPU_data_master_waitrequest,           //                                     .waitrequest
		input  wire [3:0]  NIOS_CPU_data_master_byteenable,            //                                     .byteenable
		input  wire        NIOS_CPU_data_master_read,                  //                                     .read
		output wire [31:0] NIOS_CPU_data_master_readdata,              //                                     .readdata
		input  wire        NIOS_CPU_data_master_write,                 //                                     .write
		input  wire [31:0] NIOS_CPU_data_master_writedata,             //                                     .writedata
		input  wire        NIOS_CPU_data_master_debugaccess,           //                                     .debugaccess
		input  wire [19:0] NIOS_CPU_instruction_master_address,        //          NIOS_CPU_instruction_master.address
		output wire        NIOS_CPU_instruction_master_waitrequest,    //                                     .waitrequest
		input  wire        NIOS_CPU_instruction_master_read,           //                                     .read
		output wire [31:0] NIOS_CPU_instruction_master_readdata,       //                                     .readdata
		input  wire [14:0] SPI_DMA_write_master_address,               //                 SPI_DMA_write_master.address
		output wire        SPI_DMA_write_master_waitrequest,           //                                     .waitrequest
		input  wire        SPI_DMA_write_master_chipselect,            //                                     .chipselect
		input  wire        SPI_DMA_write_master_write,                 //                                     .write
		input  wire [7:0]  SPI_DMA_write_master_writedata,             //                                     .writedata
		output wire [1:0]  BTN_CH_ONOFF_s1_address,                    //                      BTN_CH_ONOFF_s1.address
		output wire        BTN_CH_ONOFF_s1_write,                      //                                     .write
		input  wire [31:0] BTN_CH_ONOFF_s1_readdata,                   //                                     .readdata
		output wire [31:0] BTN_CH_ONOFF_s1_writedata,                  //                                     .writedata
		output wire        BTN_CH_ONOFF_s1_chipselect,                 //                                     .chipselect
		output wire [1:0]  BTN_DISPLAY_s1_address,                     //                       BTN_DISPLAY_s1.address
		output wire        BTN_DISPLAY_s1_write,                       //                                     .write
		input  wire [31:0] BTN_DISPLAY_s1_readdata,                    //                                     .readdata
		output wire [31:0] BTN_DISPLAY_s1_writedata,                   //                                     .writedata
		output wire        BTN_DISPLAY_s1_chipselect,                  //                                     .chipselect
		output wire [1:0]  BTN_ENCODER_s1_address,                     //                       BTN_ENCODER_s1.address
		output wire        BTN_ENCODER_s1_write,                       //                                     .write
		input  wire [31:0] BTN_ENCODER_s1_readdata,                    //                                     .readdata
		output wire [31:0] BTN_ENCODER_s1_writedata,                   //                                     .writedata
		output wire        BTN_ENCODER_s1_chipselect,                  //                                     .chipselect
		output wire [1:0]  DDS0_AM_ModIndex_s1_address,                //                  DDS0_AM_ModIndex_s1.address
		output wire        DDS0_AM_ModIndex_s1_write,                  //                                     .write
		input  wire [31:0] DDS0_AM_ModIndex_s1_readdata,               //                                     .readdata
		output wire [31:0] DDS0_AM_ModIndex_s1_writedata,              //                                     .writedata
		output wire        DDS0_AM_ModIndex_s1_chipselect,             //                                     .chipselect
		output wire [1:0]  DDS0_AM_ModPhaseStep_s1_address,            //              DDS0_AM_ModPhaseStep_s1.address
		output wire        DDS0_AM_ModPhaseStep_s1_write,              //                                     .write
		input  wire [31:0] DDS0_AM_ModPhaseStep_s1_readdata,           //                                     .readdata
		output wire [31:0] DDS0_AM_ModPhaseStep_s1_writedata,          //                                     .writedata
		output wire        DDS0_AM_ModPhaseStep_s1_chipselect,         //                                     .chipselect
		output wire [1:0]  DDS0_FM_ModDeviationPhase_s1_address,       //         DDS0_FM_ModDeviationPhase_s1.address
		output wire        DDS0_FM_ModDeviationPhase_s1_write,         //                                     .write
		input  wire [31:0] DDS0_FM_ModDeviationPhase_s1_readdata,      //                                     .readdata
		output wire [31:0] DDS0_FM_ModDeviationPhase_s1_writedata,     //                                     .writedata
		output wire        DDS0_FM_ModDeviationPhase_s1_chipselect,    //                                     .chipselect
		output wire [1:0]  DDS0_FM_ModPhaseStep_s1_address,            //              DDS0_FM_ModPhaseStep_s1.address
		output wire        DDS0_FM_ModPhaseStep_s1_write,              //                                     .write
		input  wire [31:0] DDS0_FM_ModPhaseStep_s1_readdata,           //                                     .readdata
		output wire [31:0] DDS0_FM_ModPhaseStep_s1_writedata,          //                                     .writedata
		output wire        DDS0_FM_ModPhaseStep_s1_chipselect,         //                                     .chipselect
		output wire [1:0]  DDS0_OutputRelay_s1_address,                //                  DDS0_OutputRelay_s1.address
		output wire        DDS0_OutputRelay_s1_write,                  //                                     .write
		input  wire [31:0] DDS0_OutputRelay_s1_readdata,               //                                     .readdata
		output wire [31:0] DDS0_OutputRelay_s1_writedata,              //                                     .writedata
		output wire        DDS0_OutputRelay_s1_chipselect,             //                                     .chipselect
		output wire [1:0]  DDS0_PhaseOffset_s1_address,                //                  DDS0_PhaseOffset_s1.address
		output wire        DDS0_PhaseOffset_s1_write,                  //                                     .write
		input  wire [31:0] DDS0_PhaseOffset_s1_readdata,               //                                     .readdata
		output wire [31:0] DDS0_PhaseOffset_s1_writedata,              //                                     .writedata
		output wire        DDS0_PhaseOffset_s1_chipselect,             //                                     .chipselect
		output wire [1:0]  DDS0_PhaseStep_s1_address,                  //                    DDS0_PhaseStep_s1.address
		output wire        DDS0_PhaseStep_s1_write,                    //                                     .write
		input  wire [31:0] DDS0_PhaseStep_s1_readdata,                 //                                     .readdata
		output wire [31:0] DDS0_PhaseStep_s1_writedata,                //                                     .writedata
		output wire        DDS0_PhaseStep_s1_chipselect,               //                                     .chipselect
		output wire [1:0]  DDS0_PM_ModIndex_s1_address,                //                  DDS0_PM_ModIndex_s1.address
		output wire        DDS0_PM_ModIndex_s1_write,                  //                                     .write
		input  wire [31:0] DDS0_PM_ModIndex_s1_readdata,               //                                     .readdata
		output wire [31:0] DDS0_PM_ModIndex_s1_writedata,              //                                     .writedata
		output wire        DDS0_PM_ModIndex_s1_chipselect,             //                                     .chipselect
		output wire [1:0]  DDS0_PM_ModPhaseStep_s1_address,            //              DDS0_PM_ModPhaseStep_s1.address
		output wire        DDS0_PM_ModPhaseStep_s1_write,              //                                     .write
		input  wire [31:0] DDS0_PM_ModPhaseStep_s1_readdata,           //                                     .readdata
		output wire [31:0] DDS0_PM_ModPhaseStep_s1_writedata,          //                                     .writedata
		output wire        DDS0_PM_ModPhaseStep_s1_chipselect,         //                                     .chipselect
		output wire [1:0]  DDS0_PWM_Amplitude_s1_address,              //                DDS0_PWM_Amplitude_s1.address
		output wire        DDS0_PWM_Amplitude_s1_write,                //                                     .write
		input  wire [31:0] DDS0_PWM_Amplitude_s1_readdata,             //                                     .readdata
		output wire [31:0] DDS0_PWM_Amplitude_s1_writedata,            //                                     .writedata
		output wire        DDS0_PWM_Amplitude_s1_chipselect,           //                                     .chipselect
		output wire [1:0]  DDS0_PWM_Offset_s1_address,                 //                   DDS0_PWM_Offset_s1.address
		output wire        DDS0_PWM_Offset_s1_write,                   //                                     .write
		input  wire [31:0] DDS0_PWM_Offset_s1_readdata,                //                                     .readdata
		output wire [31:0] DDS0_PWM_Offset_s1_writedata,               //                                     .writedata
		output wire        DDS0_PWM_Offset_s1_chipselect,              //                                     .chipselect
		output wire [1:0]  DDS1_AM_ModIndex_s1_address,                //                  DDS1_AM_ModIndex_s1.address
		output wire        DDS1_AM_ModIndex_s1_write,                  //                                     .write
		input  wire [31:0] DDS1_AM_ModIndex_s1_readdata,               //                                     .readdata
		output wire [31:0] DDS1_AM_ModIndex_s1_writedata,              //                                     .writedata
		output wire        DDS1_AM_ModIndex_s1_chipselect,             //                                     .chipselect
		output wire [1:0]  DDS1_AM_ModPhaseStep_s1_address,            //              DDS1_AM_ModPhaseStep_s1.address
		output wire        DDS1_AM_ModPhaseStep_s1_write,              //                                     .write
		input  wire [31:0] DDS1_AM_ModPhaseStep_s1_readdata,           //                                     .readdata
		output wire [31:0] DDS1_AM_ModPhaseStep_s1_writedata,          //                                     .writedata
		output wire        DDS1_AM_ModPhaseStep_s1_chipselect,         //                                     .chipselect
		output wire [1:0]  DDS1_FM_ModDeviationPhase_s1_address,       //         DDS1_FM_ModDeviationPhase_s1.address
		output wire        DDS1_FM_ModDeviationPhase_s1_write,         //                                     .write
		input  wire [31:0] DDS1_FM_ModDeviationPhase_s1_readdata,      //                                     .readdata
		output wire [31:0] DDS1_FM_ModDeviationPhase_s1_writedata,     //                                     .writedata
		output wire        DDS1_FM_ModDeviationPhase_s1_chipselect,    //                                     .chipselect
		output wire [1:0]  DDS1_FM_ModPhaseStep_s1_address,            //              DDS1_FM_ModPhaseStep_s1.address
		output wire        DDS1_FM_ModPhaseStep_s1_write,              //                                     .write
		input  wire [31:0] DDS1_FM_ModPhaseStep_s1_readdata,           //                                     .readdata
		output wire [31:0] DDS1_FM_ModPhaseStep_s1_writedata,          //                                     .writedata
		output wire        DDS1_FM_ModPhaseStep_s1_chipselect,         //                                     .chipselect
		output wire [1:0]  DDS1_OutputRelay_s1_address,                //                  DDS1_OutputRelay_s1.address
		output wire        DDS1_OutputRelay_s1_write,                  //                                     .write
		input  wire [31:0] DDS1_OutputRelay_s1_readdata,               //                                     .readdata
		output wire [31:0] DDS1_OutputRelay_s1_writedata,              //                                     .writedata
		output wire        DDS1_OutputRelay_s1_chipselect,             //                                     .chipselect
		output wire [1:0]  DDS1_PhaseOffset_s1_address,                //                  DDS1_PhaseOffset_s1.address
		output wire        DDS1_PhaseOffset_s1_write,                  //                                     .write
		input  wire [31:0] DDS1_PhaseOffset_s1_readdata,               //                                     .readdata
		output wire [31:0] DDS1_PhaseOffset_s1_writedata,              //                                     .writedata
		output wire        DDS1_PhaseOffset_s1_chipselect,             //                                     .chipselect
		output wire [1:0]  DDS1_PhaseStep_s1_address,                  //                    DDS1_PhaseStep_s1.address
		output wire        DDS1_PhaseStep_s1_write,                    //                                     .write
		input  wire [31:0] DDS1_PhaseStep_s1_readdata,                 //                                     .readdata
		output wire [31:0] DDS1_PhaseStep_s1_writedata,                //                                     .writedata
		output wire        DDS1_PhaseStep_s1_chipselect,               //                                     .chipselect
		output wire [1:0]  DDS1_PM_ModIndex_s1_address,                //                  DDS1_PM_ModIndex_s1.address
		output wire        DDS1_PM_ModIndex_s1_write,                  //                                     .write
		input  wire [31:0] DDS1_PM_ModIndex_s1_readdata,               //                                     .readdata
		output wire [31:0] DDS1_PM_ModIndex_s1_writedata,              //                                     .writedata
		output wire        DDS1_PM_ModIndex_s1_chipselect,             //                                     .chipselect
		output wire [1:0]  DDS1_PM_ModPhaseStep_s1_address,            //              DDS1_PM_ModPhaseStep_s1.address
		output wire        DDS1_PM_ModPhaseStep_s1_write,              //                                     .write
		input  wire [31:0] DDS1_PM_ModPhaseStep_s1_readdata,           //                                     .readdata
		output wire [31:0] DDS1_PM_ModPhaseStep_s1_writedata,          //                                     .writedata
		output wire        DDS1_PM_ModPhaseStep_s1_chipselect,         //                                     .chipselect
		output wire [1:0]  DDS1_PWM_Amplitude_s1_address,              //                DDS1_PWM_Amplitude_s1.address
		output wire        DDS1_PWM_Amplitude_s1_write,                //                                     .write
		input  wire [31:0] DDS1_PWM_Amplitude_s1_readdata,             //                                     .readdata
		output wire [31:0] DDS1_PWM_Amplitude_s1_writedata,            //                                     .writedata
		output wire        DDS1_PWM_Amplitude_s1_chipselect,           //                                     .chipselect
		output wire [1:0]  DDS1_PWM_Offset_s1_address,                 //                   DDS1_PWM_Offset_s1.address
		output wire        DDS1_PWM_Offset_s1_write,                   //                                     .write
		input  wire [31:0] DDS1_PWM_Offset_s1_readdata,                //                                     .readdata
		output wire [31:0] DDS1_PWM_Offset_s1_writedata,               //                                     .writedata
		output wire        DDS1_PWM_Offset_s1_chipselect,              //                                     .chipselect
		output wire [1:0]  DDS_RESET_s1_address,                       //                         DDS_RESET_s1.address
		output wire        DDS_RESET_s1_write,                         //                                     .write
		input  wire [31:0] DDS_RESET_s1_readdata,                      //                                     .readdata
		output wire [31:0] DDS_RESET_s1_writedata,                     //                                     .writedata
		output wire        DDS_RESET_s1_chipselect,                    //                                     .chipselect
		output wire [0:0]  FLASH_csr_address,                          //                            FLASH_csr.address
		output wire        FLASH_csr_write,                            //                                     .write
		output wire        FLASH_csr_read,                             //                                     .read
		input  wire [31:0] FLASH_csr_readdata,                         //                                     .readdata
		output wire [31:0] FLASH_csr_writedata,                        //                                     .writedata
		output wire [15:0] FLASH_data_address,                         //                           FLASH_data.address
		output wire        FLASH_data_write,                           //                                     .write
		output wire        FLASH_data_read,                            //                                     .read
		input  wire [31:0] FLASH_data_readdata,                        //                                     .readdata
		output wire [31:0] FLASH_data_writedata,                       //                                     .writedata
		output wire [3:0]  FLASH_data_burstcount,                      //                                     .burstcount
		input  wire        FLASH_data_readdatavalid,                   //                                     .readdatavalid
		input  wire        FLASH_data_waitrequest,                     //                                     .waitrequest
		output wire [0:0]  JTAG_UART_avalon_jtag_slave_address,        //          JTAG_UART_avalon_jtag_slave.address
		output wire        JTAG_UART_avalon_jtag_slave_write,          //                                     .write
		output wire        JTAG_UART_avalon_jtag_slave_read,           //                                     .read
		input  wire [31:0] JTAG_UART_avalon_jtag_slave_readdata,       //                                     .readdata
		output wire [31:0] JTAG_UART_avalon_jtag_slave_writedata,      //                                     .writedata
		input  wire        JTAG_UART_avalon_jtag_slave_waitrequest,    //                                     .waitrequest
		output wire        JTAG_UART_avalon_jtag_slave_chipselect,     //                                     .chipselect
		output wire [1:0]  KEYPAD_s1_address,                          //                            KEYPAD_s1.address
		output wire        KEYPAD_s1_write,                            //                                     .write
		input  wire [31:0] KEYPAD_s1_readdata,                         //                                     .readdata
		output wire [31:0] KEYPAD_s1_writedata,                        //                                     .writedata
		output wire        KEYPAD_s1_chipselect,                       //                                     .chipselect
		output wire [1:0]  LCD_BackLight_PWM_s1_address,               //                 LCD_BackLight_PWM_s1.address
		output wire        LCD_BackLight_PWM_s1_write,                 //                                     .write
		input  wire [31:0] LCD_BackLight_PWM_s1_readdata,              //                                     .readdata
		output wire [31:0] LCD_BackLight_PWM_s1_writedata,             //                                     .writedata
		output wire        LCD_BackLight_PWM_s1_chipselect,            //                                     .chipselect
		output wire [2:0]  LCD_Control_s1_address,                     //                       LCD_Control_s1.address
		output wire        LCD_Control_s1_write,                       //                                     .write
		input  wire [31:0] LCD_Control_s1_readdata,                    //                                     .readdata
		output wire [31:0] LCD_Control_s1_writedata,                   //                                     .writedata
		output wire        LCD_Control_s1_chipselect,                  //                                     .chipselect
		output wire [1:0]  LCD_Data_s1_address,                        //                          LCD_Data_s1.address
		output wire        LCD_Data_s1_write,                          //                                     .write
		input  wire [31:0] LCD_Data_s1_readdata,                       //                                     .readdata
		output wire [31:0] LCD_Data_s1_writedata,                      //                                     .writedata
		output wire        LCD_Data_s1_chipselect,                     //                                     .chipselect
		output wire [2:0]  LCD_DMA_control_port_slave_address,         //           LCD_DMA_control_port_slave.address
		output wire        LCD_DMA_control_port_slave_write,           //                                     .write
		input  wire [14:0] LCD_DMA_control_port_slave_readdata,        //                                     .readdata
		output wire [14:0] LCD_DMA_control_port_slave_writedata,       //                                     .writedata
		output wire        LCD_DMA_control_port_slave_chipselect,      //                                     .chipselect
		output wire [9:0]  LOOKUP_RAM_RAM_DDS0_AM_s1_address,          //            LOOKUP_RAM_RAM_DDS0_AM_s1.address
		output wire        LOOKUP_RAM_RAM_DDS0_AM_s1_write,            //                                     .write
		input  wire [15:0] LOOKUP_RAM_RAM_DDS0_AM_s1_readdata,         //                                     .readdata
		output wire [15:0] LOOKUP_RAM_RAM_DDS0_AM_s1_writedata,        //                                     .writedata
		output wire [1:0]  LOOKUP_RAM_RAM_DDS0_AM_s1_byteenable,       //                                     .byteenable
		output wire        LOOKUP_RAM_RAM_DDS0_AM_s1_chipselect,       //                                     .chipselect
		output wire        LOOKUP_RAM_RAM_DDS0_AM_s1_clken,            //                                     .clken
		output wire [9:0]  LOOKUP_RAM_RAM_DDS0_FM_s1_address,          //            LOOKUP_RAM_RAM_DDS0_FM_s1.address
		output wire        LOOKUP_RAM_RAM_DDS0_FM_s1_write,            //                                     .write
		input  wire [15:0] LOOKUP_RAM_RAM_DDS0_FM_s1_readdata,         //                                     .readdata
		output wire [15:0] LOOKUP_RAM_RAM_DDS0_FM_s1_writedata,        //                                     .writedata
		output wire [1:0]  LOOKUP_RAM_RAM_DDS0_FM_s1_byteenable,       //                                     .byteenable
		output wire        LOOKUP_RAM_RAM_DDS0_FM_s1_chipselect,       //                                     .chipselect
		output wire        LOOKUP_RAM_RAM_DDS0_FM_s1_clken,            //                                     .clken
		output wire [9:0]  LOOKUP_RAM_RAM_DDS0_s1_address,             //               LOOKUP_RAM_RAM_DDS0_s1.address
		output wire        LOOKUP_RAM_RAM_DDS0_s1_write,               //                                     .write
		input  wire [15:0] LOOKUP_RAM_RAM_DDS0_s1_readdata,            //                                     .readdata
		output wire [15:0] LOOKUP_RAM_RAM_DDS0_s1_writedata,           //                                     .writedata
		output wire [1:0]  LOOKUP_RAM_RAM_DDS0_s1_byteenable,          //                                     .byteenable
		output wire        LOOKUP_RAM_RAM_DDS0_s1_chipselect,          //                                     .chipselect
		output wire        LOOKUP_RAM_RAM_DDS0_s1_clken,               //                                     .clken
		output wire [9:0]  LOOKUP_RAM_RAM_DDS1_AM_s1_address,          //            LOOKUP_RAM_RAM_DDS1_AM_s1.address
		output wire        LOOKUP_RAM_RAM_DDS1_AM_s1_write,            //                                     .write
		input  wire [15:0] LOOKUP_RAM_RAM_DDS1_AM_s1_readdata,         //                                     .readdata
		output wire [15:0] LOOKUP_RAM_RAM_DDS1_AM_s1_writedata,        //                                     .writedata
		output wire [1:0]  LOOKUP_RAM_RAM_DDS1_AM_s1_byteenable,       //                                     .byteenable
		output wire        LOOKUP_RAM_RAM_DDS1_AM_s1_chipselect,       //                                     .chipselect
		output wire        LOOKUP_RAM_RAM_DDS1_AM_s1_clken,            //                                     .clken
		output wire [9:0]  LOOKUP_RAM_RAM_DDS1_FM_s1_address,          //            LOOKUP_RAM_RAM_DDS1_FM_s1.address
		output wire        LOOKUP_RAM_RAM_DDS1_FM_s1_write,            //                                     .write
		input  wire [15:0] LOOKUP_RAM_RAM_DDS1_FM_s1_readdata,         //                                     .readdata
		output wire [15:0] LOOKUP_RAM_RAM_DDS1_FM_s1_writedata,        //                                     .writedata
		output wire [1:0]  LOOKUP_RAM_RAM_DDS1_FM_s1_byteenable,       //                                     .byteenable
		output wire        LOOKUP_RAM_RAM_DDS1_FM_s1_chipselect,       //                                     .chipselect
		output wire        LOOKUP_RAM_RAM_DDS1_FM_s1_clken,            //                                     .clken
		output wire [9:0]  LOOKUP_RAM_RAM_DDS1_s1_address,             //               LOOKUP_RAM_RAM_DDS1_s1.address
		output wire        LOOKUP_RAM_RAM_DDS1_s1_write,               //                                     .write
		input  wire [15:0] LOOKUP_RAM_RAM_DDS1_s1_readdata,            //                                     .readdata
		output wire [15:0] LOOKUP_RAM_RAM_DDS1_s1_writedata,           //                                     .writedata
		output wire [1:0]  LOOKUP_RAM_RAM_DDS1_s1_byteenable,          //                                     .byteenable
		output wire        LOOKUP_RAM_RAM_DDS1_s1_chipselect,          //                                     .chipselect
		output wire        LOOKUP_RAM_RAM_DDS1_s1_clken,               //                                     .clken
		output wire [1:0]  LOOKUP_RAM_ISR_s1_address,                  //                    LOOKUP_RAM_ISR_s1.address
		output wire        LOOKUP_RAM_ISR_s1_write,                    //                                     .write
		input  wire [31:0] LOOKUP_RAM_ISR_s1_readdata,                 //                                     .readdata
		output wire [31:0] LOOKUP_RAM_ISR_s1_writedata,                //                                     .writedata
		output wire        LOOKUP_RAM_ISR_s1_chipselect,               //                                     .chipselect
		output wire [8:0]  NIOS_CPU_debug_mem_slave_address,           //             NIOS_CPU_debug_mem_slave.address
		output wire        NIOS_CPU_debug_mem_slave_write,             //                                     .write
		output wire        NIOS_CPU_debug_mem_slave_read,              //                                     .read
		input  wire [31:0] NIOS_CPU_debug_mem_slave_readdata,          //                                     .readdata
		output wire [31:0] NIOS_CPU_debug_mem_slave_writedata,         //                                     .writedata
		output wire [3:0]  NIOS_CPU_debug_mem_slave_byteenable,        //                                     .byteenable
		input  wire        NIOS_CPU_debug_mem_slave_waitrequest,       //                                     .waitrequest
		output wire        NIOS_CPU_debug_mem_slave_debugaccess,       //                                     .debugaccess
		output wire [2:0]  PIO_LED_DEBUG_s1_address,                   //                     PIO_LED_DEBUG_s1.address
		output wire        PIO_LED_DEBUG_s1_write,                     //                                     .write
		input  wire [31:0] PIO_LED_DEBUG_s1_readdata,                  //                                     .readdata
		output wire [31:0] PIO_LED_DEBUG_s1_writedata,                 //                                     .writedata
		output wire        PIO_LED_DEBUG_s1_chipselect,                //                                     .chipselect
		output wire [12:0] RAM_24K_s1_address,                         //                           RAM_24K_s1.address
		output wire        RAM_24K_s1_write,                           //                                     .write
		input  wire [31:0] RAM_24K_s1_readdata,                        //                                     .readdata
		output wire [31:0] RAM_24K_s1_writedata,                       //                                     .writedata
		output wire [3:0]  RAM_24K_s1_byteenable,                      //                                     .byteenable
		output wire        RAM_24K_s1_chipselect,                      //                                     .chipselect
		output wire        RAM_24K_s1_clken,                           //                                     .clken
		output wire [2:0]  SD_SPI_spi_control_port_address,            //              SD_SPI_spi_control_port.address
		output wire        SD_SPI_spi_control_port_write,              //                                     .write
		output wire        SD_SPI_spi_control_port_read,               //                                     .read
		input  wire [15:0] SD_SPI_spi_control_port_readdata,           //                                     .readdata
		output wire [15:0] SD_SPI_spi_control_port_writedata,          //                                     .writedata
		output wire        SD_SPI_spi_control_port_chipselect,         //                                     .chipselect
		output wire [2:0]  SPI_DMA_control_port_slave_address,         //           SPI_DMA_control_port_slave.address
		output wire        SPI_DMA_control_port_slave_write,           //                                     .write
		input  wire [14:0] SPI_DMA_control_port_slave_readdata,        //                                     .readdata
		output wire [14:0] SPI_DMA_control_port_slave_writedata,       //                                     .writedata
		output wire        SPI_DMA_control_port_slave_chipselect,      //                                     .chipselect
		output wire [2:0]  TIMER_DELAY_32bit_s1_address,               //                 TIMER_DELAY_32bit_s1.address
		output wire        TIMER_DELAY_32bit_s1_write,                 //                                     .write
		input  wire [15:0] TIMER_DELAY_32bit_s1_readdata,              //                                     .readdata
		output wire [15:0] TIMER_DELAY_32bit_s1_writedata,             //                                     .writedata
		output wire        TIMER_DELAY_32bit_s1_chipselect             //                                     .chipselect
	);

	wire          nios_cpu_data_master_translator_avalon_universal_master_0_waitrequest;                 // NIOS_CPU_data_master_agent:av_waitrequest -> NIOS_CPU_data_master_translator:uav_waitrequest
	wire   [31:0] nios_cpu_data_master_translator_avalon_universal_master_0_readdata;                    // NIOS_CPU_data_master_agent:av_readdata -> NIOS_CPU_data_master_translator:uav_readdata
	wire          nios_cpu_data_master_translator_avalon_universal_master_0_debugaccess;                 // NIOS_CPU_data_master_translator:uav_debugaccess -> NIOS_CPU_data_master_agent:av_debugaccess
	wire   [19:0] nios_cpu_data_master_translator_avalon_universal_master_0_address;                     // NIOS_CPU_data_master_translator:uav_address -> NIOS_CPU_data_master_agent:av_address
	wire          nios_cpu_data_master_translator_avalon_universal_master_0_read;                        // NIOS_CPU_data_master_translator:uav_read -> NIOS_CPU_data_master_agent:av_read
	wire    [3:0] nios_cpu_data_master_translator_avalon_universal_master_0_byteenable;                  // NIOS_CPU_data_master_translator:uav_byteenable -> NIOS_CPU_data_master_agent:av_byteenable
	wire          nios_cpu_data_master_translator_avalon_universal_master_0_readdatavalid;               // NIOS_CPU_data_master_agent:av_readdatavalid -> NIOS_CPU_data_master_translator:uav_readdatavalid
	wire          nios_cpu_data_master_translator_avalon_universal_master_0_lock;                        // NIOS_CPU_data_master_translator:uav_lock -> NIOS_CPU_data_master_agent:av_lock
	wire          nios_cpu_data_master_translator_avalon_universal_master_0_write;                       // NIOS_CPU_data_master_translator:uav_write -> NIOS_CPU_data_master_agent:av_write
	wire   [31:0] nios_cpu_data_master_translator_avalon_universal_master_0_writedata;                   // NIOS_CPU_data_master_translator:uav_writedata -> NIOS_CPU_data_master_agent:av_writedata
	wire    [2:0] nios_cpu_data_master_translator_avalon_universal_master_0_burstcount;                  // NIOS_CPU_data_master_translator:uav_burstcount -> NIOS_CPU_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                     // rsp_mux:src_valid -> NIOS_CPU_data_master_agent:rp_valid
	wire  [104:0] rsp_mux_src_data;                                                                      // rsp_mux:src_data -> NIOS_CPU_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                     // NIOS_CPU_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [46:0] rsp_mux_src_channel;                                                                   // rsp_mux:src_channel -> NIOS_CPU_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                             // rsp_mux:src_startofpacket -> NIOS_CPU_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                               // rsp_mux:src_endofpacket -> NIOS_CPU_data_master_agent:rp_endofpacket
	wire          lcd_dma_read_master_translator_avalon_universal_master_0_waitrequest;                  // LCD_DMA_read_master_agent:av_waitrequest -> LCD_DMA_read_master_translator:uav_waitrequest
	wire    [7:0] lcd_dma_read_master_translator_avalon_universal_master_0_readdata;                     // LCD_DMA_read_master_agent:av_readdata -> LCD_DMA_read_master_translator:uav_readdata
	wire          lcd_dma_read_master_translator_avalon_universal_master_0_debugaccess;                  // LCD_DMA_read_master_translator:uav_debugaccess -> LCD_DMA_read_master_agent:av_debugaccess
	wire   [19:0] lcd_dma_read_master_translator_avalon_universal_master_0_address;                      // LCD_DMA_read_master_translator:uav_address -> LCD_DMA_read_master_agent:av_address
	wire          lcd_dma_read_master_translator_avalon_universal_master_0_read;                         // LCD_DMA_read_master_translator:uav_read -> LCD_DMA_read_master_agent:av_read
	wire    [0:0] lcd_dma_read_master_translator_avalon_universal_master_0_byteenable;                   // LCD_DMA_read_master_translator:uav_byteenable -> LCD_DMA_read_master_agent:av_byteenable
	wire          lcd_dma_read_master_translator_avalon_universal_master_0_readdatavalid;                // LCD_DMA_read_master_agent:av_readdatavalid -> LCD_DMA_read_master_translator:uav_readdatavalid
	wire          lcd_dma_read_master_translator_avalon_universal_master_0_lock;                         // LCD_DMA_read_master_translator:uav_lock -> LCD_DMA_read_master_agent:av_lock
	wire          lcd_dma_read_master_translator_avalon_universal_master_0_write;                        // LCD_DMA_read_master_translator:uav_write -> LCD_DMA_read_master_agent:av_write
	wire    [7:0] lcd_dma_read_master_translator_avalon_universal_master_0_writedata;                    // LCD_DMA_read_master_translator:uav_writedata -> LCD_DMA_read_master_agent:av_writedata
	wire    [0:0] lcd_dma_read_master_translator_avalon_universal_master_0_burstcount;                   // LCD_DMA_read_master_translator:uav_burstcount -> LCD_DMA_read_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                                 // rsp_mux_001:src_valid -> LCD_DMA_read_master_agent:rp_valid
	wire   [77:0] rsp_mux_001_src_data;                                                                  // rsp_mux_001:src_data -> LCD_DMA_read_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                                 // LCD_DMA_read_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [46:0] rsp_mux_001_src_channel;                                                               // rsp_mux_001:src_channel -> LCD_DMA_read_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                         // rsp_mux_001:src_startofpacket -> LCD_DMA_read_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                           // rsp_mux_001:src_endofpacket -> LCD_DMA_read_master_agent:rp_endofpacket
	wire          spi_dma_write_master_translator_avalon_universal_master_0_waitrequest;                 // SPI_DMA_write_master_agent:av_waitrequest -> SPI_DMA_write_master_translator:uav_waitrequest
	wire    [7:0] spi_dma_write_master_translator_avalon_universal_master_0_readdata;                    // SPI_DMA_write_master_agent:av_readdata -> SPI_DMA_write_master_translator:uav_readdata
	wire          spi_dma_write_master_translator_avalon_universal_master_0_debugaccess;                 // SPI_DMA_write_master_translator:uav_debugaccess -> SPI_DMA_write_master_agent:av_debugaccess
	wire   [19:0] spi_dma_write_master_translator_avalon_universal_master_0_address;                     // SPI_DMA_write_master_translator:uav_address -> SPI_DMA_write_master_agent:av_address
	wire          spi_dma_write_master_translator_avalon_universal_master_0_read;                        // SPI_DMA_write_master_translator:uav_read -> SPI_DMA_write_master_agent:av_read
	wire    [0:0] spi_dma_write_master_translator_avalon_universal_master_0_byteenable;                  // SPI_DMA_write_master_translator:uav_byteenable -> SPI_DMA_write_master_agent:av_byteenable
	wire          spi_dma_write_master_translator_avalon_universal_master_0_readdatavalid;               // SPI_DMA_write_master_agent:av_readdatavalid -> SPI_DMA_write_master_translator:uav_readdatavalid
	wire          spi_dma_write_master_translator_avalon_universal_master_0_lock;                        // SPI_DMA_write_master_translator:uav_lock -> SPI_DMA_write_master_agent:av_lock
	wire          spi_dma_write_master_translator_avalon_universal_master_0_write;                       // SPI_DMA_write_master_translator:uav_write -> SPI_DMA_write_master_agent:av_write
	wire    [7:0] spi_dma_write_master_translator_avalon_universal_master_0_writedata;                   // SPI_DMA_write_master_translator:uav_writedata -> SPI_DMA_write_master_agent:av_writedata
	wire    [0:0] spi_dma_write_master_translator_avalon_universal_master_0_burstcount;                  // SPI_DMA_write_master_translator:uav_burstcount -> SPI_DMA_write_master_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                                 // rsp_mux_002:src_valid -> SPI_DMA_write_master_agent:rp_valid
	wire   [77:0] rsp_mux_002_src_data;                                                                  // rsp_mux_002:src_data -> SPI_DMA_write_master_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                                 // SPI_DMA_write_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire   [46:0] rsp_mux_002_src_channel;                                                               // rsp_mux_002:src_channel -> SPI_DMA_write_master_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                         // rsp_mux_002:src_startofpacket -> SPI_DMA_write_master_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                           // rsp_mux_002:src_endofpacket -> SPI_DMA_write_master_agent:rp_endofpacket
	wire          nios_cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;          // NIOS_CPU_instruction_master_agent:av_waitrequest -> NIOS_CPU_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios_cpu_instruction_master_translator_avalon_universal_master_0_readdata;             // NIOS_CPU_instruction_master_agent:av_readdata -> NIOS_CPU_instruction_master_translator:uav_readdata
	wire          nios_cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;          // NIOS_CPU_instruction_master_translator:uav_debugaccess -> NIOS_CPU_instruction_master_agent:av_debugaccess
	wire   [19:0] nios_cpu_instruction_master_translator_avalon_universal_master_0_address;              // NIOS_CPU_instruction_master_translator:uav_address -> NIOS_CPU_instruction_master_agent:av_address
	wire          nios_cpu_instruction_master_translator_avalon_universal_master_0_read;                 // NIOS_CPU_instruction_master_translator:uav_read -> NIOS_CPU_instruction_master_agent:av_read
	wire    [3:0] nios_cpu_instruction_master_translator_avalon_universal_master_0_byteenable;           // NIOS_CPU_instruction_master_translator:uav_byteenable -> NIOS_CPU_instruction_master_agent:av_byteenable
	wire          nios_cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid;        // NIOS_CPU_instruction_master_agent:av_readdatavalid -> NIOS_CPU_instruction_master_translator:uav_readdatavalid
	wire          nios_cpu_instruction_master_translator_avalon_universal_master_0_lock;                 // NIOS_CPU_instruction_master_translator:uav_lock -> NIOS_CPU_instruction_master_agent:av_lock
	wire          nios_cpu_instruction_master_translator_avalon_universal_master_0_write;                // NIOS_CPU_instruction_master_translator:uav_write -> NIOS_CPU_instruction_master_agent:av_write
	wire   [31:0] nios_cpu_instruction_master_translator_avalon_universal_master_0_writedata;            // NIOS_CPU_instruction_master_translator:uav_writedata -> NIOS_CPU_instruction_master_agent:av_writedata
	wire    [2:0] nios_cpu_instruction_master_translator_avalon_universal_master_0_burstcount;           // NIOS_CPU_instruction_master_translator:uav_burstcount -> NIOS_CPU_instruction_master_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                                 // rsp_mux_003:src_valid -> NIOS_CPU_instruction_master_agent:rp_valid
	wire  [104:0] rsp_mux_003_src_data;                                                                  // rsp_mux_003:src_data -> NIOS_CPU_instruction_master_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                                 // NIOS_CPU_instruction_master_agent:rp_ready -> rsp_mux_003:src_ready
	wire   [46:0] rsp_mux_003_src_channel;                                                               // rsp_mux_003:src_channel -> NIOS_CPU_instruction_master_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                         // rsp_mux_003:src_startofpacket -> NIOS_CPU_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                           // rsp_mux_003:src_endofpacket -> NIOS_CPU_instruction_master_agent:rp_endofpacket
	wire   [31:0] dds0_am_modindex_s1_agent_m0_readdata;                                                 // DDS0_AM_ModIndex_s1_translator:uav_readdata -> DDS0_AM_ModIndex_s1_agent:m0_readdata
	wire          dds0_am_modindex_s1_agent_m0_waitrequest;                                              // DDS0_AM_ModIndex_s1_translator:uav_waitrequest -> DDS0_AM_ModIndex_s1_agent:m0_waitrequest
	wire          dds0_am_modindex_s1_agent_m0_debugaccess;                                              // DDS0_AM_ModIndex_s1_agent:m0_debugaccess -> DDS0_AM_ModIndex_s1_translator:uav_debugaccess
	wire   [19:0] dds0_am_modindex_s1_agent_m0_address;                                                  // DDS0_AM_ModIndex_s1_agent:m0_address -> DDS0_AM_ModIndex_s1_translator:uav_address
	wire    [3:0] dds0_am_modindex_s1_agent_m0_byteenable;                                               // DDS0_AM_ModIndex_s1_agent:m0_byteenable -> DDS0_AM_ModIndex_s1_translator:uav_byteenable
	wire          dds0_am_modindex_s1_agent_m0_read;                                                     // DDS0_AM_ModIndex_s1_agent:m0_read -> DDS0_AM_ModIndex_s1_translator:uav_read
	wire          dds0_am_modindex_s1_agent_m0_readdatavalid;                                            // DDS0_AM_ModIndex_s1_translator:uav_readdatavalid -> DDS0_AM_ModIndex_s1_agent:m0_readdatavalid
	wire          dds0_am_modindex_s1_agent_m0_lock;                                                     // DDS0_AM_ModIndex_s1_agent:m0_lock -> DDS0_AM_ModIndex_s1_translator:uav_lock
	wire   [31:0] dds0_am_modindex_s1_agent_m0_writedata;                                                // DDS0_AM_ModIndex_s1_agent:m0_writedata -> DDS0_AM_ModIndex_s1_translator:uav_writedata
	wire          dds0_am_modindex_s1_agent_m0_write;                                                    // DDS0_AM_ModIndex_s1_agent:m0_write -> DDS0_AM_ModIndex_s1_translator:uav_write
	wire    [2:0] dds0_am_modindex_s1_agent_m0_burstcount;                                               // DDS0_AM_ModIndex_s1_agent:m0_burstcount -> DDS0_AM_ModIndex_s1_translator:uav_burstcount
	wire          dds0_am_modindex_s1_agent_rf_source_valid;                                             // DDS0_AM_ModIndex_s1_agent:rf_source_valid -> DDS0_AM_ModIndex_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds0_am_modindex_s1_agent_rf_source_data;                                              // DDS0_AM_ModIndex_s1_agent:rf_source_data -> DDS0_AM_ModIndex_s1_agent_rsp_fifo:in_data
	wire          dds0_am_modindex_s1_agent_rf_source_ready;                                             // DDS0_AM_ModIndex_s1_agent_rsp_fifo:in_ready -> DDS0_AM_ModIndex_s1_agent:rf_source_ready
	wire          dds0_am_modindex_s1_agent_rf_source_startofpacket;                                     // DDS0_AM_ModIndex_s1_agent:rf_source_startofpacket -> DDS0_AM_ModIndex_s1_agent_rsp_fifo:in_startofpacket
	wire          dds0_am_modindex_s1_agent_rf_source_endofpacket;                                       // DDS0_AM_ModIndex_s1_agent:rf_source_endofpacket -> DDS0_AM_ModIndex_s1_agent_rsp_fifo:in_endofpacket
	wire          dds0_am_modindex_s1_agent_rsp_fifo_out_valid;                                          // DDS0_AM_ModIndex_s1_agent_rsp_fifo:out_valid -> DDS0_AM_ModIndex_s1_agent:rf_sink_valid
	wire  [105:0] dds0_am_modindex_s1_agent_rsp_fifo_out_data;                                           // DDS0_AM_ModIndex_s1_agent_rsp_fifo:out_data -> DDS0_AM_ModIndex_s1_agent:rf_sink_data
	wire          dds0_am_modindex_s1_agent_rsp_fifo_out_ready;                                          // DDS0_AM_ModIndex_s1_agent:rf_sink_ready -> DDS0_AM_ModIndex_s1_agent_rsp_fifo:out_ready
	wire          dds0_am_modindex_s1_agent_rsp_fifo_out_startofpacket;                                  // DDS0_AM_ModIndex_s1_agent_rsp_fifo:out_startofpacket -> DDS0_AM_ModIndex_s1_agent:rf_sink_startofpacket
	wire          dds0_am_modindex_s1_agent_rsp_fifo_out_endofpacket;                                    // DDS0_AM_ModIndex_s1_agent_rsp_fifo:out_endofpacket -> DDS0_AM_ModIndex_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                                     // cmd_mux:src_valid -> DDS0_AM_ModIndex_s1_agent:cp_valid
	wire  [104:0] cmd_mux_src_data;                                                                      // cmd_mux:src_data -> DDS0_AM_ModIndex_s1_agent:cp_data
	wire          cmd_mux_src_ready;                                                                     // DDS0_AM_ModIndex_s1_agent:cp_ready -> cmd_mux:src_ready
	wire   [46:0] cmd_mux_src_channel;                                                                   // cmd_mux:src_channel -> DDS0_AM_ModIndex_s1_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                             // cmd_mux:src_startofpacket -> DDS0_AM_ModIndex_s1_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                               // cmd_mux:src_endofpacket -> DDS0_AM_ModIndex_s1_agent:cp_endofpacket
	wire   [31:0] dds1_am_modindex_s1_agent_m0_readdata;                                                 // DDS1_AM_ModIndex_s1_translator:uav_readdata -> DDS1_AM_ModIndex_s1_agent:m0_readdata
	wire          dds1_am_modindex_s1_agent_m0_waitrequest;                                              // DDS1_AM_ModIndex_s1_translator:uav_waitrequest -> DDS1_AM_ModIndex_s1_agent:m0_waitrequest
	wire          dds1_am_modindex_s1_agent_m0_debugaccess;                                              // DDS1_AM_ModIndex_s1_agent:m0_debugaccess -> DDS1_AM_ModIndex_s1_translator:uav_debugaccess
	wire   [19:0] dds1_am_modindex_s1_agent_m0_address;                                                  // DDS1_AM_ModIndex_s1_agent:m0_address -> DDS1_AM_ModIndex_s1_translator:uav_address
	wire    [3:0] dds1_am_modindex_s1_agent_m0_byteenable;                                               // DDS1_AM_ModIndex_s1_agent:m0_byteenable -> DDS1_AM_ModIndex_s1_translator:uav_byteenable
	wire          dds1_am_modindex_s1_agent_m0_read;                                                     // DDS1_AM_ModIndex_s1_agent:m0_read -> DDS1_AM_ModIndex_s1_translator:uav_read
	wire          dds1_am_modindex_s1_agent_m0_readdatavalid;                                            // DDS1_AM_ModIndex_s1_translator:uav_readdatavalid -> DDS1_AM_ModIndex_s1_agent:m0_readdatavalid
	wire          dds1_am_modindex_s1_agent_m0_lock;                                                     // DDS1_AM_ModIndex_s1_agent:m0_lock -> DDS1_AM_ModIndex_s1_translator:uav_lock
	wire   [31:0] dds1_am_modindex_s1_agent_m0_writedata;                                                // DDS1_AM_ModIndex_s1_agent:m0_writedata -> DDS1_AM_ModIndex_s1_translator:uav_writedata
	wire          dds1_am_modindex_s1_agent_m0_write;                                                    // DDS1_AM_ModIndex_s1_agent:m0_write -> DDS1_AM_ModIndex_s1_translator:uav_write
	wire    [2:0] dds1_am_modindex_s1_agent_m0_burstcount;                                               // DDS1_AM_ModIndex_s1_agent:m0_burstcount -> DDS1_AM_ModIndex_s1_translator:uav_burstcount
	wire          dds1_am_modindex_s1_agent_rf_source_valid;                                             // DDS1_AM_ModIndex_s1_agent:rf_source_valid -> DDS1_AM_ModIndex_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds1_am_modindex_s1_agent_rf_source_data;                                              // DDS1_AM_ModIndex_s1_agent:rf_source_data -> DDS1_AM_ModIndex_s1_agent_rsp_fifo:in_data
	wire          dds1_am_modindex_s1_agent_rf_source_ready;                                             // DDS1_AM_ModIndex_s1_agent_rsp_fifo:in_ready -> DDS1_AM_ModIndex_s1_agent:rf_source_ready
	wire          dds1_am_modindex_s1_agent_rf_source_startofpacket;                                     // DDS1_AM_ModIndex_s1_agent:rf_source_startofpacket -> DDS1_AM_ModIndex_s1_agent_rsp_fifo:in_startofpacket
	wire          dds1_am_modindex_s1_agent_rf_source_endofpacket;                                       // DDS1_AM_ModIndex_s1_agent:rf_source_endofpacket -> DDS1_AM_ModIndex_s1_agent_rsp_fifo:in_endofpacket
	wire          dds1_am_modindex_s1_agent_rsp_fifo_out_valid;                                          // DDS1_AM_ModIndex_s1_agent_rsp_fifo:out_valid -> DDS1_AM_ModIndex_s1_agent:rf_sink_valid
	wire  [105:0] dds1_am_modindex_s1_agent_rsp_fifo_out_data;                                           // DDS1_AM_ModIndex_s1_agent_rsp_fifo:out_data -> DDS1_AM_ModIndex_s1_agent:rf_sink_data
	wire          dds1_am_modindex_s1_agent_rsp_fifo_out_ready;                                          // DDS1_AM_ModIndex_s1_agent:rf_sink_ready -> DDS1_AM_ModIndex_s1_agent_rsp_fifo:out_ready
	wire          dds1_am_modindex_s1_agent_rsp_fifo_out_startofpacket;                                  // DDS1_AM_ModIndex_s1_agent_rsp_fifo:out_startofpacket -> DDS1_AM_ModIndex_s1_agent:rf_sink_startofpacket
	wire          dds1_am_modindex_s1_agent_rsp_fifo_out_endofpacket;                                    // DDS1_AM_ModIndex_s1_agent_rsp_fifo:out_endofpacket -> DDS1_AM_ModIndex_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                                 // cmd_mux_001:src_valid -> DDS1_AM_ModIndex_s1_agent:cp_valid
	wire  [104:0] cmd_mux_001_src_data;                                                                  // cmd_mux_001:src_data -> DDS1_AM_ModIndex_s1_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                 // DDS1_AM_ModIndex_s1_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [46:0] cmd_mux_001_src_channel;                                                               // cmd_mux_001:src_channel -> DDS1_AM_ModIndex_s1_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                         // cmd_mux_001:src_startofpacket -> DDS1_AM_ModIndex_s1_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                           // cmd_mux_001:src_endofpacket -> DDS1_AM_ModIndex_s1_agent:cp_endofpacket
	wire   [31:0] dds0_am_modphasestep_s1_agent_m0_readdata;                                             // DDS0_AM_ModPhaseStep_s1_translator:uav_readdata -> DDS0_AM_ModPhaseStep_s1_agent:m0_readdata
	wire          dds0_am_modphasestep_s1_agent_m0_waitrequest;                                          // DDS0_AM_ModPhaseStep_s1_translator:uav_waitrequest -> DDS0_AM_ModPhaseStep_s1_agent:m0_waitrequest
	wire          dds0_am_modphasestep_s1_agent_m0_debugaccess;                                          // DDS0_AM_ModPhaseStep_s1_agent:m0_debugaccess -> DDS0_AM_ModPhaseStep_s1_translator:uav_debugaccess
	wire   [19:0] dds0_am_modphasestep_s1_agent_m0_address;                                              // DDS0_AM_ModPhaseStep_s1_agent:m0_address -> DDS0_AM_ModPhaseStep_s1_translator:uav_address
	wire    [3:0] dds0_am_modphasestep_s1_agent_m0_byteenable;                                           // DDS0_AM_ModPhaseStep_s1_agent:m0_byteenable -> DDS0_AM_ModPhaseStep_s1_translator:uav_byteenable
	wire          dds0_am_modphasestep_s1_agent_m0_read;                                                 // DDS0_AM_ModPhaseStep_s1_agent:m0_read -> DDS0_AM_ModPhaseStep_s1_translator:uav_read
	wire          dds0_am_modphasestep_s1_agent_m0_readdatavalid;                                        // DDS0_AM_ModPhaseStep_s1_translator:uav_readdatavalid -> DDS0_AM_ModPhaseStep_s1_agent:m0_readdatavalid
	wire          dds0_am_modphasestep_s1_agent_m0_lock;                                                 // DDS0_AM_ModPhaseStep_s1_agent:m0_lock -> DDS0_AM_ModPhaseStep_s1_translator:uav_lock
	wire   [31:0] dds0_am_modphasestep_s1_agent_m0_writedata;                                            // DDS0_AM_ModPhaseStep_s1_agent:m0_writedata -> DDS0_AM_ModPhaseStep_s1_translator:uav_writedata
	wire          dds0_am_modphasestep_s1_agent_m0_write;                                                // DDS0_AM_ModPhaseStep_s1_agent:m0_write -> DDS0_AM_ModPhaseStep_s1_translator:uav_write
	wire    [2:0] dds0_am_modphasestep_s1_agent_m0_burstcount;                                           // DDS0_AM_ModPhaseStep_s1_agent:m0_burstcount -> DDS0_AM_ModPhaseStep_s1_translator:uav_burstcount
	wire          dds0_am_modphasestep_s1_agent_rf_source_valid;                                         // DDS0_AM_ModPhaseStep_s1_agent:rf_source_valid -> DDS0_AM_ModPhaseStep_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds0_am_modphasestep_s1_agent_rf_source_data;                                          // DDS0_AM_ModPhaseStep_s1_agent:rf_source_data -> DDS0_AM_ModPhaseStep_s1_agent_rsp_fifo:in_data
	wire          dds0_am_modphasestep_s1_agent_rf_source_ready;                                         // DDS0_AM_ModPhaseStep_s1_agent_rsp_fifo:in_ready -> DDS0_AM_ModPhaseStep_s1_agent:rf_source_ready
	wire          dds0_am_modphasestep_s1_agent_rf_source_startofpacket;                                 // DDS0_AM_ModPhaseStep_s1_agent:rf_source_startofpacket -> DDS0_AM_ModPhaseStep_s1_agent_rsp_fifo:in_startofpacket
	wire          dds0_am_modphasestep_s1_agent_rf_source_endofpacket;                                   // DDS0_AM_ModPhaseStep_s1_agent:rf_source_endofpacket -> DDS0_AM_ModPhaseStep_s1_agent_rsp_fifo:in_endofpacket
	wire          dds0_am_modphasestep_s1_agent_rsp_fifo_out_valid;                                      // DDS0_AM_ModPhaseStep_s1_agent_rsp_fifo:out_valid -> DDS0_AM_ModPhaseStep_s1_agent:rf_sink_valid
	wire  [105:0] dds0_am_modphasestep_s1_agent_rsp_fifo_out_data;                                       // DDS0_AM_ModPhaseStep_s1_agent_rsp_fifo:out_data -> DDS0_AM_ModPhaseStep_s1_agent:rf_sink_data
	wire          dds0_am_modphasestep_s1_agent_rsp_fifo_out_ready;                                      // DDS0_AM_ModPhaseStep_s1_agent:rf_sink_ready -> DDS0_AM_ModPhaseStep_s1_agent_rsp_fifo:out_ready
	wire          dds0_am_modphasestep_s1_agent_rsp_fifo_out_startofpacket;                              // DDS0_AM_ModPhaseStep_s1_agent_rsp_fifo:out_startofpacket -> DDS0_AM_ModPhaseStep_s1_agent:rf_sink_startofpacket
	wire          dds0_am_modphasestep_s1_agent_rsp_fifo_out_endofpacket;                                // DDS0_AM_ModPhaseStep_s1_agent_rsp_fifo:out_endofpacket -> DDS0_AM_ModPhaseStep_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                                 // cmd_mux_002:src_valid -> DDS0_AM_ModPhaseStep_s1_agent:cp_valid
	wire  [104:0] cmd_mux_002_src_data;                                                                  // cmd_mux_002:src_data -> DDS0_AM_ModPhaseStep_s1_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                 // DDS0_AM_ModPhaseStep_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [46:0] cmd_mux_002_src_channel;                                                               // cmd_mux_002:src_channel -> DDS0_AM_ModPhaseStep_s1_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                         // cmd_mux_002:src_startofpacket -> DDS0_AM_ModPhaseStep_s1_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                           // cmd_mux_002:src_endofpacket -> DDS0_AM_ModPhaseStep_s1_agent:cp_endofpacket
	wire   [31:0] dds1_am_modphasestep_s1_agent_m0_readdata;                                             // DDS1_AM_ModPhaseStep_s1_translator:uav_readdata -> DDS1_AM_ModPhaseStep_s1_agent:m0_readdata
	wire          dds1_am_modphasestep_s1_agent_m0_waitrequest;                                          // DDS1_AM_ModPhaseStep_s1_translator:uav_waitrequest -> DDS1_AM_ModPhaseStep_s1_agent:m0_waitrequest
	wire          dds1_am_modphasestep_s1_agent_m0_debugaccess;                                          // DDS1_AM_ModPhaseStep_s1_agent:m0_debugaccess -> DDS1_AM_ModPhaseStep_s1_translator:uav_debugaccess
	wire   [19:0] dds1_am_modphasestep_s1_agent_m0_address;                                              // DDS1_AM_ModPhaseStep_s1_agent:m0_address -> DDS1_AM_ModPhaseStep_s1_translator:uav_address
	wire    [3:0] dds1_am_modphasestep_s1_agent_m0_byteenable;                                           // DDS1_AM_ModPhaseStep_s1_agent:m0_byteenable -> DDS1_AM_ModPhaseStep_s1_translator:uav_byteenable
	wire          dds1_am_modphasestep_s1_agent_m0_read;                                                 // DDS1_AM_ModPhaseStep_s1_agent:m0_read -> DDS1_AM_ModPhaseStep_s1_translator:uav_read
	wire          dds1_am_modphasestep_s1_agent_m0_readdatavalid;                                        // DDS1_AM_ModPhaseStep_s1_translator:uav_readdatavalid -> DDS1_AM_ModPhaseStep_s1_agent:m0_readdatavalid
	wire          dds1_am_modphasestep_s1_agent_m0_lock;                                                 // DDS1_AM_ModPhaseStep_s1_agent:m0_lock -> DDS1_AM_ModPhaseStep_s1_translator:uav_lock
	wire   [31:0] dds1_am_modphasestep_s1_agent_m0_writedata;                                            // DDS1_AM_ModPhaseStep_s1_agent:m0_writedata -> DDS1_AM_ModPhaseStep_s1_translator:uav_writedata
	wire          dds1_am_modphasestep_s1_agent_m0_write;                                                // DDS1_AM_ModPhaseStep_s1_agent:m0_write -> DDS1_AM_ModPhaseStep_s1_translator:uav_write
	wire    [2:0] dds1_am_modphasestep_s1_agent_m0_burstcount;                                           // DDS1_AM_ModPhaseStep_s1_agent:m0_burstcount -> DDS1_AM_ModPhaseStep_s1_translator:uav_burstcount
	wire          dds1_am_modphasestep_s1_agent_rf_source_valid;                                         // DDS1_AM_ModPhaseStep_s1_agent:rf_source_valid -> DDS1_AM_ModPhaseStep_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds1_am_modphasestep_s1_agent_rf_source_data;                                          // DDS1_AM_ModPhaseStep_s1_agent:rf_source_data -> DDS1_AM_ModPhaseStep_s1_agent_rsp_fifo:in_data
	wire          dds1_am_modphasestep_s1_agent_rf_source_ready;                                         // DDS1_AM_ModPhaseStep_s1_agent_rsp_fifo:in_ready -> DDS1_AM_ModPhaseStep_s1_agent:rf_source_ready
	wire          dds1_am_modphasestep_s1_agent_rf_source_startofpacket;                                 // DDS1_AM_ModPhaseStep_s1_agent:rf_source_startofpacket -> DDS1_AM_ModPhaseStep_s1_agent_rsp_fifo:in_startofpacket
	wire          dds1_am_modphasestep_s1_agent_rf_source_endofpacket;                                   // DDS1_AM_ModPhaseStep_s1_agent:rf_source_endofpacket -> DDS1_AM_ModPhaseStep_s1_agent_rsp_fifo:in_endofpacket
	wire          dds1_am_modphasestep_s1_agent_rsp_fifo_out_valid;                                      // DDS1_AM_ModPhaseStep_s1_agent_rsp_fifo:out_valid -> DDS1_AM_ModPhaseStep_s1_agent:rf_sink_valid
	wire  [105:0] dds1_am_modphasestep_s1_agent_rsp_fifo_out_data;                                       // DDS1_AM_ModPhaseStep_s1_agent_rsp_fifo:out_data -> DDS1_AM_ModPhaseStep_s1_agent:rf_sink_data
	wire          dds1_am_modphasestep_s1_agent_rsp_fifo_out_ready;                                      // DDS1_AM_ModPhaseStep_s1_agent:rf_sink_ready -> DDS1_AM_ModPhaseStep_s1_agent_rsp_fifo:out_ready
	wire          dds1_am_modphasestep_s1_agent_rsp_fifo_out_startofpacket;                              // DDS1_AM_ModPhaseStep_s1_agent_rsp_fifo:out_startofpacket -> DDS1_AM_ModPhaseStep_s1_agent:rf_sink_startofpacket
	wire          dds1_am_modphasestep_s1_agent_rsp_fifo_out_endofpacket;                                // DDS1_AM_ModPhaseStep_s1_agent_rsp_fifo:out_endofpacket -> DDS1_AM_ModPhaseStep_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                                 // cmd_mux_003:src_valid -> DDS1_AM_ModPhaseStep_s1_agent:cp_valid
	wire  [104:0] cmd_mux_003_src_data;                                                                  // cmd_mux_003:src_data -> DDS1_AM_ModPhaseStep_s1_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                 // DDS1_AM_ModPhaseStep_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [46:0] cmd_mux_003_src_channel;                                                               // cmd_mux_003:src_channel -> DDS1_AM_ModPhaseStep_s1_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                         // cmd_mux_003:src_startofpacket -> DDS1_AM_ModPhaseStep_s1_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                           // cmd_mux_003:src_endofpacket -> DDS1_AM_ModPhaseStep_s1_agent:cp_endofpacket
	wire   [31:0] lcd_backlight_pwm_s1_agent_m0_readdata;                                                // LCD_BackLight_PWM_s1_translator:uav_readdata -> LCD_BackLight_PWM_s1_agent:m0_readdata
	wire          lcd_backlight_pwm_s1_agent_m0_waitrequest;                                             // LCD_BackLight_PWM_s1_translator:uav_waitrequest -> LCD_BackLight_PWM_s1_agent:m0_waitrequest
	wire          lcd_backlight_pwm_s1_agent_m0_debugaccess;                                             // LCD_BackLight_PWM_s1_agent:m0_debugaccess -> LCD_BackLight_PWM_s1_translator:uav_debugaccess
	wire   [19:0] lcd_backlight_pwm_s1_agent_m0_address;                                                 // LCD_BackLight_PWM_s1_agent:m0_address -> LCD_BackLight_PWM_s1_translator:uav_address
	wire    [3:0] lcd_backlight_pwm_s1_agent_m0_byteenable;                                              // LCD_BackLight_PWM_s1_agent:m0_byteenable -> LCD_BackLight_PWM_s1_translator:uav_byteenable
	wire          lcd_backlight_pwm_s1_agent_m0_read;                                                    // LCD_BackLight_PWM_s1_agent:m0_read -> LCD_BackLight_PWM_s1_translator:uav_read
	wire          lcd_backlight_pwm_s1_agent_m0_readdatavalid;                                           // LCD_BackLight_PWM_s1_translator:uav_readdatavalid -> LCD_BackLight_PWM_s1_agent:m0_readdatavalid
	wire          lcd_backlight_pwm_s1_agent_m0_lock;                                                    // LCD_BackLight_PWM_s1_agent:m0_lock -> LCD_BackLight_PWM_s1_translator:uav_lock
	wire   [31:0] lcd_backlight_pwm_s1_agent_m0_writedata;                                               // LCD_BackLight_PWM_s1_agent:m0_writedata -> LCD_BackLight_PWM_s1_translator:uav_writedata
	wire          lcd_backlight_pwm_s1_agent_m0_write;                                                   // LCD_BackLight_PWM_s1_agent:m0_write -> LCD_BackLight_PWM_s1_translator:uav_write
	wire    [2:0] lcd_backlight_pwm_s1_agent_m0_burstcount;                                              // LCD_BackLight_PWM_s1_agent:m0_burstcount -> LCD_BackLight_PWM_s1_translator:uav_burstcount
	wire          lcd_backlight_pwm_s1_agent_rf_source_valid;                                            // LCD_BackLight_PWM_s1_agent:rf_source_valid -> LCD_BackLight_PWM_s1_agent_rsp_fifo:in_valid
	wire  [105:0] lcd_backlight_pwm_s1_agent_rf_source_data;                                             // LCD_BackLight_PWM_s1_agent:rf_source_data -> LCD_BackLight_PWM_s1_agent_rsp_fifo:in_data
	wire          lcd_backlight_pwm_s1_agent_rf_source_ready;                                            // LCD_BackLight_PWM_s1_agent_rsp_fifo:in_ready -> LCD_BackLight_PWM_s1_agent:rf_source_ready
	wire          lcd_backlight_pwm_s1_agent_rf_source_startofpacket;                                    // LCD_BackLight_PWM_s1_agent:rf_source_startofpacket -> LCD_BackLight_PWM_s1_agent_rsp_fifo:in_startofpacket
	wire          lcd_backlight_pwm_s1_agent_rf_source_endofpacket;                                      // LCD_BackLight_PWM_s1_agent:rf_source_endofpacket -> LCD_BackLight_PWM_s1_agent_rsp_fifo:in_endofpacket
	wire          lcd_backlight_pwm_s1_agent_rsp_fifo_out_valid;                                         // LCD_BackLight_PWM_s1_agent_rsp_fifo:out_valid -> LCD_BackLight_PWM_s1_agent:rf_sink_valid
	wire  [105:0] lcd_backlight_pwm_s1_agent_rsp_fifo_out_data;                                          // LCD_BackLight_PWM_s1_agent_rsp_fifo:out_data -> LCD_BackLight_PWM_s1_agent:rf_sink_data
	wire          lcd_backlight_pwm_s1_agent_rsp_fifo_out_ready;                                         // LCD_BackLight_PWM_s1_agent:rf_sink_ready -> LCD_BackLight_PWM_s1_agent_rsp_fifo:out_ready
	wire          lcd_backlight_pwm_s1_agent_rsp_fifo_out_startofpacket;                                 // LCD_BackLight_PWM_s1_agent_rsp_fifo:out_startofpacket -> LCD_BackLight_PWM_s1_agent:rf_sink_startofpacket
	wire          lcd_backlight_pwm_s1_agent_rsp_fifo_out_endofpacket;                                   // LCD_BackLight_PWM_s1_agent_rsp_fifo:out_endofpacket -> LCD_BackLight_PWM_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                                 // cmd_mux_004:src_valid -> LCD_BackLight_PWM_s1_agent:cp_valid
	wire  [104:0] cmd_mux_004_src_data;                                                                  // cmd_mux_004:src_data -> LCD_BackLight_PWM_s1_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                 // LCD_BackLight_PWM_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [46:0] cmd_mux_004_src_channel;                                                               // cmd_mux_004:src_channel -> LCD_BackLight_PWM_s1_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                         // cmd_mux_004:src_startofpacket -> LCD_BackLight_PWM_s1_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                           // cmd_mux_004:src_endofpacket -> LCD_BackLight_PWM_s1_agent:cp_endofpacket
	wire   [31:0] lcd_control_s1_agent_m0_readdata;                                                      // LCD_Control_s1_translator:uav_readdata -> LCD_Control_s1_agent:m0_readdata
	wire          lcd_control_s1_agent_m0_waitrequest;                                                   // LCD_Control_s1_translator:uav_waitrequest -> LCD_Control_s1_agent:m0_waitrequest
	wire          lcd_control_s1_agent_m0_debugaccess;                                                   // LCD_Control_s1_agent:m0_debugaccess -> LCD_Control_s1_translator:uav_debugaccess
	wire   [19:0] lcd_control_s1_agent_m0_address;                                                       // LCD_Control_s1_agent:m0_address -> LCD_Control_s1_translator:uav_address
	wire    [3:0] lcd_control_s1_agent_m0_byteenable;                                                    // LCD_Control_s1_agent:m0_byteenable -> LCD_Control_s1_translator:uav_byteenable
	wire          lcd_control_s1_agent_m0_read;                                                          // LCD_Control_s1_agent:m0_read -> LCD_Control_s1_translator:uav_read
	wire          lcd_control_s1_agent_m0_readdatavalid;                                                 // LCD_Control_s1_translator:uav_readdatavalid -> LCD_Control_s1_agent:m0_readdatavalid
	wire          lcd_control_s1_agent_m0_lock;                                                          // LCD_Control_s1_agent:m0_lock -> LCD_Control_s1_translator:uav_lock
	wire   [31:0] lcd_control_s1_agent_m0_writedata;                                                     // LCD_Control_s1_agent:m0_writedata -> LCD_Control_s1_translator:uav_writedata
	wire          lcd_control_s1_agent_m0_write;                                                         // LCD_Control_s1_agent:m0_write -> LCD_Control_s1_translator:uav_write
	wire    [2:0] lcd_control_s1_agent_m0_burstcount;                                                    // LCD_Control_s1_agent:m0_burstcount -> LCD_Control_s1_translator:uav_burstcount
	wire          lcd_control_s1_agent_rf_source_valid;                                                  // LCD_Control_s1_agent:rf_source_valid -> LCD_Control_s1_agent_rsp_fifo:in_valid
	wire  [105:0] lcd_control_s1_agent_rf_source_data;                                                   // LCD_Control_s1_agent:rf_source_data -> LCD_Control_s1_agent_rsp_fifo:in_data
	wire          lcd_control_s1_agent_rf_source_ready;                                                  // LCD_Control_s1_agent_rsp_fifo:in_ready -> LCD_Control_s1_agent:rf_source_ready
	wire          lcd_control_s1_agent_rf_source_startofpacket;                                          // LCD_Control_s1_agent:rf_source_startofpacket -> LCD_Control_s1_agent_rsp_fifo:in_startofpacket
	wire          lcd_control_s1_agent_rf_source_endofpacket;                                            // LCD_Control_s1_agent:rf_source_endofpacket -> LCD_Control_s1_agent_rsp_fifo:in_endofpacket
	wire          lcd_control_s1_agent_rsp_fifo_out_valid;                                               // LCD_Control_s1_agent_rsp_fifo:out_valid -> LCD_Control_s1_agent:rf_sink_valid
	wire  [105:0] lcd_control_s1_agent_rsp_fifo_out_data;                                                // LCD_Control_s1_agent_rsp_fifo:out_data -> LCD_Control_s1_agent:rf_sink_data
	wire          lcd_control_s1_agent_rsp_fifo_out_ready;                                               // LCD_Control_s1_agent:rf_sink_ready -> LCD_Control_s1_agent_rsp_fifo:out_ready
	wire          lcd_control_s1_agent_rsp_fifo_out_startofpacket;                                       // LCD_Control_s1_agent_rsp_fifo:out_startofpacket -> LCD_Control_s1_agent:rf_sink_startofpacket
	wire          lcd_control_s1_agent_rsp_fifo_out_endofpacket;                                         // LCD_Control_s1_agent_rsp_fifo:out_endofpacket -> LCD_Control_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                                 // cmd_mux_005:src_valid -> LCD_Control_s1_agent:cp_valid
	wire  [104:0] cmd_mux_005_src_data;                                                                  // cmd_mux_005:src_data -> LCD_Control_s1_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                 // LCD_Control_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [46:0] cmd_mux_005_src_channel;                                                               // cmd_mux_005:src_channel -> LCD_Control_s1_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                         // cmd_mux_005:src_startofpacket -> LCD_Control_s1_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                           // cmd_mux_005:src_endofpacket -> LCD_Control_s1_agent:cp_endofpacket
	wire   [31:0] lcd_data_s1_agent_m0_readdata;                                                         // LCD_Data_s1_translator:uav_readdata -> LCD_Data_s1_agent:m0_readdata
	wire          lcd_data_s1_agent_m0_waitrequest;                                                      // LCD_Data_s1_translator:uav_waitrequest -> LCD_Data_s1_agent:m0_waitrequest
	wire          lcd_data_s1_agent_m0_debugaccess;                                                      // LCD_Data_s1_agent:m0_debugaccess -> LCD_Data_s1_translator:uav_debugaccess
	wire   [19:0] lcd_data_s1_agent_m0_address;                                                          // LCD_Data_s1_agent:m0_address -> LCD_Data_s1_translator:uav_address
	wire    [3:0] lcd_data_s1_agent_m0_byteenable;                                                       // LCD_Data_s1_agent:m0_byteenable -> LCD_Data_s1_translator:uav_byteenable
	wire          lcd_data_s1_agent_m0_read;                                                             // LCD_Data_s1_agent:m0_read -> LCD_Data_s1_translator:uav_read
	wire          lcd_data_s1_agent_m0_readdatavalid;                                                    // LCD_Data_s1_translator:uav_readdatavalid -> LCD_Data_s1_agent:m0_readdatavalid
	wire          lcd_data_s1_agent_m0_lock;                                                             // LCD_Data_s1_agent:m0_lock -> LCD_Data_s1_translator:uav_lock
	wire   [31:0] lcd_data_s1_agent_m0_writedata;                                                        // LCD_Data_s1_agent:m0_writedata -> LCD_Data_s1_translator:uav_writedata
	wire          lcd_data_s1_agent_m0_write;                                                            // LCD_Data_s1_agent:m0_write -> LCD_Data_s1_translator:uav_write
	wire    [2:0] lcd_data_s1_agent_m0_burstcount;                                                       // LCD_Data_s1_agent:m0_burstcount -> LCD_Data_s1_translator:uav_burstcount
	wire          lcd_data_s1_agent_rf_source_valid;                                                     // LCD_Data_s1_agent:rf_source_valid -> LCD_Data_s1_agent_rsp_fifo:in_valid
	wire  [105:0] lcd_data_s1_agent_rf_source_data;                                                      // LCD_Data_s1_agent:rf_source_data -> LCD_Data_s1_agent_rsp_fifo:in_data
	wire          lcd_data_s1_agent_rf_source_ready;                                                     // LCD_Data_s1_agent_rsp_fifo:in_ready -> LCD_Data_s1_agent:rf_source_ready
	wire          lcd_data_s1_agent_rf_source_startofpacket;                                             // LCD_Data_s1_agent:rf_source_startofpacket -> LCD_Data_s1_agent_rsp_fifo:in_startofpacket
	wire          lcd_data_s1_agent_rf_source_endofpacket;                                               // LCD_Data_s1_agent:rf_source_endofpacket -> LCD_Data_s1_agent_rsp_fifo:in_endofpacket
	wire          lcd_data_s1_agent_rsp_fifo_out_valid;                                                  // LCD_Data_s1_agent_rsp_fifo:out_valid -> LCD_Data_s1_agent:rf_sink_valid
	wire  [105:0] lcd_data_s1_agent_rsp_fifo_out_data;                                                   // LCD_Data_s1_agent_rsp_fifo:out_data -> LCD_Data_s1_agent:rf_sink_data
	wire          lcd_data_s1_agent_rsp_fifo_out_ready;                                                  // LCD_Data_s1_agent:rf_sink_ready -> LCD_Data_s1_agent_rsp_fifo:out_ready
	wire          lcd_data_s1_agent_rsp_fifo_out_startofpacket;                                          // LCD_Data_s1_agent_rsp_fifo:out_startofpacket -> LCD_Data_s1_agent:rf_sink_startofpacket
	wire          lcd_data_s1_agent_rsp_fifo_out_endofpacket;                                            // LCD_Data_s1_agent_rsp_fifo:out_endofpacket -> LCD_Data_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                                 // cmd_mux_006:src_valid -> LCD_Data_s1_agent:cp_valid
	wire  [104:0] cmd_mux_006_src_data;                                                                  // cmd_mux_006:src_data -> LCD_Data_s1_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                 // LCD_Data_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [46:0] cmd_mux_006_src_channel;                                                               // cmd_mux_006:src_channel -> LCD_Data_s1_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                         // cmd_mux_006:src_startofpacket -> LCD_Data_s1_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                           // cmd_mux_006:src_endofpacket -> LCD_Data_s1_agent:cp_endofpacket
	wire   [31:0] dds0_fm_moddeviationphase_s1_agent_m0_readdata;                                        // DDS0_FM_ModDeviationPhase_s1_translator:uav_readdata -> DDS0_FM_ModDeviationPhase_s1_agent:m0_readdata
	wire          dds0_fm_moddeviationphase_s1_agent_m0_waitrequest;                                     // DDS0_FM_ModDeviationPhase_s1_translator:uav_waitrequest -> DDS0_FM_ModDeviationPhase_s1_agent:m0_waitrequest
	wire          dds0_fm_moddeviationphase_s1_agent_m0_debugaccess;                                     // DDS0_FM_ModDeviationPhase_s1_agent:m0_debugaccess -> DDS0_FM_ModDeviationPhase_s1_translator:uav_debugaccess
	wire   [19:0] dds0_fm_moddeviationphase_s1_agent_m0_address;                                         // DDS0_FM_ModDeviationPhase_s1_agent:m0_address -> DDS0_FM_ModDeviationPhase_s1_translator:uav_address
	wire    [3:0] dds0_fm_moddeviationphase_s1_agent_m0_byteenable;                                      // DDS0_FM_ModDeviationPhase_s1_agent:m0_byteenable -> DDS0_FM_ModDeviationPhase_s1_translator:uav_byteenable
	wire          dds0_fm_moddeviationphase_s1_agent_m0_read;                                            // DDS0_FM_ModDeviationPhase_s1_agent:m0_read -> DDS0_FM_ModDeviationPhase_s1_translator:uav_read
	wire          dds0_fm_moddeviationphase_s1_agent_m0_readdatavalid;                                   // DDS0_FM_ModDeviationPhase_s1_translator:uav_readdatavalid -> DDS0_FM_ModDeviationPhase_s1_agent:m0_readdatavalid
	wire          dds0_fm_moddeviationphase_s1_agent_m0_lock;                                            // DDS0_FM_ModDeviationPhase_s1_agent:m0_lock -> DDS0_FM_ModDeviationPhase_s1_translator:uav_lock
	wire   [31:0] dds0_fm_moddeviationphase_s1_agent_m0_writedata;                                       // DDS0_FM_ModDeviationPhase_s1_agent:m0_writedata -> DDS0_FM_ModDeviationPhase_s1_translator:uav_writedata
	wire          dds0_fm_moddeviationphase_s1_agent_m0_write;                                           // DDS0_FM_ModDeviationPhase_s1_agent:m0_write -> DDS0_FM_ModDeviationPhase_s1_translator:uav_write
	wire    [2:0] dds0_fm_moddeviationphase_s1_agent_m0_burstcount;                                      // DDS0_FM_ModDeviationPhase_s1_agent:m0_burstcount -> DDS0_FM_ModDeviationPhase_s1_translator:uav_burstcount
	wire          dds0_fm_moddeviationphase_s1_agent_rf_source_valid;                                    // DDS0_FM_ModDeviationPhase_s1_agent:rf_source_valid -> DDS0_FM_ModDeviationPhase_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds0_fm_moddeviationphase_s1_agent_rf_source_data;                                     // DDS0_FM_ModDeviationPhase_s1_agent:rf_source_data -> DDS0_FM_ModDeviationPhase_s1_agent_rsp_fifo:in_data
	wire          dds0_fm_moddeviationphase_s1_agent_rf_source_ready;                                    // DDS0_FM_ModDeviationPhase_s1_agent_rsp_fifo:in_ready -> DDS0_FM_ModDeviationPhase_s1_agent:rf_source_ready
	wire          dds0_fm_moddeviationphase_s1_agent_rf_source_startofpacket;                            // DDS0_FM_ModDeviationPhase_s1_agent:rf_source_startofpacket -> DDS0_FM_ModDeviationPhase_s1_agent_rsp_fifo:in_startofpacket
	wire          dds0_fm_moddeviationphase_s1_agent_rf_source_endofpacket;                              // DDS0_FM_ModDeviationPhase_s1_agent:rf_source_endofpacket -> DDS0_FM_ModDeviationPhase_s1_agent_rsp_fifo:in_endofpacket
	wire          dds0_fm_moddeviationphase_s1_agent_rsp_fifo_out_valid;                                 // DDS0_FM_ModDeviationPhase_s1_agent_rsp_fifo:out_valid -> DDS0_FM_ModDeviationPhase_s1_agent:rf_sink_valid
	wire  [105:0] dds0_fm_moddeviationphase_s1_agent_rsp_fifo_out_data;                                  // DDS0_FM_ModDeviationPhase_s1_agent_rsp_fifo:out_data -> DDS0_FM_ModDeviationPhase_s1_agent:rf_sink_data
	wire          dds0_fm_moddeviationphase_s1_agent_rsp_fifo_out_ready;                                 // DDS0_FM_ModDeviationPhase_s1_agent:rf_sink_ready -> DDS0_FM_ModDeviationPhase_s1_agent_rsp_fifo:out_ready
	wire          dds0_fm_moddeviationphase_s1_agent_rsp_fifo_out_startofpacket;                         // DDS0_FM_ModDeviationPhase_s1_agent_rsp_fifo:out_startofpacket -> DDS0_FM_ModDeviationPhase_s1_agent:rf_sink_startofpacket
	wire          dds0_fm_moddeviationphase_s1_agent_rsp_fifo_out_endofpacket;                           // DDS0_FM_ModDeviationPhase_s1_agent_rsp_fifo:out_endofpacket -> DDS0_FM_ModDeviationPhase_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                                 // cmd_mux_007:src_valid -> DDS0_FM_ModDeviationPhase_s1_agent:cp_valid
	wire  [104:0] cmd_mux_007_src_data;                                                                  // cmd_mux_007:src_data -> DDS0_FM_ModDeviationPhase_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                 // DDS0_FM_ModDeviationPhase_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [46:0] cmd_mux_007_src_channel;                                                               // cmd_mux_007:src_channel -> DDS0_FM_ModDeviationPhase_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                         // cmd_mux_007:src_startofpacket -> DDS0_FM_ModDeviationPhase_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                           // cmd_mux_007:src_endofpacket -> DDS0_FM_ModDeviationPhase_s1_agent:cp_endofpacket
	wire   [31:0] dds1_fm_moddeviationphase_s1_agent_m0_readdata;                                        // DDS1_FM_ModDeviationPhase_s1_translator:uav_readdata -> DDS1_FM_ModDeviationPhase_s1_agent:m0_readdata
	wire          dds1_fm_moddeviationphase_s1_agent_m0_waitrequest;                                     // DDS1_FM_ModDeviationPhase_s1_translator:uav_waitrequest -> DDS1_FM_ModDeviationPhase_s1_agent:m0_waitrequest
	wire          dds1_fm_moddeviationphase_s1_agent_m0_debugaccess;                                     // DDS1_FM_ModDeviationPhase_s1_agent:m0_debugaccess -> DDS1_FM_ModDeviationPhase_s1_translator:uav_debugaccess
	wire   [19:0] dds1_fm_moddeviationphase_s1_agent_m0_address;                                         // DDS1_FM_ModDeviationPhase_s1_agent:m0_address -> DDS1_FM_ModDeviationPhase_s1_translator:uav_address
	wire    [3:0] dds1_fm_moddeviationphase_s1_agent_m0_byteenable;                                      // DDS1_FM_ModDeviationPhase_s1_agent:m0_byteenable -> DDS1_FM_ModDeviationPhase_s1_translator:uav_byteenable
	wire          dds1_fm_moddeviationphase_s1_agent_m0_read;                                            // DDS1_FM_ModDeviationPhase_s1_agent:m0_read -> DDS1_FM_ModDeviationPhase_s1_translator:uav_read
	wire          dds1_fm_moddeviationphase_s1_agent_m0_readdatavalid;                                   // DDS1_FM_ModDeviationPhase_s1_translator:uav_readdatavalid -> DDS1_FM_ModDeviationPhase_s1_agent:m0_readdatavalid
	wire          dds1_fm_moddeviationphase_s1_agent_m0_lock;                                            // DDS1_FM_ModDeviationPhase_s1_agent:m0_lock -> DDS1_FM_ModDeviationPhase_s1_translator:uav_lock
	wire   [31:0] dds1_fm_moddeviationphase_s1_agent_m0_writedata;                                       // DDS1_FM_ModDeviationPhase_s1_agent:m0_writedata -> DDS1_FM_ModDeviationPhase_s1_translator:uav_writedata
	wire          dds1_fm_moddeviationphase_s1_agent_m0_write;                                           // DDS1_FM_ModDeviationPhase_s1_agent:m0_write -> DDS1_FM_ModDeviationPhase_s1_translator:uav_write
	wire    [2:0] dds1_fm_moddeviationphase_s1_agent_m0_burstcount;                                      // DDS1_FM_ModDeviationPhase_s1_agent:m0_burstcount -> DDS1_FM_ModDeviationPhase_s1_translator:uav_burstcount
	wire          dds1_fm_moddeviationphase_s1_agent_rf_source_valid;                                    // DDS1_FM_ModDeviationPhase_s1_agent:rf_source_valid -> DDS1_FM_ModDeviationPhase_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds1_fm_moddeviationphase_s1_agent_rf_source_data;                                     // DDS1_FM_ModDeviationPhase_s1_agent:rf_source_data -> DDS1_FM_ModDeviationPhase_s1_agent_rsp_fifo:in_data
	wire          dds1_fm_moddeviationphase_s1_agent_rf_source_ready;                                    // DDS1_FM_ModDeviationPhase_s1_agent_rsp_fifo:in_ready -> DDS1_FM_ModDeviationPhase_s1_agent:rf_source_ready
	wire          dds1_fm_moddeviationphase_s1_agent_rf_source_startofpacket;                            // DDS1_FM_ModDeviationPhase_s1_agent:rf_source_startofpacket -> DDS1_FM_ModDeviationPhase_s1_agent_rsp_fifo:in_startofpacket
	wire          dds1_fm_moddeviationphase_s1_agent_rf_source_endofpacket;                              // DDS1_FM_ModDeviationPhase_s1_agent:rf_source_endofpacket -> DDS1_FM_ModDeviationPhase_s1_agent_rsp_fifo:in_endofpacket
	wire          dds1_fm_moddeviationphase_s1_agent_rsp_fifo_out_valid;                                 // DDS1_FM_ModDeviationPhase_s1_agent_rsp_fifo:out_valid -> DDS1_FM_ModDeviationPhase_s1_agent:rf_sink_valid
	wire  [105:0] dds1_fm_moddeviationphase_s1_agent_rsp_fifo_out_data;                                  // DDS1_FM_ModDeviationPhase_s1_agent_rsp_fifo:out_data -> DDS1_FM_ModDeviationPhase_s1_agent:rf_sink_data
	wire          dds1_fm_moddeviationphase_s1_agent_rsp_fifo_out_ready;                                 // DDS1_FM_ModDeviationPhase_s1_agent:rf_sink_ready -> DDS1_FM_ModDeviationPhase_s1_agent_rsp_fifo:out_ready
	wire          dds1_fm_moddeviationphase_s1_agent_rsp_fifo_out_startofpacket;                         // DDS1_FM_ModDeviationPhase_s1_agent_rsp_fifo:out_startofpacket -> DDS1_FM_ModDeviationPhase_s1_agent:rf_sink_startofpacket
	wire          dds1_fm_moddeviationphase_s1_agent_rsp_fifo_out_endofpacket;                           // DDS1_FM_ModDeviationPhase_s1_agent_rsp_fifo:out_endofpacket -> DDS1_FM_ModDeviationPhase_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                                 // cmd_mux_008:src_valid -> DDS1_FM_ModDeviationPhase_s1_agent:cp_valid
	wire  [104:0] cmd_mux_008_src_data;                                                                  // cmd_mux_008:src_data -> DDS1_FM_ModDeviationPhase_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                                 // DDS1_FM_ModDeviationPhase_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [46:0] cmd_mux_008_src_channel;                                                               // cmd_mux_008:src_channel -> DDS1_FM_ModDeviationPhase_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                         // cmd_mux_008:src_startofpacket -> DDS1_FM_ModDeviationPhase_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                           // cmd_mux_008:src_endofpacket -> DDS1_FM_ModDeviationPhase_s1_agent:cp_endofpacket
	wire   [31:0] dds0_fm_modphasestep_s1_agent_m0_readdata;                                             // DDS0_FM_ModPhaseStep_s1_translator:uav_readdata -> DDS0_FM_ModPhaseStep_s1_agent:m0_readdata
	wire          dds0_fm_modphasestep_s1_agent_m0_waitrequest;                                          // DDS0_FM_ModPhaseStep_s1_translator:uav_waitrequest -> DDS0_FM_ModPhaseStep_s1_agent:m0_waitrequest
	wire          dds0_fm_modphasestep_s1_agent_m0_debugaccess;                                          // DDS0_FM_ModPhaseStep_s1_agent:m0_debugaccess -> DDS0_FM_ModPhaseStep_s1_translator:uav_debugaccess
	wire   [19:0] dds0_fm_modphasestep_s1_agent_m0_address;                                              // DDS0_FM_ModPhaseStep_s1_agent:m0_address -> DDS0_FM_ModPhaseStep_s1_translator:uav_address
	wire    [3:0] dds0_fm_modphasestep_s1_agent_m0_byteenable;                                           // DDS0_FM_ModPhaseStep_s1_agent:m0_byteenable -> DDS0_FM_ModPhaseStep_s1_translator:uav_byteenable
	wire          dds0_fm_modphasestep_s1_agent_m0_read;                                                 // DDS0_FM_ModPhaseStep_s1_agent:m0_read -> DDS0_FM_ModPhaseStep_s1_translator:uav_read
	wire          dds0_fm_modphasestep_s1_agent_m0_readdatavalid;                                        // DDS0_FM_ModPhaseStep_s1_translator:uav_readdatavalid -> DDS0_FM_ModPhaseStep_s1_agent:m0_readdatavalid
	wire          dds0_fm_modphasestep_s1_agent_m0_lock;                                                 // DDS0_FM_ModPhaseStep_s1_agent:m0_lock -> DDS0_FM_ModPhaseStep_s1_translator:uav_lock
	wire   [31:0] dds0_fm_modphasestep_s1_agent_m0_writedata;                                            // DDS0_FM_ModPhaseStep_s1_agent:m0_writedata -> DDS0_FM_ModPhaseStep_s1_translator:uav_writedata
	wire          dds0_fm_modphasestep_s1_agent_m0_write;                                                // DDS0_FM_ModPhaseStep_s1_agent:m0_write -> DDS0_FM_ModPhaseStep_s1_translator:uav_write
	wire    [2:0] dds0_fm_modphasestep_s1_agent_m0_burstcount;                                           // DDS0_FM_ModPhaseStep_s1_agent:m0_burstcount -> DDS0_FM_ModPhaseStep_s1_translator:uav_burstcount
	wire          dds0_fm_modphasestep_s1_agent_rf_source_valid;                                         // DDS0_FM_ModPhaseStep_s1_agent:rf_source_valid -> DDS0_FM_ModPhaseStep_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds0_fm_modphasestep_s1_agent_rf_source_data;                                          // DDS0_FM_ModPhaseStep_s1_agent:rf_source_data -> DDS0_FM_ModPhaseStep_s1_agent_rsp_fifo:in_data
	wire          dds0_fm_modphasestep_s1_agent_rf_source_ready;                                         // DDS0_FM_ModPhaseStep_s1_agent_rsp_fifo:in_ready -> DDS0_FM_ModPhaseStep_s1_agent:rf_source_ready
	wire          dds0_fm_modphasestep_s1_agent_rf_source_startofpacket;                                 // DDS0_FM_ModPhaseStep_s1_agent:rf_source_startofpacket -> DDS0_FM_ModPhaseStep_s1_agent_rsp_fifo:in_startofpacket
	wire          dds0_fm_modphasestep_s1_agent_rf_source_endofpacket;                                   // DDS0_FM_ModPhaseStep_s1_agent:rf_source_endofpacket -> DDS0_FM_ModPhaseStep_s1_agent_rsp_fifo:in_endofpacket
	wire          dds0_fm_modphasestep_s1_agent_rsp_fifo_out_valid;                                      // DDS0_FM_ModPhaseStep_s1_agent_rsp_fifo:out_valid -> DDS0_FM_ModPhaseStep_s1_agent:rf_sink_valid
	wire  [105:0] dds0_fm_modphasestep_s1_agent_rsp_fifo_out_data;                                       // DDS0_FM_ModPhaseStep_s1_agent_rsp_fifo:out_data -> DDS0_FM_ModPhaseStep_s1_agent:rf_sink_data
	wire          dds0_fm_modphasestep_s1_agent_rsp_fifo_out_ready;                                      // DDS0_FM_ModPhaseStep_s1_agent:rf_sink_ready -> DDS0_FM_ModPhaseStep_s1_agent_rsp_fifo:out_ready
	wire          dds0_fm_modphasestep_s1_agent_rsp_fifo_out_startofpacket;                              // DDS0_FM_ModPhaseStep_s1_agent_rsp_fifo:out_startofpacket -> DDS0_FM_ModPhaseStep_s1_agent:rf_sink_startofpacket
	wire          dds0_fm_modphasestep_s1_agent_rsp_fifo_out_endofpacket;                                // DDS0_FM_ModPhaseStep_s1_agent_rsp_fifo:out_endofpacket -> DDS0_FM_ModPhaseStep_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                                 // cmd_mux_009:src_valid -> DDS0_FM_ModPhaseStep_s1_agent:cp_valid
	wire  [104:0] cmd_mux_009_src_data;                                                                  // cmd_mux_009:src_data -> DDS0_FM_ModPhaseStep_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                                 // DDS0_FM_ModPhaseStep_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [46:0] cmd_mux_009_src_channel;                                                               // cmd_mux_009:src_channel -> DDS0_FM_ModPhaseStep_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                         // cmd_mux_009:src_startofpacket -> DDS0_FM_ModPhaseStep_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                           // cmd_mux_009:src_endofpacket -> DDS0_FM_ModPhaseStep_s1_agent:cp_endofpacket
	wire   [31:0] dds1_fm_modphasestep_s1_agent_m0_readdata;                                             // DDS1_FM_ModPhaseStep_s1_translator:uav_readdata -> DDS1_FM_ModPhaseStep_s1_agent:m0_readdata
	wire          dds1_fm_modphasestep_s1_agent_m0_waitrequest;                                          // DDS1_FM_ModPhaseStep_s1_translator:uav_waitrequest -> DDS1_FM_ModPhaseStep_s1_agent:m0_waitrequest
	wire          dds1_fm_modphasestep_s1_agent_m0_debugaccess;                                          // DDS1_FM_ModPhaseStep_s1_agent:m0_debugaccess -> DDS1_FM_ModPhaseStep_s1_translator:uav_debugaccess
	wire   [19:0] dds1_fm_modphasestep_s1_agent_m0_address;                                              // DDS1_FM_ModPhaseStep_s1_agent:m0_address -> DDS1_FM_ModPhaseStep_s1_translator:uav_address
	wire    [3:0] dds1_fm_modphasestep_s1_agent_m0_byteenable;                                           // DDS1_FM_ModPhaseStep_s1_agent:m0_byteenable -> DDS1_FM_ModPhaseStep_s1_translator:uav_byteenable
	wire          dds1_fm_modphasestep_s1_agent_m0_read;                                                 // DDS1_FM_ModPhaseStep_s1_agent:m0_read -> DDS1_FM_ModPhaseStep_s1_translator:uav_read
	wire          dds1_fm_modphasestep_s1_agent_m0_readdatavalid;                                        // DDS1_FM_ModPhaseStep_s1_translator:uav_readdatavalid -> DDS1_FM_ModPhaseStep_s1_agent:m0_readdatavalid
	wire          dds1_fm_modphasestep_s1_agent_m0_lock;                                                 // DDS1_FM_ModPhaseStep_s1_agent:m0_lock -> DDS1_FM_ModPhaseStep_s1_translator:uav_lock
	wire   [31:0] dds1_fm_modphasestep_s1_agent_m0_writedata;                                            // DDS1_FM_ModPhaseStep_s1_agent:m0_writedata -> DDS1_FM_ModPhaseStep_s1_translator:uav_writedata
	wire          dds1_fm_modphasestep_s1_agent_m0_write;                                                // DDS1_FM_ModPhaseStep_s1_agent:m0_write -> DDS1_FM_ModPhaseStep_s1_translator:uav_write
	wire    [2:0] dds1_fm_modphasestep_s1_agent_m0_burstcount;                                           // DDS1_FM_ModPhaseStep_s1_agent:m0_burstcount -> DDS1_FM_ModPhaseStep_s1_translator:uav_burstcount
	wire          dds1_fm_modphasestep_s1_agent_rf_source_valid;                                         // DDS1_FM_ModPhaseStep_s1_agent:rf_source_valid -> DDS1_FM_ModPhaseStep_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds1_fm_modphasestep_s1_agent_rf_source_data;                                          // DDS1_FM_ModPhaseStep_s1_agent:rf_source_data -> DDS1_FM_ModPhaseStep_s1_agent_rsp_fifo:in_data
	wire          dds1_fm_modphasestep_s1_agent_rf_source_ready;                                         // DDS1_FM_ModPhaseStep_s1_agent_rsp_fifo:in_ready -> DDS1_FM_ModPhaseStep_s1_agent:rf_source_ready
	wire          dds1_fm_modphasestep_s1_agent_rf_source_startofpacket;                                 // DDS1_FM_ModPhaseStep_s1_agent:rf_source_startofpacket -> DDS1_FM_ModPhaseStep_s1_agent_rsp_fifo:in_startofpacket
	wire          dds1_fm_modphasestep_s1_agent_rf_source_endofpacket;                                   // DDS1_FM_ModPhaseStep_s1_agent:rf_source_endofpacket -> DDS1_FM_ModPhaseStep_s1_agent_rsp_fifo:in_endofpacket
	wire          dds1_fm_modphasestep_s1_agent_rsp_fifo_out_valid;                                      // DDS1_FM_ModPhaseStep_s1_agent_rsp_fifo:out_valid -> DDS1_FM_ModPhaseStep_s1_agent:rf_sink_valid
	wire  [105:0] dds1_fm_modphasestep_s1_agent_rsp_fifo_out_data;                                       // DDS1_FM_ModPhaseStep_s1_agent_rsp_fifo:out_data -> DDS1_FM_ModPhaseStep_s1_agent:rf_sink_data
	wire          dds1_fm_modphasestep_s1_agent_rsp_fifo_out_ready;                                      // DDS1_FM_ModPhaseStep_s1_agent:rf_sink_ready -> DDS1_FM_ModPhaseStep_s1_agent_rsp_fifo:out_ready
	wire          dds1_fm_modphasestep_s1_agent_rsp_fifo_out_startofpacket;                              // DDS1_FM_ModPhaseStep_s1_agent_rsp_fifo:out_startofpacket -> DDS1_FM_ModPhaseStep_s1_agent:rf_sink_startofpacket
	wire          dds1_fm_modphasestep_s1_agent_rsp_fifo_out_endofpacket;                                // DDS1_FM_ModPhaseStep_s1_agent_rsp_fifo:out_endofpacket -> DDS1_FM_ModPhaseStep_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                                 // cmd_mux_010:src_valid -> DDS1_FM_ModPhaseStep_s1_agent:cp_valid
	wire  [104:0] cmd_mux_010_src_data;                                                                  // cmd_mux_010:src_data -> DDS1_FM_ModPhaseStep_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                                 // DDS1_FM_ModPhaseStep_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [46:0] cmd_mux_010_src_channel;                                                               // cmd_mux_010:src_channel -> DDS1_FM_ModPhaseStep_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                         // cmd_mux_010:src_startofpacket -> DDS1_FM_ModPhaseStep_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                           // cmd_mux_010:src_endofpacket -> DDS1_FM_ModPhaseStep_s1_agent:cp_endofpacket
	wire   [31:0] dds0_outputrelay_s1_agent_m0_readdata;                                                 // DDS0_OutputRelay_s1_translator:uav_readdata -> DDS0_OutputRelay_s1_agent:m0_readdata
	wire          dds0_outputrelay_s1_agent_m0_waitrequest;                                              // DDS0_OutputRelay_s1_translator:uav_waitrequest -> DDS0_OutputRelay_s1_agent:m0_waitrequest
	wire          dds0_outputrelay_s1_agent_m0_debugaccess;                                              // DDS0_OutputRelay_s1_agent:m0_debugaccess -> DDS0_OutputRelay_s1_translator:uav_debugaccess
	wire   [19:0] dds0_outputrelay_s1_agent_m0_address;                                                  // DDS0_OutputRelay_s1_agent:m0_address -> DDS0_OutputRelay_s1_translator:uav_address
	wire    [3:0] dds0_outputrelay_s1_agent_m0_byteenable;                                               // DDS0_OutputRelay_s1_agent:m0_byteenable -> DDS0_OutputRelay_s1_translator:uav_byteenable
	wire          dds0_outputrelay_s1_agent_m0_read;                                                     // DDS0_OutputRelay_s1_agent:m0_read -> DDS0_OutputRelay_s1_translator:uav_read
	wire          dds0_outputrelay_s1_agent_m0_readdatavalid;                                            // DDS0_OutputRelay_s1_translator:uav_readdatavalid -> DDS0_OutputRelay_s1_agent:m0_readdatavalid
	wire          dds0_outputrelay_s1_agent_m0_lock;                                                     // DDS0_OutputRelay_s1_agent:m0_lock -> DDS0_OutputRelay_s1_translator:uav_lock
	wire   [31:0] dds0_outputrelay_s1_agent_m0_writedata;                                                // DDS0_OutputRelay_s1_agent:m0_writedata -> DDS0_OutputRelay_s1_translator:uav_writedata
	wire          dds0_outputrelay_s1_agent_m0_write;                                                    // DDS0_OutputRelay_s1_agent:m0_write -> DDS0_OutputRelay_s1_translator:uav_write
	wire    [2:0] dds0_outputrelay_s1_agent_m0_burstcount;                                               // DDS0_OutputRelay_s1_agent:m0_burstcount -> DDS0_OutputRelay_s1_translator:uav_burstcount
	wire          dds0_outputrelay_s1_agent_rf_source_valid;                                             // DDS0_OutputRelay_s1_agent:rf_source_valid -> DDS0_OutputRelay_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds0_outputrelay_s1_agent_rf_source_data;                                              // DDS0_OutputRelay_s1_agent:rf_source_data -> DDS0_OutputRelay_s1_agent_rsp_fifo:in_data
	wire          dds0_outputrelay_s1_agent_rf_source_ready;                                             // DDS0_OutputRelay_s1_agent_rsp_fifo:in_ready -> DDS0_OutputRelay_s1_agent:rf_source_ready
	wire          dds0_outputrelay_s1_agent_rf_source_startofpacket;                                     // DDS0_OutputRelay_s1_agent:rf_source_startofpacket -> DDS0_OutputRelay_s1_agent_rsp_fifo:in_startofpacket
	wire          dds0_outputrelay_s1_agent_rf_source_endofpacket;                                       // DDS0_OutputRelay_s1_agent:rf_source_endofpacket -> DDS0_OutputRelay_s1_agent_rsp_fifo:in_endofpacket
	wire          dds0_outputrelay_s1_agent_rsp_fifo_out_valid;                                          // DDS0_OutputRelay_s1_agent_rsp_fifo:out_valid -> DDS0_OutputRelay_s1_agent:rf_sink_valid
	wire  [105:0] dds0_outputrelay_s1_agent_rsp_fifo_out_data;                                           // DDS0_OutputRelay_s1_agent_rsp_fifo:out_data -> DDS0_OutputRelay_s1_agent:rf_sink_data
	wire          dds0_outputrelay_s1_agent_rsp_fifo_out_ready;                                          // DDS0_OutputRelay_s1_agent:rf_sink_ready -> DDS0_OutputRelay_s1_agent_rsp_fifo:out_ready
	wire          dds0_outputrelay_s1_agent_rsp_fifo_out_startofpacket;                                  // DDS0_OutputRelay_s1_agent_rsp_fifo:out_startofpacket -> DDS0_OutputRelay_s1_agent:rf_sink_startofpacket
	wire          dds0_outputrelay_s1_agent_rsp_fifo_out_endofpacket;                                    // DDS0_OutputRelay_s1_agent_rsp_fifo:out_endofpacket -> DDS0_OutputRelay_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                                 // cmd_mux_011:src_valid -> DDS0_OutputRelay_s1_agent:cp_valid
	wire  [104:0] cmd_mux_011_src_data;                                                                  // cmd_mux_011:src_data -> DDS0_OutputRelay_s1_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                                 // DDS0_OutputRelay_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [46:0] cmd_mux_011_src_channel;                                                               // cmd_mux_011:src_channel -> DDS0_OutputRelay_s1_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                         // cmd_mux_011:src_startofpacket -> DDS0_OutputRelay_s1_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                           // cmd_mux_011:src_endofpacket -> DDS0_OutputRelay_s1_agent:cp_endofpacket
	wire   [31:0] dds1_outputrelay_s1_agent_m0_readdata;                                                 // DDS1_OutputRelay_s1_translator:uav_readdata -> DDS1_OutputRelay_s1_agent:m0_readdata
	wire          dds1_outputrelay_s1_agent_m0_waitrequest;                                              // DDS1_OutputRelay_s1_translator:uav_waitrequest -> DDS1_OutputRelay_s1_agent:m0_waitrequest
	wire          dds1_outputrelay_s1_agent_m0_debugaccess;                                              // DDS1_OutputRelay_s1_agent:m0_debugaccess -> DDS1_OutputRelay_s1_translator:uav_debugaccess
	wire   [19:0] dds1_outputrelay_s1_agent_m0_address;                                                  // DDS1_OutputRelay_s1_agent:m0_address -> DDS1_OutputRelay_s1_translator:uav_address
	wire    [3:0] dds1_outputrelay_s1_agent_m0_byteenable;                                               // DDS1_OutputRelay_s1_agent:m0_byteenable -> DDS1_OutputRelay_s1_translator:uav_byteenable
	wire          dds1_outputrelay_s1_agent_m0_read;                                                     // DDS1_OutputRelay_s1_agent:m0_read -> DDS1_OutputRelay_s1_translator:uav_read
	wire          dds1_outputrelay_s1_agent_m0_readdatavalid;                                            // DDS1_OutputRelay_s1_translator:uav_readdatavalid -> DDS1_OutputRelay_s1_agent:m0_readdatavalid
	wire          dds1_outputrelay_s1_agent_m0_lock;                                                     // DDS1_OutputRelay_s1_agent:m0_lock -> DDS1_OutputRelay_s1_translator:uav_lock
	wire   [31:0] dds1_outputrelay_s1_agent_m0_writedata;                                                // DDS1_OutputRelay_s1_agent:m0_writedata -> DDS1_OutputRelay_s1_translator:uav_writedata
	wire          dds1_outputrelay_s1_agent_m0_write;                                                    // DDS1_OutputRelay_s1_agent:m0_write -> DDS1_OutputRelay_s1_translator:uav_write
	wire    [2:0] dds1_outputrelay_s1_agent_m0_burstcount;                                               // DDS1_OutputRelay_s1_agent:m0_burstcount -> DDS1_OutputRelay_s1_translator:uav_burstcount
	wire          dds1_outputrelay_s1_agent_rf_source_valid;                                             // DDS1_OutputRelay_s1_agent:rf_source_valid -> DDS1_OutputRelay_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds1_outputrelay_s1_agent_rf_source_data;                                              // DDS1_OutputRelay_s1_agent:rf_source_data -> DDS1_OutputRelay_s1_agent_rsp_fifo:in_data
	wire          dds1_outputrelay_s1_agent_rf_source_ready;                                             // DDS1_OutputRelay_s1_agent_rsp_fifo:in_ready -> DDS1_OutputRelay_s1_agent:rf_source_ready
	wire          dds1_outputrelay_s1_agent_rf_source_startofpacket;                                     // DDS1_OutputRelay_s1_agent:rf_source_startofpacket -> DDS1_OutputRelay_s1_agent_rsp_fifo:in_startofpacket
	wire          dds1_outputrelay_s1_agent_rf_source_endofpacket;                                       // DDS1_OutputRelay_s1_agent:rf_source_endofpacket -> DDS1_OutputRelay_s1_agent_rsp_fifo:in_endofpacket
	wire          dds1_outputrelay_s1_agent_rsp_fifo_out_valid;                                          // DDS1_OutputRelay_s1_agent_rsp_fifo:out_valid -> DDS1_OutputRelay_s1_agent:rf_sink_valid
	wire  [105:0] dds1_outputrelay_s1_agent_rsp_fifo_out_data;                                           // DDS1_OutputRelay_s1_agent_rsp_fifo:out_data -> DDS1_OutputRelay_s1_agent:rf_sink_data
	wire          dds1_outputrelay_s1_agent_rsp_fifo_out_ready;                                          // DDS1_OutputRelay_s1_agent:rf_sink_ready -> DDS1_OutputRelay_s1_agent_rsp_fifo:out_ready
	wire          dds1_outputrelay_s1_agent_rsp_fifo_out_startofpacket;                                  // DDS1_OutputRelay_s1_agent_rsp_fifo:out_startofpacket -> DDS1_OutputRelay_s1_agent:rf_sink_startofpacket
	wire          dds1_outputrelay_s1_agent_rsp_fifo_out_endofpacket;                                    // DDS1_OutputRelay_s1_agent_rsp_fifo:out_endofpacket -> DDS1_OutputRelay_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                                 // cmd_mux_012:src_valid -> DDS1_OutputRelay_s1_agent:cp_valid
	wire  [104:0] cmd_mux_012_src_data;                                                                  // cmd_mux_012:src_data -> DDS1_OutputRelay_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                                 // DDS1_OutputRelay_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [46:0] cmd_mux_012_src_channel;                                                               // cmd_mux_012:src_channel -> DDS1_OutputRelay_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                         // cmd_mux_012:src_startofpacket -> DDS1_OutputRelay_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                           // cmd_mux_012:src_endofpacket -> DDS1_OutputRelay_s1_agent:cp_endofpacket
	wire   [31:0] dds0_pm_modindex_s1_agent_m0_readdata;                                                 // DDS0_PM_ModIndex_s1_translator:uav_readdata -> DDS0_PM_ModIndex_s1_agent:m0_readdata
	wire          dds0_pm_modindex_s1_agent_m0_waitrequest;                                              // DDS0_PM_ModIndex_s1_translator:uav_waitrequest -> DDS0_PM_ModIndex_s1_agent:m0_waitrequest
	wire          dds0_pm_modindex_s1_agent_m0_debugaccess;                                              // DDS0_PM_ModIndex_s1_agent:m0_debugaccess -> DDS0_PM_ModIndex_s1_translator:uav_debugaccess
	wire   [19:0] dds0_pm_modindex_s1_agent_m0_address;                                                  // DDS0_PM_ModIndex_s1_agent:m0_address -> DDS0_PM_ModIndex_s1_translator:uav_address
	wire    [3:0] dds0_pm_modindex_s1_agent_m0_byteenable;                                               // DDS0_PM_ModIndex_s1_agent:m0_byteenable -> DDS0_PM_ModIndex_s1_translator:uav_byteenable
	wire          dds0_pm_modindex_s1_agent_m0_read;                                                     // DDS0_PM_ModIndex_s1_agent:m0_read -> DDS0_PM_ModIndex_s1_translator:uav_read
	wire          dds0_pm_modindex_s1_agent_m0_readdatavalid;                                            // DDS0_PM_ModIndex_s1_translator:uav_readdatavalid -> DDS0_PM_ModIndex_s1_agent:m0_readdatavalid
	wire          dds0_pm_modindex_s1_agent_m0_lock;                                                     // DDS0_PM_ModIndex_s1_agent:m0_lock -> DDS0_PM_ModIndex_s1_translator:uav_lock
	wire   [31:0] dds0_pm_modindex_s1_agent_m0_writedata;                                                // DDS0_PM_ModIndex_s1_agent:m0_writedata -> DDS0_PM_ModIndex_s1_translator:uav_writedata
	wire          dds0_pm_modindex_s1_agent_m0_write;                                                    // DDS0_PM_ModIndex_s1_agent:m0_write -> DDS0_PM_ModIndex_s1_translator:uav_write
	wire    [2:0] dds0_pm_modindex_s1_agent_m0_burstcount;                                               // DDS0_PM_ModIndex_s1_agent:m0_burstcount -> DDS0_PM_ModIndex_s1_translator:uav_burstcount
	wire          dds0_pm_modindex_s1_agent_rf_source_valid;                                             // DDS0_PM_ModIndex_s1_agent:rf_source_valid -> DDS0_PM_ModIndex_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds0_pm_modindex_s1_agent_rf_source_data;                                              // DDS0_PM_ModIndex_s1_agent:rf_source_data -> DDS0_PM_ModIndex_s1_agent_rsp_fifo:in_data
	wire          dds0_pm_modindex_s1_agent_rf_source_ready;                                             // DDS0_PM_ModIndex_s1_agent_rsp_fifo:in_ready -> DDS0_PM_ModIndex_s1_agent:rf_source_ready
	wire          dds0_pm_modindex_s1_agent_rf_source_startofpacket;                                     // DDS0_PM_ModIndex_s1_agent:rf_source_startofpacket -> DDS0_PM_ModIndex_s1_agent_rsp_fifo:in_startofpacket
	wire          dds0_pm_modindex_s1_agent_rf_source_endofpacket;                                       // DDS0_PM_ModIndex_s1_agent:rf_source_endofpacket -> DDS0_PM_ModIndex_s1_agent_rsp_fifo:in_endofpacket
	wire          dds0_pm_modindex_s1_agent_rsp_fifo_out_valid;                                          // DDS0_PM_ModIndex_s1_agent_rsp_fifo:out_valid -> DDS0_PM_ModIndex_s1_agent:rf_sink_valid
	wire  [105:0] dds0_pm_modindex_s1_agent_rsp_fifo_out_data;                                           // DDS0_PM_ModIndex_s1_agent_rsp_fifo:out_data -> DDS0_PM_ModIndex_s1_agent:rf_sink_data
	wire          dds0_pm_modindex_s1_agent_rsp_fifo_out_ready;                                          // DDS0_PM_ModIndex_s1_agent:rf_sink_ready -> DDS0_PM_ModIndex_s1_agent_rsp_fifo:out_ready
	wire          dds0_pm_modindex_s1_agent_rsp_fifo_out_startofpacket;                                  // DDS0_PM_ModIndex_s1_agent_rsp_fifo:out_startofpacket -> DDS0_PM_ModIndex_s1_agent:rf_sink_startofpacket
	wire          dds0_pm_modindex_s1_agent_rsp_fifo_out_endofpacket;                                    // DDS0_PM_ModIndex_s1_agent_rsp_fifo:out_endofpacket -> DDS0_PM_ModIndex_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                                 // cmd_mux_013:src_valid -> DDS0_PM_ModIndex_s1_agent:cp_valid
	wire  [104:0] cmd_mux_013_src_data;                                                                  // cmd_mux_013:src_data -> DDS0_PM_ModIndex_s1_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                                 // DDS0_PM_ModIndex_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [46:0] cmd_mux_013_src_channel;                                                               // cmd_mux_013:src_channel -> DDS0_PM_ModIndex_s1_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                         // cmd_mux_013:src_startofpacket -> DDS0_PM_ModIndex_s1_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                           // cmd_mux_013:src_endofpacket -> DDS0_PM_ModIndex_s1_agent:cp_endofpacket
	wire   [31:0] dds1_pm_modindex_s1_agent_m0_readdata;                                                 // DDS1_PM_ModIndex_s1_translator:uav_readdata -> DDS1_PM_ModIndex_s1_agent:m0_readdata
	wire          dds1_pm_modindex_s1_agent_m0_waitrequest;                                              // DDS1_PM_ModIndex_s1_translator:uav_waitrequest -> DDS1_PM_ModIndex_s1_agent:m0_waitrequest
	wire          dds1_pm_modindex_s1_agent_m0_debugaccess;                                              // DDS1_PM_ModIndex_s1_agent:m0_debugaccess -> DDS1_PM_ModIndex_s1_translator:uav_debugaccess
	wire   [19:0] dds1_pm_modindex_s1_agent_m0_address;                                                  // DDS1_PM_ModIndex_s1_agent:m0_address -> DDS1_PM_ModIndex_s1_translator:uav_address
	wire    [3:0] dds1_pm_modindex_s1_agent_m0_byteenable;                                               // DDS1_PM_ModIndex_s1_agent:m0_byteenable -> DDS1_PM_ModIndex_s1_translator:uav_byteenable
	wire          dds1_pm_modindex_s1_agent_m0_read;                                                     // DDS1_PM_ModIndex_s1_agent:m0_read -> DDS1_PM_ModIndex_s1_translator:uav_read
	wire          dds1_pm_modindex_s1_agent_m0_readdatavalid;                                            // DDS1_PM_ModIndex_s1_translator:uav_readdatavalid -> DDS1_PM_ModIndex_s1_agent:m0_readdatavalid
	wire          dds1_pm_modindex_s1_agent_m0_lock;                                                     // DDS1_PM_ModIndex_s1_agent:m0_lock -> DDS1_PM_ModIndex_s1_translator:uav_lock
	wire   [31:0] dds1_pm_modindex_s1_agent_m0_writedata;                                                // DDS1_PM_ModIndex_s1_agent:m0_writedata -> DDS1_PM_ModIndex_s1_translator:uav_writedata
	wire          dds1_pm_modindex_s1_agent_m0_write;                                                    // DDS1_PM_ModIndex_s1_agent:m0_write -> DDS1_PM_ModIndex_s1_translator:uav_write
	wire    [2:0] dds1_pm_modindex_s1_agent_m0_burstcount;                                               // DDS1_PM_ModIndex_s1_agent:m0_burstcount -> DDS1_PM_ModIndex_s1_translator:uav_burstcount
	wire          dds1_pm_modindex_s1_agent_rf_source_valid;                                             // DDS1_PM_ModIndex_s1_agent:rf_source_valid -> DDS1_PM_ModIndex_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds1_pm_modindex_s1_agent_rf_source_data;                                              // DDS1_PM_ModIndex_s1_agent:rf_source_data -> DDS1_PM_ModIndex_s1_agent_rsp_fifo:in_data
	wire          dds1_pm_modindex_s1_agent_rf_source_ready;                                             // DDS1_PM_ModIndex_s1_agent_rsp_fifo:in_ready -> DDS1_PM_ModIndex_s1_agent:rf_source_ready
	wire          dds1_pm_modindex_s1_agent_rf_source_startofpacket;                                     // DDS1_PM_ModIndex_s1_agent:rf_source_startofpacket -> DDS1_PM_ModIndex_s1_agent_rsp_fifo:in_startofpacket
	wire          dds1_pm_modindex_s1_agent_rf_source_endofpacket;                                       // DDS1_PM_ModIndex_s1_agent:rf_source_endofpacket -> DDS1_PM_ModIndex_s1_agent_rsp_fifo:in_endofpacket
	wire          dds1_pm_modindex_s1_agent_rsp_fifo_out_valid;                                          // DDS1_PM_ModIndex_s1_agent_rsp_fifo:out_valid -> DDS1_PM_ModIndex_s1_agent:rf_sink_valid
	wire  [105:0] dds1_pm_modindex_s1_agent_rsp_fifo_out_data;                                           // DDS1_PM_ModIndex_s1_agent_rsp_fifo:out_data -> DDS1_PM_ModIndex_s1_agent:rf_sink_data
	wire          dds1_pm_modindex_s1_agent_rsp_fifo_out_ready;                                          // DDS1_PM_ModIndex_s1_agent:rf_sink_ready -> DDS1_PM_ModIndex_s1_agent_rsp_fifo:out_ready
	wire          dds1_pm_modindex_s1_agent_rsp_fifo_out_startofpacket;                                  // DDS1_PM_ModIndex_s1_agent_rsp_fifo:out_startofpacket -> DDS1_PM_ModIndex_s1_agent:rf_sink_startofpacket
	wire          dds1_pm_modindex_s1_agent_rsp_fifo_out_endofpacket;                                    // DDS1_PM_ModIndex_s1_agent_rsp_fifo:out_endofpacket -> DDS1_PM_ModIndex_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                                 // cmd_mux_014:src_valid -> DDS1_PM_ModIndex_s1_agent:cp_valid
	wire  [104:0] cmd_mux_014_src_data;                                                                  // cmd_mux_014:src_data -> DDS1_PM_ModIndex_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                                 // DDS1_PM_ModIndex_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [46:0] cmd_mux_014_src_channel;                                                               // cmd_mux_014:src_channel -> DDS1_PM_ModIndex_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                         // cmd_mux_014:src_startofpacket -> DDS1_PM_ModIndex_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                           // cmd_mux_014:src_endofpacket -> DDS1_PM_ModIndex_s1_agent:cp_endofpacket
	wire   [31:0] dds0_pm_modphasestep_s1_agent_m0_readdata;                                             // DDS0_PM_ModPhaseStep_s1_translator:uav_readdata -> DDS0_PM_ModPhaseStep_s1_agent:m0_readdata
	wire          dds0_pm_modphasestep_s1_agent_m0_waitrequest;                                          // DDS0_PM_ModPhaseStep_s1_translator:uav_waitrequest -> DDS0_PM_ModPhaseStep_s1_agent:m0_waitrequest
	wire          dds0_pm_modphasestep_s1_agent_m0_debugaccess;                                          // DDS0_PM_ModPhaseStep_s1_agent:m0_debugaccess -> DDS0_PM_ModPhaseStep_s1_translator:uav_debugaccess
	wire   [19:0] dds0_pm_modphasestep_s1_agent_m0_address;                                              // DDS0_PM_ModPhaseStep_s1_agent:m0_address -> DDS0_PM_ModPhaseStep_s1_translator:uav_address
	wire    [3:0] dds0_pm_modphasestep_s1_agent_m0_byteenable;                                           // DDS0_PM_ModPhaseStep_s1_agent:m0_byteenable -> DDS0_PM_ModPhaseStep_s1_translator:uav_byteenable
	wire          dds0_pm_modphasestep_s1_agent_m0_read;                                                 // DDS0_PM_ModPhaseStep_s1_agent:m0_read -> DDS0_PM_ModPhaseStep_s1_translator:uav_read
	wire          dds0_pm_modphasestep_s1_agent_m0_readdatavalid;                                        // DDS0_PM_ModPhaseStep_s1_translator:uav_readdatavalid -> DDS0_PM_ModPhaseStep_s1_agent:m0_readdatavalid
	wire          dds0_pm_modphasestep_s1_agent_m0_lock;                                                 // DDS0_PM_ModPhaseStep_s1_agent:m0_lock -> DDS0_PM_ModPhaseStep_s1_translator:uav_lock
	wire   [31:0] dds0_pm_modphasestep_s1_agent_m0_writedata;                                            // DDS0_PM_ModPhaseStep_s1_agent:m0_writedata -> DDS0_PM_ModPhaseStep_s1_translator:uav_writedata
	wire          dds0_pm_modphasestep_s1_agent_m0_write;                                                // DDS0_PM_ModPhaseStep_s1_agent:m0_write -> DDS0_PM_ModPhaseStep_s1_translator:uav_write
	wire    [2:0] dds0_pm_modphasestep_s1_agent_m0_burstcount;                                           // DDS0_PM_ModPhaseStep_s1_agent:m0_burstcount -> DDS0_PM_ModPhaseStep_s1_translator:uav_burstcount
	wire          dds0_pm_modphasestep_s1_agent_rf_source_valid;                                         // DDS0_PM_ModPhaseStep_s1_agent:rf_source_valid -> DDS0_PM_ModPhaseStep_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds0_pm_modphasestep_s1_agent_rf_source_data;                                          // DDS0_PM_ModPhaseStep_s1_agent:rf_source_data -> DDS0_PM_ModPhaseStep_s1_agent_rsp_fifo:in_data
	wire          dds0_pm_modphasestep_s1_agent_rf_source_ready;                                         // DDS0_PM_ModPhaseStep_s1_agent_rsp_fifo:in_ready -> DDS0_PM_ModPhaseStep_s1_agent:rf_source_ready
	wire          dds0_pm_modphasestep_s1_agent_rf_source_startofpacket;                                 // DDS0_PM_ModPhaseStep_s1_agent:rf_source_startofpacket -> DDS0_PM_ModPhaseStep_s1_agent_rsp_fifo:in_startofpacket
	wire          dds0_pm_modphasestep_s1_agent_rf_source_endofpacket;                                   // DDS0_PM_ModPhaseStep_s1_agent:rf_source_endofpacket -> DDS0_PM_ModPhaseStep_s1_agent_rsp_fifo:in_endofpacket
	wire          dds0_pm_modphasestep_s1_agent_rsp_fifo_out_valid;                                      // DDS0_PM_ModPhaseStep_s1_agent_rsp_fifo:out_valid -> DDS0_PM_ModPhaseStep_s1_agent:rf_sink_valid
	wire  [105:0] dds0_pm_modphasestep_s1_agent_rsp_fifo_out_data;                                       // DDS0_PM_ModPhaseStep_s1_agent_rsp_fifo:out_data -> DDS0_PM_ModPhaseStep_s1_agent:rf_sink_data
	wire          dds0_pm_modphasestep_s1_agent_rsp_fifo_out_ready;                                      // DDS0_PM_ModPhaseStep_s1_agent:rf_sink_ready -> DDS0_PM_ModPhaseStep_s1_agent_rsp_fifo:out_ready
	wire          dds0_pm_modphasestep_s1_agent_rsp_fifo_out_startofpacket;                              // DDS0_PM_ModPhaseStep_s1_agent_rsp_fifo:out_startofpacket -> DDS0_PM_ModPhaseStep_s1_agent:rf_sink_startofpacket
	wire          dds0_pm_modphasestep_s1_agent_rsp_fifo_out_endofpacket;                                // DDS0_PM_ModPhaseStep_s1_agent_rsp_fifo:out_endofpacket -> DDS0_PM_ModPhaseStep_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                                 // cmd_mux_015:src_valid -> DDS0_PM_ModPhaseStep_s1_agent:cp_valid
	wire  [104:0] cmd_mux_015_src_data;                                                                  // cmd_mux_015:src_data -> DDS0_PM_ModPhaseStep_s1_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                                 // DDS0_PM_ModPhaseStep_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [46:0] cmd_mux_015_src_channel;                                                               // cmd_mux_015:src_channel -> DDS0_PM_ModPhaseStep_s1_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                         // cmd_mux_015:src_startofpacket -> DDS0_PM_ModPhaseStep_s1_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                           // cmd_mux_015:src_endofpacket -> DDS0_PM_ModPhaseStep_s1_agent:cp_endofpacket
	wire   [31:0] dds1_pm_modphasestep_s1_agent_m0_readdata;                                             // DDS1_PM_ModPhaseStep_s1_translator:uav_readdata -> DDS1_PM_ModPhaseStep_s1_agent:m0_readdata
	wire          dds1_pm_modphasestep_s1_agent_m0_waitrequest;                                          // DDS1_PM_ModPhaseStep_s1_translator:uav_waitrequest -> DDS1_PM_ModPhaseStep_s1_agent:m0_waitrequest
	wire          dds1_pm_modphasestep_s1_agent_m0_debugaccess;                                          // DDS1_PM_ModPhaseStep_s1_agent:m0_debugaccess -> DDS1_PM_ModPhaseStep_s1_translator:uav_debugaccess
	wire   [19:0] dds1_pm_modphasestep_s1_agent_m0_address;                                              // DDS1_PM_ModPhaseStep_s1_agent:m0_address -> DDS1_PM_ModPhaseStep_s1_translator:uav_address
	wire    [3:0] dds1_pm_modphasestep_s1_agent_m0_byteenable;                                           // DDS1_PM_ModPhaseStep_s1_agent:m0_byteenable -> DDS1_PM_ModPhaseStep_s1_translator:uav_byteenable
	wire          dds1_pm_modphasestep_s1_agent_m0_read;                                                 // DDS1_PM_ModPhaseStep_s1_agent:m0_read -> DDS1_PM_ModPhaseStep_s1_translator:uav_read
	wire          dds1_pm_modphasestep_s1_agent_m0_readdatavalid;                                        // DDS1_PM_ModPhaseStep_s1_translator:uav_readdatavalid -> DDS1_PM_ModPhaseStep_s1_agent:m0_readdatavalid
	wire          dds1_pm_modphasestep_s1_agent_m0_lock;                                                 // DDS1_PM_ModPhaseStep_s1_agent:m0_lock -> DDS1_PM_ModPhaseStep_s1_translator:uav_lock
	wire   [31:0] dds1_pm_modphasestep_s1_agent_m0_writedata;                                            // DDS1_PM_ModPhaseStep_s1_agent:m0_writedata -> DDS1_PM_ModPhaseStep_s1_translator:uav_writedata
	wire          dds1_pm_modphasestep_s1_agent_m0_write;                                                // DDS1_PM_ModPhaseStep_s1_agent:m0_write -> DDS1_PM_ModPhaseStep_s1_translator:uav_write
	wire    [2:0] dds1_pm_modphasestep_s1_agent_m0_burstcount;                                           // DDS1_PM_ModPhaseStep_s1_agent:m0_burstcount -> DDS1_PM_ModPhaseStep_s1_translator:uav_burstcount
	wire          dds1_pm_modphasestep_s1_agent_rf_source_valid;                                         // DDS1_PM_ModPhaseStep_s1_agent:rf_source_valid -> DDS1_PM_ModPhaseStep_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds1_pm_modphasestep_s1_agent_rf_source_data;                                          // DDS1_PM_ModPhaseStep_s1_agent:rf_source_data -> DDS1_PM_ModPhaseStep_s1_agent_rsp_fifo:in_data
	wire          dds1_pm_modphasestep_s1_agent_rf_source_ready;                                         // DDS1_PM_ModPhaseStep_s1_agent_rsp_fifo:in_ready -> DDS1_PM_ModPhaseStep_s1_agent:rf_source_ready
	wire          dds1_pm_modphasestep_s1_agent_rf_source_startofpacket;                                 // DDS1_PM_ModPhaseStep_s1_agent:rf_source_startofpacket -> DDS1_PM_ModPhaseStep_s1_agent_rsp_fifo:in_startofpacket
	wire          dds1_pm_modphasestep_s1_agent_rf_source_endofpacket;                                   // DDS1_PM_ModPhaseStep_s1_agent:rf_source_endofpacket -> DDS1_PM_ModPhaseStep_s1_agent_rsp_fifo:in_endofpacket
	wire          dds1_pm_modphasestep_s1_agent_rsp_fifo_out_valid;                                      // DDS1_PM_ModPhaseStep_s1_agent_rsp_fifo:out_valid -> DDS1_PM_ModPhaseStep_s1_agent:rf_sink_valid
	wire  [105:0] dds1_pm_modphasestep_s1_agent_rsp_fifo_out_data;                                       // DDS1_PM_ModPhaseStep_s1_agent_rsp_fifo:out_data -> DDS1_PM_ModPhaseStep_s1_agent:rf_sink_data
	wire          dds1_pm_modphasestep_s1_agent_rsp_fifo_out_ready;                                      // DDS1_PM_ModPhaseStep_s1_agent:rf_sink_ready -> DDS1_PM_ModPhaseStep_s1_agent_rsp_fifo:out_ready
	wire          dds1_pm_modphasestep_s1_agent_rsp_fifo_out_startofpacket;                              // DDS1_PM_ModPhaseStep_s1_agent_rsp_fifo:out_startofpacket -> DDS1_PM_ModPhaseStep_s1_agent:rf_sink_startofpacket
	wire          dds1_pm_modphasestep_s1_agent_rsp_fifo_out_endofpacket;                                // DDS1_PM_ModPhaseStep_s1_agent_rsp_fifo:out_endofpacket -> DDS1_PM_ModPhaseStep_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_016_src_valid;                                                                 // cmd_mux_016:src_valid -> DDS1_PM_ModPhaseStep_s1_agent:cp_valid
	wire  [104:0] cmd_mux_016_src_data;                                                                  // cmd_mux_016:src_data -> DDS1_PM_ModPhaseStep_s1_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                                 // DDS1_PM_ModPhaseStep_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [46:0] cmd_mux_016_src_channel;                                                               // cmd_mux_016:src_channel -> DDS1_PM_ModPhaseStep_s1_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                         // cmd_mux_016:src_startofpacket -> DDS1_PM_ModPhaseStep_s1_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                           // cmd_mux_016:src_endofpacket -> DDS1_PM_ModPhaseStep_s1_agent:cp_endofpacket
	wire   [31:0] dds0_pwm_amplitude_s1_agent_m0_readdata;                                               // DDS0_PWM_Amplitude_s1_translator:uav_readdata -> DDS0_PWM_Amplitude_s1_agent:m0_readdata
	wire          dds0_pwm_amplitude_s1_agent_m0_waitrequest;                                            // DDS0_PWM_Amplitude_s1_translator:uav_waitrequest -> DDS0_PWM_Amplitude_s1_agent:m0_waitrequest
	wire          dds0_pwm_amplitude_s1_agent_m0_debugaccess;                                            // DDS0_PWM_Amplitude_s1_agent:m0_debugaccess -> DDS0_PWM_Amplitude_s1_translator:uav_debugaccess
	wire   [19:0] dds0_pwm_amplitude_s1_agent_m0_address;                                                // DDS0_PWM_Amplitude_s1_agent:m0_address -> DDS0_PWM_Amplitude_s1_translator:uav_address
	wire    [3:0] dds0_pwm_amplitude_s1_agent_m0_byteenable;                                             // DDS0_PWM_Amplitude_s1_agent:m0_byteenable -> DDS0_PWM_Amplitude_s1_translator:uav_byteenable
	wire          dds0_pwm_amplitude_s1_agent_m0_read;                                                   // DDS0_PWM_Amplitude_s1_agent:m0_read -> DDS0_PWM_Amplitude_s1_translator:uav_read
	wire          dds0_pwm_amplitude_s1_agent_m0_readdatavalid;                                          // DDS0_PWM_Amplitude_s1_translator:uav_readdatavalid -> DDS0_PWM_Amplitude_s1_agent:m0_readdatavalid
	wire          dds0_pwm_amplitude_s1_agent_m0_lock;                                                   // DDS0_PWM_Amplitude_s1_agent:m0_lock -> DDS0_PWM_Amplitude_s1_translator:uav_lock
	wire   [31:0] dds0_pwm_amplitude_s1_agent_m0_writedata;                                              // DDS0_PWM_Amplitude_s1_agent:m0_writedata -> DDS0_PWM_Amplitude_s1_translator:uav_writedata
	wire          dds0_pwm_amplitude_s1_agent_m0_write;                                                  // DDS0_PWM_Amplitude_s1_agent:m0_write -> DDS0_PWM_Amplitude_s1_translator:uav_write
	wire    [2:0] dds0_pwm_amplitude_s1_agent_m0_burstcount;                                             // DDS0_PWM_Amplitude_s1_agent:m0_burstcount -> DDS0_PWM_Amplitude_s1_translator:uav_burstcount
	wire          dds0_pwm_amplitude_s1_agent_rf_source_valid;                                           // DDS0_PWM_Amplitude_s1_agent:rf_source_valid -> DDS0_PWM_Amplitude_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds0_pwm_amplitude_s1_agent_rf_source_data;                                            // DDS0_PWM_Amplitude_s1_agent:rf_source_data -> DDS0_PWM_Amplitude_s1_agent_rsp_fifo:in_data
	wire          dds0_pwm_amplitude_s1_agent_rf_source_ready;                                           // DDS0_PWM_Amplitude_s1_agent_rsp_fifo:in_ready -> DDS0_PWM_Amplitude_s1_agent:rf_source_ready
	wire          dds0_pwm_amplitude_s1_agent_rf_source_startofpacket;                                   // DDS0_PWM_Amplitude_s1_agent:rf_source_startofpacket -> DDS0_PWM_Amplitude_s1_agent_rsp_fifo:in_startofpacket
	wire          dds0_pwm_amplitude_s1_agent_rf_source_endofpacket;                                     // DDS0_PWM_Amplitude_s1_agent:rf_source_endofpacket -> DDS0_PWM_Amplitude_s1_agent_rsp_fifo:in_endofpacket
	wire          dds0_pwm_amplitude_s1_agent_rsp_fifo_out_valid;                                        // DDS0_PWM_Amplitude_s1_agent_rsp_fifo:out_valid -> DDS0_PWM_Amplitude_s1_agent:rf_sink_valid
	wire  [105:0] dds0_pwm_amplitude_s1_agent_rsp_fifo_out_data;                                         // DDS0_PWM_Amplitude_s1_agent_rsp_fifo:out_data -> DDS0_PWM_Amplitude_s1_agent:rf_sink_data
	wire          dds0_pwm_amplitude_s1_agent_rsp_fifo_out_ready;                                        // DDS0_PWM_Amplitude_s1_agent:rf_sink_ready -> DDS0_PWM_Amplitude_s1_agent_rsp_fifo:out_ready
	wire          dds0_pwm_amplitude_s1_agent_rsp_fifo_out_startofpacket;                                // DDS0_PWM_Amplitude_s1_agent_rsp_fifo:out_startofpacket -> DDS0_PWM_Amplitude_s1_agent:rf_sink_startofpacket
	wire          dds0_pwm_amplitude_s1_agent_rsp_fifo_out_endofpacket;                                  // DDS0_PWM_Amplitude_s1_agent_rsp_fifo:out_endofpacket -> DDS0_PWM_Amplitude_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_017_src_valid;                                                                 // cmd_mux_017:src_valid -> DDS0_PWM_Amplitude_s1_agent:cp_valid
	wire  [104:0] cmd_mux_017_src_data;                                                                  // cmd_mux_017:src_data -> DDS0_PWM_Amplitude_s1_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                                 // DDS0_PWM_Amplitude_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [46:0] cmd_mux_017_src_channel;                                                               // cmd_mux_017:src_channel -> DDS0_PWM_Amplitude_s1_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                         // cmd_mux_017:src_startofpacket -> DDS0_PWM_Amplitude_s1_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                           // cmd_mux_017:src_endofpacket -> DDS0_PWM_Amplitude_s1_agent:cp_endofpacket
	wire   [31:0] dds1_pwm_amplitude_s1_agent_m0_readdata;                                               // DDS1_PWM_Amplitude_s1_translator:uav_readdata -> DDS1_PWM_Amplitude_s1_agent:m0_readdata
	wire          dds1_pwm_amplitude_s1_agent_m0_waitrequest;                                            // DDS1_PWM_Amplitude_s1_translator:uav_waitrequest -> DDS1_PWM_Amplitude_s1_agent:m0_waitrequest
	wire          dds1_pwm_amplitude_s1_agent_m0_debugaccess;                                            // DDS1_PWM_Amplitude_s1_agent:m0_debugaccess -> DDS1_PWM_Amplitude_s1_translator:uav_debugaccess
	wire   [19:0] dds1_pwm_amplitude_s1_agent_m0_address;                                                // DDS1_PWM_Amplitude_s1_agent:m0_address -> DDS1_PWM_Amplitude_s1_translator:uav_address
	wire    [3:0] dds1_pwm_amplitude_s1_agent_m0_byteenable;                                             // DDS1_PWM_Amplitude_s1_agent:m0_byteenable -> DDS1_PWM_Amplitude_s1_translator:uav_byteenable
	wire          dds1_pwm_amplitude_s1_agent_m0_read;                                                   // DDS1_PWM_Amplitude_s1_agent:m0_read -> DDS1_PWM_Amplitude_s1_translator:uav_read
	wire          dds1_pwm_amplitude_s1_agent_m0_readdatavalid;                                          // DDS1_PWM_Amplitude_s1_translator:uav_readdatavalid -> DDS1_PWM_Amplitude_s1_agent:m0_readdatavalid
	wire          dds1_pwm_amplitude_s1_agent_m0_lock;                                                   // DDS1_PWM_Amplitude_s1_agent:m0_lock -> DDS1_PWM_Amplitude_s1_translator:uav_lock
	wire   [31:0] dds1_pwm_amplitude_s1_agent_m0_writedata;                                              // DDS1_PWM_Amplitude_s1_agent:m0_writedata -> DDS1_PWM_Amplitude_s1_translator:uav_writedata
	wire          dds1_pwm_amplitude_s1_agent_m0_write;                                                  // DDS1_PWM_Amplitude_s1_agent:m0_write -> DDS1_PWM_Amplitude_s1_translator:uav_write
	wire    [2:0] dds1_pwm_amplitude_s1_agent_m0_burstcount;                                             // DDS1_PWM_Amplitude_s1_agent:m0_burstcount -> DDS1_PWM_Amplitude_s1_translator:uav_burstcount
	wire          dds1_pwm_amplitude_s1_agent_rf_source_valid;                                           // DDS1_PWM_Amplitude_s1_agent:rf_source_valid -> DDS1_PWM_Amplitude_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds1_pwm_amplitude_s1_agent_rf_source_data;                                            // DDS1_PWM_Amplitude_s1_agent:rf_source_data -> DDS1_PWM_Amplitude_s1_agent_rsp_fifo:in_data
	wire          dds1_pwm_amplitude_s1_agent_rf_source_ready;                                           // DDS1_PWM_Amplitude_s1_agent_rsp_fifo:in_ready -> DDS1_PWM_Amplitude_s1_agent:rf_source_ready
	wire          dds1_pwm_amplitude_s1_agent_rf_source_startofpacket;                                   // DDS1_PWM_Amplitude_s1_agent:rf_source_startofpacket -> DDS1_PWM_Amplitude_s1_agent_rsp_fifo:in_startofpacket
	wire          dds1_pwm_amplitude_s1_agent_rf_source_endofpacket;                                     // DDS1_PWM_Amplitude_s1_agent:rf_source_endofpacket -> DDS1_PWM_Amplitude_s1_agent_rsp_fifo:in_endofpacket
	wire          dds1_pwm_amplitude_s1_agent_rsp_fifo_out_valid;                                        // DDS1_PWM_Amplitude_s1_agent_rsp_fifo:out_valid -> DDS1_PWM_Amplitude_s1_agent:rf_sink_valid
	wire  [105:0] dds1_pwm_amplitude_s1_agent_rsp_fifo_out_data;                                         // DDS1_PWM_Amplitude_s1_agent_rsp_fifo:out_data -> DDS1_PWM_Amplitude_s1_agent:rf_sink_data
	wire          dds1_pwm_amplitude_s1_agent_rsp_fifo_out_ready;                                        // DDS1_PWM_Amplitude_s1_agent:rf_sink_ready -> DDS1_PWM_Amplitude_s1_agent_rsp_fifo:out_ready
	wire          dds1_pwm_amplitude_s1_agent_rsp_fifo_out_startofpacket;                                // DDS1_PWM_Amplitude_s1_agent_rsp_fifo:out_startofpacket -> DDS1_PWM_Amplitude_s1_agent:rf_sink_startofpacket
	wire          dds1_pwm_amplitude_s1_agent_rsp_fifo_out_endofpacket;                                  // DDS1_PWM_Amplitude_s1_agent_rsp_fifo:out_endofpacket -> DDS1_PWM_Amplitude_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_018_src_valid;                                                                 // cmd_mux_018:src_valid -> DDS1_PWM_Amplitude_s1_agent:cp_valid
	wire  [104:0] cmd_mux_018_src_data;                                                                  // cmd_mux_018:src_data -> DDS1_PWM_Amplitude_s1_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                                 // DDS1_PWM_Amplitude_s1_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [46:0] cmd_mux_018_src_channel;                                                               // cmd_mux_018:src_channel -> DDS1_PWM_Amplitude_s1_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                         // cmd_mux_018:src_startofpacket -> DDS1_PWM_Amplitude_s1_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                           // cmd_mux_018:src_endofpacket -> DDS1_PWM_Amplitude_s1_agent:cp_endofpacket
	wire   [31:0] dds0_pwm_offset_s1_agent_m0_readdata;                                                  // DDS0_PWM_Offset_s1_translator:uav_readdata -> DDS0_PWM_Offset_s1_agent:m0_readdata
	wire          dds0_pwm_offset_s1_agent_m0_waitrequest;                                               // DDS0_PWM_Offset_s1_translator:uav_waitrequest -> DDS0_PWM_Offset_s1_agent:m0_waitrequest
	wire          dds0_pwm_offset_s1_agent_m0_debugaccess;                                               // DDS0_PWM_Offset_s1_agent:m0_debugaccess -> DDS0_PWM_Offset_s1_translator:uav_debugaccess
	wire   [19:0] dds0_pwm_offset_s1_agent_m0_address;                                                   // DDS0_PWM_Offset_s1_agent:m0_address -> DDS0_PWM_Offset_s1_translator:uav_address
	wire    [3:0] dds0_pwm_offset_s1_agent_m0_byteenable;                                                // DDS0_PWM_Offset_s1_agent:m0_byteenable -> DDS0_PWM_Offset_s1_translator:uav_byteenable
	wire          dds0_pwm_offset_s1_agent_m0_read;                                                      // DDS0_PWM_Offset_s1_agent:m0_read -> DDS0_PWM_Offset_s1_translator:uav_read
	wire          dds0_pwm_offset_s1_agent_m0_readdatavalid;                                             // DDS0_PWM_Offset_s1_translator:uav_readdatavalid -> DDS0_PWM_Offset_s1_agent:m0_readdatavalid
	wire          dds0_pwm_offset_s1_agent_m0_lock;                                                      // DDS0_PWM_Offset_s1_agent:m0_lock -> DDS0_PWM_Offset_s1_translator:uav_lock
	wire   [31:0] dds0_pwm_offset_s1_agent_m0_writedata;                                                 // DDS0_PWM_Offset_s1_agent:m0_writedata -> DDS0_PWM_Offset_s1_translator:uav_writedata
	wire          dds0_pwm_offset_s1_agent_m0_write;                                                     // DDS0_PWM_Offset_s1_agent:m0_write -> DDS0_PWM_Offset_s1_translator:uav_write
	wire    [2:0] dds0_pwm_offset_s1_agent_m0_burstcount;                                                // DDS0_PWM_Offset_s1_agent:m0_burstcount -> DDS0_PWM_Offset_s1_translator:uav_burstcount
	wire          dds0_pwm_offset_s1_agent_rf_source_valid;                                              // DDS0_PWM_Offset_s1_agent:rf_source_valid -> DDS0_PWM_Offset_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds0_pwm_offset_s1_agent_rf_source_data;                                               // DDS0_PWM_Offset_s1_agent:rf_source_data -> DDS0_PWM_Offset_s1_agent_rsp_fifo:in_data
	wire          dds0_pwm_offset_s1_agent_rf_source_ready;                                              // DDS0_PWM_Offset_s1_agent_rsp_fifo:in_ready -> DDS0_PWM_Offset_s1_agent:rf_source_ready
	wire          dds0_pwm_offset_s1_agent_rf_source_startofpacket;                                      // DDS0_PWM_Offset_s1_agent:rf_source_startofpacket -> DDS0_PWM_Offset_s1_agent_rsp_fifo:in_startofpacket
	wire          dds0_pwm_offset_s1_agent_rf_source_endofpacket;                                        // DDS0_PWM_Offset_s1_agent:rf_source_endofpacket -> DDS0_PWM_Offset_s1_agent_rsp_fifo:in_endofpacket
	wire          dds0_pwm_offset_s1_agent_rsp_fifo_out_valid;                                           // DDS0_PWM_Offset_s1_agent_rsp_fifo:out_valid -> DDS0_PWM_Offset_s1_agent:rf_sink_valid
	wire  [105:0] dds0_pwm_offset_s1_agent_rsp_fifo_out_data;                                            // DDS0_PWM_Offset_s1_agent_rsp_fifo:out_data -> DDS0_PWM_Offset_s1_agent:rf_sink_data
	wire          dds0_pwm_offset_s1_agent_rsp_fifo_out_ready;                                           // DDS0_PWM_Offset_s1_agent:rf_sink_ready -> DDS0_PWM_Offset_s1_agent_rsp_fifo:out_ready
	wire          dds0_pwm_offset_s1_agent_rsp_fifo_out_startofpacket;                                   // DDS0_PWM_Offset_s1_agent_rsp_fifo:out_startofpacket -> DDS0_PWM_Offset_s1_agent:rf_sink_startofpacket
	wire          dds0_pwm_offset_s1_agent_rsp_fifo_out_endofpacket;                                     // DDS0_PWM_Offset_s1_agent_rsp_fifo:out_endofpacket -> DDS0_PWM_Offset_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_019_src_valid;                                                                 // cmd_mux_019:src_valid -> DDS0_PWM_Offset_s1_agent:cp_valid
	wire  [104:0] cmd_mux_019_src_data;                                                                  // cmd_mux_019:src_data -> DDS0_PWM_Offset_s1_agent:cp_data
	wire          cmd_mux_019_src_ready;                                                                 // DDS0_PWM_Offset_s1_agent:cp_ready -> cmd_mux_019:src_ready
	wire   [46:0] cmd_mux_019_src_channel;                                                               // cmd_mux_019:src_channel -> DDS0_PWM_Offset_s1_agent:cp_channel
	wire          cmd_mux_019_src_startofpacket;                                                         // cmd_mux_019:src_startofpacket -> DDS0_PWM_Offset_s1_agent:cp_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                           // cmd_mux_019:src_endofpacket -> DDS0_PWM_Offset_s1_agent:cp_endofpacket
	wire   [31:0] dds1_pwm_offset_s1_agent_m0_readdata;                                                  // DDS1_PWM_Offset_s1_translator:uav_readdata -> DDS1_PWM_Offset_s1_agent:m0_readdata
	wire          dds1_pwm_offset_s1_agent_m0_waitrequest;                                               // DDS1_PWM_Offset_s1_translator:uav_waitrequest -> DDS1_PWM_Offset_s1_agent:m0_waitrequest
	wire          dds1_pwm_offset_s1_agent_m0_debugaccess;                                               // DDS1_PWM_Offset_s1_agent:m0_debugaccess -> DDS1_PWM_Offset_s1_translator:uav_debugaccess
	wire   [19:0] dds1_pwm_offset_s1_agent_m0_address;                                                   // DDS1_PWM_Offset_s1_agent:m0_address -> DDS1_PWM_Offset_s1_translator:uav_address
	wire    [3:0] dds1_pwm_offset_s1_agent_m0_byteenable;                                                // DDS1_PWM_Offset_s1_agent:m0_byteenable -> DDS1_PWM_Offset_s1_translator:uav_byteenable
	wire          dds1_pwm_offset_s1_agent_m0_read;                                                      // DDS1_PWM_Offset_s1_agent:m0_read -> DDS1_PWM_Offset_s1_translator:uav_read
	wire          dds1_pwm_offset_s1_agent_m0_readdatavalid;                                             // DDS1_PWM_Offset_s1_translator:uav_readdatavalid -> DDS1_PWM_Offset_s1_agent:m0_readdatavalid
	wire          dds1_pwm_offset_s1_agent_m0_lock;                                                      // DDS1_PWM_Offset_s1_agent:m0_lock -> DDS1_PWM_Offset_s1_translator:uav_lock
	wire   [31:0] dds1_pwm_offset_s1_agent_m0_writedata;                                                 // DDS1_PWM_Offset_s1_agent:m0_writedata -> DDS1_PWM_Offset_s1_translator:uav_writedata
	wire          dds1_pwm_offset_s1_agent_m0_write;                                                     // DDS1_PWM_Offset_s1_agent:m0_write -> DDS1_PWM_Offset_s1_translator:uav_write
	wire    [2:0] dds1_pwm_offset_s1_agent_m0_burstcount;                                                // DDS1_PWM_Offset_s1_agent:m0_burstcount -> DDS1_PWM_Offset_s1_translator:uav_burstcount
	wire          dds1_pwm_offset_s1_agent_rf_source_valid;                                              // DDS1_PWM_Offset_s1_agent:rf_source_valid -> DDS1_PWM_Offset_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds1_pwm_offset_s1_agent_rf_source_data;                                               // DDS1_PWM_Offset_s1_agent:rf_source_data -> DDS1_PWM_Offset_s1_agent_rsp_fifo:in_data
	wire          dds1_pwm_offset_s1_agent_rf_source_ready;                                              // DDS1_PWM_Offset_s1_agent_rsp_fifo:in_ready -> DDS1_PWM_Offset_s1_agent:rf_source_ready
	wire          dds1_pwm_offset_s1_agent_rf_source_startofpacket;                                      // DDS1_PWM_Offset_s1_agent:rf_source_startofpacket -> DDS1_PWM_Offset_s1_agent_rsp_fifo:in_startofpacket
	wire          dds1_pwm_offset_s1_agent_rf_source_endofpacket;                                        // DDS1_PWM_Offset_s1_agent:rf_source_endofpacket -> DDS1_PWM_Offset_s1_agent_rsp_fifo:in_endofpacket
	wire          dds1_pwm_offset_s1_agent_rsp_fifo_out_valid;                                           // DDS1_PWM_Offset_s1_agent_rsp_fifo:out_valid -> DDS1_PWM_Offset_s1_agent:rf_sink_valid
	wire  [105:0] dds1_pwm_offset_s1_agent_rsp_fifo_out_data;                                            // DDS1_PWM_Offset_s1_agent_rsp_fifo:out_data -> DDS1_PWM_Offset_s1_agent:rf_sink_data
	wire          dds1_pwm_offset_s1_agent_rsp_fifo_out_ready;                                           // DDS1_PWM_Offset_s1_agent:rf_sink_ready -> DDS1_PWM_Offset_s1_agent_rsp_fifo:out_ready
	wire          dds1_pwm_offset_s1_agent_rsp_fifo_out_startofpacket;                                   // DDS1_PWM_Offset_s1_agent_rsp_fifo:out_startofpacket -> DDS1_PWM_Offset_s1_agent:rf_sink_startofpacket
	wire          dds1_pwm_offset_s1_agent_rsp_fifo_out_endofpacket;                                     // DDS1_PWM_Offset_s1_agent_rsp_fifo:out_endofpacket -> DDS1_PWM_Offset_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_020_src_valid;                                                                 // cmd_mux_020:src_valid -> DDS1_PWM_Offset_s1_agent:cp_valid
	wire  [104:0] cmd_mux_020_src_data;                                                                  // cmd_mux_020:src_data -> DDS1_PWM_Offset_s1_agent:cp_data
	wire          cmd_mux_020_src_ready;                                                                 // DDS1_PWM_Offset_s1_agent:cp_ready -> cmd_mux_020:src_ready
	wire   [46:0] cmd_mux_020_src_channel;                                                               // cmd_mux_020:src_channel -> DDS1_PWM_Offset_s1_agent:cp_channel
	wire          cmd_mux_020_src_startofpacket;                                                         // cmd_mux_020:src_startofpacket -> DDS1_PWM_Offset_s1_agent:cp_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                           // cmd_mux_020:src_endofpacket -> DDS1_PWM_Offset_s1_agent:cp_endofpacket
	wire   [31:0] dds0_phaseoffset_s1_agent_m0_readdata;                                                 // DDS0_PhaseOffset_s1_translator:uav_readdata -> DDS0_PhaseOffset_s1_agent:m0_readdata
	wire          dds0_phaseoffset_s1_agent_m0_waitrequest;                                              // DDS0_PhaseOffset_s1_translator:uav_waitrequest -> DDS0_PhaseOffset_s1_agent:m0_waitrequest
	wire          dds0_phaseoffset_s1_agent_m0_debugaccess;                                              // DDS0_PhaseOffset_s1_agent:m0_debugaccess -> DDS0_PhaseOffset_s1_translator:uav_debugaccess
	wire   [19:0] dds0_phaseoffset_s1_agent_m0_address;                                                  // DDS0_PhaseOffset_s1_agent:m0_address -> DDS0_PhaseOffset_s1_translator:uav_address
	wire    [3:0] dds0_phaseoffset_s1_agent_m0_byteenable;                                               // DDS0_PhaseOffset_s1_agent:m0_byteenable -> DDS0_PhaseOffset_s1_translator:uav_byteenable
	wire          dds0_phaseoffset_s1_agent_m0_read;                                                     // DDS0_PhaseOffset_s1_agent:m0_read -> DDS0_PhaseOffset_s1_translator:uav_read
	wire          dds0_phaseoffset_s1_agent_m0_readdatavalid;                                            // DDS0_PhaseOffset_s1_translator:uav_readdatavalid -> DDS0_PhaseOffset_s1_agent:m0_readdatavalid
	wire          dds0_phaseoffset_s1_agent_m0_lock;                                                     // DDS0_PhaseOffset_s1_agent:m0_lock -> DDS0_PhaseOffset_s1_translator:uav_lock
	wire   [31:0] dds0_phaseoffset_s1_agent_m0_writedata;                                                // DDS0_PhaseOffset_s1_agent:m0_writedata -> DDS0_PhaseOffset_s1_translator:uav_writedata
	wire          dds0_phaseoffset_s1_agent_m0_write;                                                    // DDS0_PhaseOffset_s1_agent:m0_write -> DDS0_PhaseOffset_s1_translator:uav_write
	wire    [2:0] dds0_phaseoffset_s1_agent_m0_burstcount;                                               // DDS0_PhaseOffset_s1_agent:m0_burstcount -> DDS0_PhaseOffset_s1_translator:uav_burstcount
	wire          dds0_phaseoffset_s1_agent_rf_source_valid;                                             // DDS0_PhaseOffset_s1_agent:rf_source_valid -> DDS0_PhaseOffset_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds0_phaseoffset_s1_agent_rf_source_data;                                              // DDS0_PhaseOffset_s1_agent:rf_source_data -> DDS0_PhaseOffset_s1_agent_rsp_fifo:in_data
	wire          dds0_phaseoffset_s1_agent_rf_source_ready;                                             // DDS0_PhaseOffset_s1_agent_rsp_fifo:in_ready -> DDS0_PhaseOffset_s1_agent:rf_source_ready
	wire          dds0_phaseoffset_s1_agent_rf_source_startofpacket;                                     // DDS0_PhaseOffset_s1_agent:rf_source_startofpacket -> DDS0_PhaseOffset_s1_agent_rsp_fifo:in_startofpacket
	wire          dds0_phaseoffset_s1_agent_rf_source_endofpacket;                                       // DDS0_PhaseOffset_s1_agent:rf_source_endofpacket -> DDS0_PhaseOffset_s1_agent_rsp_fifo:in_endofpacket
	wire          dds0_phaseoffset_s1_agent_rsp_fifo_out_valid;                                          // DDS0_PhaseOffset_s1_agent_rsp_fifo:out_valid -> DDS0_PhaseOffset_s1_agent:rf_sink_valid
	wire  [105:0] dds0_phaseoffset_s1_agent_rsp_fifo_out_data;                                           // DDS0_PhaseOffset_s1_agent_rsp_fifo:out_data -> DDS0_PhaseOffset_s1_agent:rf_sink_data
	wire          dds0_phaseoffset_s1_agent_rsp_fifo_out_ready;                                          // DDS0_PhaseOffset_s1_agent:rf_sink_ready -> DDS0_PhaseOffset_s1_agent_rsp_fifo:out_ready
	wire          dds0_phaseoffset_s1_agent_rsp_fifo_out_startofpacket;                                  // DDS0_PhaseOffset_s1_agent_rsp_fifo:out_startofpacket -> DDS0_PhaseOffset_s1_agent:rf_sink_startofpacket
	wire          dds0_phaseoffset_s1_agent_rsp_fifo_out_endofpacket;                                    // DDS0_PhaseOffset_s1_agent_rsp_fifo:out_endofpacket -> DDS0_PhaseOffset_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_021_src_valid;                                                                 // cmd_mux_021:src_valid -> DDS0_PhaseOffset_s1_agent:cp_valid
	wire  [104:0] cmd_mux_021_src_data;                                                                  // cmd_mux_021:src_data -> DDS0_PhaseOffset_s1_agent:cp_data
	wire          cmd_mux_021_src_ready;                                                                 // DDS0_PhaseOffset_s1_agent:cp_ready -> cmd_mux_021:src_ready
	wire   [46:0] cmd_mux_021_src_channel;                                                               // cmd_mux_021:src_channel -> DDS0_PhaseOffset_s1_agent:cp_channel
	wire          cmd_mux_021_src_startofpacket;                                                         // cmd_mux_021:src_startofpacket -> DDS0_PhaseOffset_s1_agent:cp_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                           // cmd_mux_021:src_endofpacket -> DDS0_PhaseOffset_s1_agent:cp_endofpacket
	wire   [31:0] dds1_phaseoffset_s1_agent_m0_readdata;                                                 // DDS1_PhaseOffset_s1_translator:uav_readdata -> DDS1_PhaseOffset_s1_agent:m0_readdata
	wire          dds1_phaseoffset_s1_agent_m0_waitrequest;                                              // DDS1_PhaseOffset_s1_translator:uav_waitrequest -> DDS1_PhaseOffset_s1_agent:m0_waitrequest
	wire          dds1_phaseoffset_s1_agent_m0_debugaccess;                                              // DDS1_PhaseOffset_s1_agent:m0_debugaccess -> DDS1_PhaseOffset_s1_translator:uav_debugaccess
	wire   [19:0] dds1_phaseoffset_s1_agent_m0_address;                                                  // DDS1_PhaseOffset_s1_agent:m0_address -> DDS1_PhaseOffset_s1_translator:uav_address
	wire    [3:0] dds1_phaseoffset_s1_agent_m0_byteenable;                                               // DDS1_PhaseOffset_s1_agent:m0_byteenable -> DDS1_PhaseOffset_s1_translator:uav_byteenable
	wire          dds1_phaseoffset_s1_agent_m0_read;                                                     // DDS1_PhaseOffset_s1_agent:m0_read -> DDS1_PhaseOffset_s1_translator:uav_read
	wire          dds1_phaseoffset_s1_agent_m0_readdatavalid;                                            // DDS1_PhaseOffset_s1_translator:uav_readdatavalid -> DDS1_PhaseOffset_s1_agent:m0_readdatavalid
	wire          dds1_phaseoffset_s1_agent_m0_lock;                                                     // DDS1_PhaseOffset_s1_agent:m0_lock -> DDS1_PhaseOffset_s1_translator:uav_lock
	wire   [31:0] dds1_phaseoffset_s1_agent_m0_writedata;                                                // DDS1_PhaseOffset_s1_agent:m0_writedata -> DDS1_PhaseOffset_s1_translator:uav_writedata
	wire          dds1_phaseoffset_s1_agent_m0_write;                                                    // DDS1_PhaseOffset_s1_agent:m0_write -> DDS1_PhaseOffset_s1_translator:uav_write
	wire    [2:0] dds1_phaseoffset_s1_agent_m0_burstcount;                                               // DDS1_PhaseOffset_s1_agent:m0_burstcount -> DDS1_PhaseOffset_s1_translator:uav_burstcount
	wire          dds1_phaseoffset_s1_agent_rf_source_valid;                                             // DDS1_PhaseOffset_s1_agent:rf_source_valid -> DDS1_PhaseOffset_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds1_phaseoffset_s1_agent_rf_source_data;                                              // DDS1_PhaseOffset_s1_agent:rf_source_data -> DDS1_PhaseOffset_s1_agent_rsp_fifo:in_data
	wire          dds1_phaseoffset_s1_agent_rf_source_ready;                                             // DDS1_PhaseOffset_s1_agent_rsp_fifo:in_ready -> DDS1_PhaseOffset_s1_agent:rf_source_ready
	wire          dds1_phaseoffset_s1_agent_rf_source_startofpacket;                                     // DDS1_PhaseOffset_s1_agent:rf_source_startofpacket -> DDS1_PhaseOffset_s1_agent_rsp_fifo:in_startofpacket
	wire          dds1_phaseoffset_s1_agent_rf_source_endofpacket;                                       // DDS1_PhaseOffset_s1_agent:rf_source_endofpacket -> DDS1_PhaseOffset_s1_agent_rsp_fifo:in_endofpacket
	wire          dds1_phaseoffset_s1_agent_rsp_fifo_out_valid;                                          // DDS1_PhaseOffset_s1_agent_rsp_fifo:out_valid -> DDS1_PhaseOffset_s1_agent:rf_sink_valid
	wire  [105:0] dds1_phaseoffset_s1_agent_rsp_fifo_out_data;                                           // DDS1_PhaseOffset_s1_agent_rsp_fifo:out_data -> DDS1_PhaseOffset_s1_agent:rf_sink_data
	wire          dds1_phaseoffset_s1_agent_rsp_fifo_out_ready;                                          // DDS1_PhaseOffset_s1_agent:rf_sink_ready -> DDS1_PhaseOffset_s1_agent_rsp_fifo:out_ready
	wire          dds1_phaseoffset_s1_agent_rsp_fifo_out_startofpacket;                                  // DDS1_PhaseOffset_s1_agent_rsp_fifo:out_startofpacket -> DDS1_PhaseOffset_s1_agent:rf_sink_startofpacket
	wire          dds1_phaseoffset_s1_agent_rsp_fifo_out_endofpacket;                                    // DDS1_PhaseOffset_s1_agent_rsp_fifo:out_endofpacket -> DDS1_PhaseOffset_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_022_src_valid;                                                                 // cmd_mux_022:src_valid -> DDS1_PhaseOffset_s1_agent:cp_valid
	wire  [104:0] cmd_mux_022_src_data;                                                                  // cmd_mux_022:src_data -> DDS1_PhaseOffset_s1_agent:cp_data
	wire          cmd_mux_022_src_ready;                                                                 // DDS1_PhaseOffset_s1_agent:cp_ready -> cmd_mux_022:src_ready
	wire   [46:0] cmd_mux_022_src_channel;                                                               // cmd_mux_022:src_channel -> DDS1_PhaseOffset_s1_agent:cp_channel
	wire          cmd_mux_022_src_startofpacket;                                                         // cmd_mux_022:src_startofpacket -> DDS1_PhaseOffset_s1_agent:cp_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                                           // cmd_mux_022:src_endofpacket -> DDS1_PhaseOffset_s1_agent:cp_endofpacket
	wire   [31:0] dds0_phasestep_s1_agent_m0_readdata;                                                   // DDS0_PhaseStep_s1_translator:uav_readdata -> DDS0_PhaseStep_s1_agent:m0_readdata
	wire          dds0_phasestep_s1_agent_m0_waitrequest;                                                // DDS0_PhaseStep_s1_translator:uav_waitrequest -> DDS0_PhaseStep_s1_agent:m0_waitrequest
	wire          dds0_phasestep_s1_agent_m0_debugaccess;                                                // DDS0_PhaseStep_s1_agent:m0_debugaccess -> DDS0_PhaseStep_s1_translator:uav_debugaccess
	wire   [19:0] dds0_phasestep_s1_agent_m0_address;                                                    // DDS0_PhaseStep_s1_agent:m0_address -> DDS0_PhaseStep_s1_translator:uav_address
	wire    [3:0] dds0_phasestep_s1_agent_m0_byteenable;                                                 // DDS0_PhaseStep_s1_agent:m0_byteenable -> DDS0_PhaseStep_s1_translator:uav_byteenable
	wire          dds0_phasestep_s1_agent_m0_read;                                                       // DDS0_PhaseStep_s1_agent:m0_read -> DDS0_PhaseStep_s1_translator:uav_read
	wire          dds0_phasestep_s1_agent_m0_readdatavalid;                                              // DDS0_PhaseStep_s1_translator:uav_readdatavalid -> DDS0_PhaseStep_s1_agent:m0_readdatavalid
	wire          dds0_phasestep_s1_agent_m0_lock;                                                       // DDS0_PhaseStep_s1_agent:m0_lock -> DDS0_PhaseStep_s1_translator:uav_lock
	wire   [31:0] dds0_phasestep_s1_agent_m0_writedata;                                                  // DDS0_PhaseStep_s1_agent:m0_writedata -> DDS0_PhaseStep_s1_translator:uav_writedata
	wire          dds0_phasestep_s1_agent_m0_write;                                                      // DDS0_PhaseStep_s1_agent:m0_write -> DDS0_PhaseStep_s1_translator:uav_write
	wire    [2:0] dds0_phasestep_s1_agent_m0_burstcount;                                                 // DDS0_PhaseStep_s1_agent:m0_burstcount -> DDS0_PhaseStep_s1_translator:uav_burstcount
	wire          dds0_phasestep_s1_agent_rf_source_valid;                                               // DDS0_PhaseStep_s1_agent:rf_source_valid -> DDS0_PhaseStep_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds0_phasestep_s1_agent_rf_source_data;                                                // DDS0_PhaseStep_s1_agent:rf_source_data -> DDS0_PhaseStep_s1_agent_rsp_fifo:in_data
	wire          dds0_phasestep_s1_agent_rf_source_ready;                                               // DDS0_PhaseStep_s1_agent_rsp_fifo:in_ready -> DDS0_PhaseStep_s1_agent:rf_source_ready
	wire          dds0_phasestep_s1_agent_rf_source_startofpacket;                                       // DDS0_PhaseStep_s1_agent:rf_source_startofpacket -> DDS0_PhaseStep_s1_agent_rsp_fifo:in_startofpacket
	wire          dds0_phasestep_s1_agent_rf_source_endofpacket;                                         // DDS0_PhaseStep_s1_agent:rf_source_endofpacket -> DDS0_PhaseStep_s1_agent_rsp_fifo:in_endofpacket
	wire          dds0_phasestep_s1_agent_rsp_fifo_out_valid;                                            // DDS0_PhaseStep_s1_agent_rsp_fifo:out_valid -> DDS0_PhaseStep_s1_agent:rf_sink_valid
	wire  [105:0] dds0_phasestep_s1_agent_rsp_fifo_out_data;                                             // DDS0_PhaseStep_s1_agent_rsp_fifo:out_data -> DDS0_PhaseStep_s1_agent:rf_sink_data
	wire          dds0_phasestep_s1_agent_rsp_fifo_out_ready;                                            // DDS0_PhaseStep_s1_agent:rf_sink_ready -> DDS0_PhaseStep_s1_agent_rsp_fifo:out_ready
	wire          dds0_phasestep_s1_agent_rsp_fifo_out_startofpacket;                                    // DDS0_PhaseStep_s1_agent_rsp_fifo:out_startofpacket -> DDS0_PhaseStep_s1_agent:rf_sink_startofpacket
	wire          dds0_phasestep_s1_agent_rsp_fifo_out_endofpacket;                                      // DDS0_PhaseStep_s1_agent_rsp_fifo:out_endofpacket -> DDS0_PhaseStep_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_023_src_valid;                                                                 // cmd_mux_023:src_valid -> DDS0_PhaseStep_s1_agent:cp_valid
	wire  [104:0] cmd_mux_023_src_data;                                                                  // cmd_mux_023:src_data -> DDS0_PhaseStep_s1_agent:cp_data
	wire          cmd_mux_023_src_ready;                                                                 // DDS0_PhaseStep_s1_agent:cp_ready -> cmd_mux_023:src_ready
	wire   [46:0] cmd_mux_023_src_channel;                                                               // cmd_mux_023:src_channel -> DDS0_PhaseStep_s1_agent:cp_channel
	wire          cmd_mux_023_src_startofpacket;                                                         // cmd_mux_023:src_startofpacket -> DDS0_PhaseStep_s1_agent:cp_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                                           // cmd_mux_023:src_endofpacket -> DDS0_PhaseStep_s1_agent:cp_endofpacket
	wire   [31:0] dds1_phasestep_s1_agent_m0_readdata;                                                   // DDS1_PhaseStep_s1_translator:uav_readdata -> DDS1_PhaseStep_s1_agent:m0_readdata
	wire          dds1_phasestep_s1_agent_m0_waitrequest;                                                // DDS1_PhaseStep_s1_translator:uav_waitrequest -> DDS1_PhaseStep_s1_agent:m0_waitrequest
	wire          dds1_phasestep_s1_agent_m0_debugaccess;                                                // DDS1_PhaseStep_s1_agent:m0_debugaccess -> DDS1_PhaseStep_s1_translator:uav_debugaccess
	wire   [19:0] dds1_phasestep_s1_agent_m0_address;                                                    // DDS1_PhaseStep_s1_agent:m0_address -> DDS1_PhaseStep_s1_translator:uav_address
	wire    [3:0] dds1_phasestep_s1_agent_m0_byteenable;                                                 // DDS1_PhaseStep_s1_agent:m0_byteenable -> DDS1_PhaseStep_s1_translator:uav_byteenable
	wire          dds1_phasestep_s1_agent_m0_read;                                                       // DDS1_PhaseStep_s1_agent:m0_read -> DDS1_PhaseStep_s1_translator:uav_read
	wire          dds1_phasestep_s1_agent_m0_readdatavalid;                                              // DDS1_PhaseStep_s1_translator:uav_readdatavalid -> DDS1_PhaseStep_s1_agent:m0_readdatavalid
	wire          dds1_phasestep_s1_agent_m0_lock;                                                       // DDS1_PhaseStep_s1_agent:m0_lock -> DDS1_PhaseStep_s1_translator:uav_lock
	wire   [31:0] dds1_phasestep_s1_agent_m0_writedata;                                                  // DDS1_PhaseStep_s1_agent:m0_writedata -> DDS1_PhaseStep_s1_translator:uav_writedata
	wire          dds1_phasestep_s1_agent_m0_write;                                                      // DDS1_PhaseStep_s1_agent:m0_write -> DDS1_PhaseStep_s1_translator:uav_write
	wire    [2:0] dds1_phasestep_s1_agent_m0_burstcount;                                                 // DDS1_PhaseStep_s1_agent:m0_burstcount -> DDS1_PhaseStep_s1_translator:uav_burstcount
	wire          dds1_phasestep_s1_agent_rf_source_valid;                                               // DDS1_PhaseStep_s1_agent:rf_source_valid -> DDS1_PhaseStep_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds1_phasestep_s1_agent_rf_source_data;                                                // DDS1_PhaseStep_s1_agent:rf_source_data -> DDS1_PhaseStep_s1_agent_rsp_fifo:in_data
	wire          dds1_phasestep_s1_agent_rf_source_ready;                                               // DDS1_PhaseStep_s1_agent_rsp_fifo:in_ready -> DDS1_PhaseStep_s1_agent:rf_source_ready
	wire          dds1_phasestep_s1_agent_rf_source_startofpacket;                                       // DDS1_PhaseStep_s1_agent:rf_source_startofpacket -> DDS1_PhaseStep_s1_agent_rsp_fifo:in_startofpacket
	wire          dds1_phasestep_s1_agent_rf_source_endofpacket;                                         // DDS1_PhaseStep_s1_agent:rf_source_endofpacket -> DDS1_PhaseStep_s1_agent_rsp_fifo:in_endofpacket
	wire          dds1_phasestep_s1_agent_rsp_fifo_out_valid;                                            // DDS1_PhaseStep_s1_agent_rsp_fifo:out_valid -> DDS1_PhaseStep_s1_agent:rf_sink_valid
	wire  [105:0] dds1_phasestep_s1_agent_rsp_fifo_out_data;                                             // DDS1_PhaseStep_s1_agent_rsp_fifo:out_data -> DDS1_PhaseStep_s1_agent:rf_sink_data
	wire          dds1_phasestep_s1_agent_rsp_fifo_out_ready;                                            // DDS1_PhaseStep_s1_agent:rf_sink_ready -> DDS1_PhaseStep_s1_agent_rsp_fifo:out_ready
	wire          dds1_phasestep_s1_agent_rsp_fifo_out_startofpacket;                                    // DDS1_PhaseStep_s1_agent_rsp_fifo:out_startofpacket -> DDS1_PhaseStep_s1_agent:rf_sink_startofpacket
	wire          dds1_phasestep_s1_agent_rsp_fifo_out_endofpacket;                                      // DDS1_PhaseStep_s1_agent_rsp_fifo:out_endofpacket -> DDS1_PhaseStep_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_024_src_valid;                                                                 // cmd_mux_024:src_valid -> DDS1_PhaseStep_s1_agent:cp_valid
	wire  [104:0] cmd_mux_024_src_data;                                                                  // cmd_mux_024:src_data -> DDS1_PhaseStep_s1_agent:cp_data
	wire          cmd_mux_024_src_ready;                                                                 // DDS1_PhaseStep_s1_agent:cp_ready -> cmd_mux_024:src_ready
	wire   [46:0] cmd_mux_024_src_channel;                                                               // cmd_mux_024:src_channel -> DDS1_PhaseStep_s1_agent:cp_channel
	wire          cmd_mux_024_src_startofpacket;                                                         // cmd_mux_024:src_startofpacket -> DDS1_PhaseStep_s1_agent:cp_startofpacket
	wire          cmd_mux_024_src_endofpacket;                                                           // cmd_mux_024:src_endofpacket -> DDS1_PhaseStep_s1_agent:cp_endofpacket
	wire   [15:0] lookup_ram_ram_dds0_am_s1_agent_m0_readdata;                                           // LOOKUP_RAM_RAM_DDS0_AM_s1_translator:uav_readdata -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent:m0_readdata
	wire          lookup_ram_ram_dds0_am_s1_agent_m0_waitrequest;                                        // LOOKUP_RAM_RAM_DDS0_AM_s1_translator:uav_waitrequest -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent:m0_waitrequest
	wire          lookup_ram_ram_dds0_am_s1_agent_m0_debugaccess;                                        // LOOKUP_RAM_RAM_DDS0_AM_s1_agent:m0_debugaccess -> LOOKUP_RAM_RAM_DDS0_AM_s1_translator:uav_debugaccess
	wire   [19:0] lookup_ram_ram_dds0_am_s1_agent_m0_address;                                            // LOOKUP_RAM_RAM_DDS0_AM_s1_agent:m0_address -> LOOKUP_RAM_RAM_DDS0_AM_s1_translator:uav_address
	wire    [1:0] lookup_ram_ram_dds0_am_s1_agent_m0_byteenable;                                         // LOOKUP_RAM_RAM_DDS0_AM_s1_agent:m0_byteenable -> LOOKUP_RAM_RAM_DDS0_AM_s1_translator:uav_byteenable
	wire          lookup_ram_ram_dds0_am_s1_agent_m0_read;                                               // LOOKUP_RAM_RAM_DDS0_AM_s1_agent:m0_read -> LOOKUP_RAM_RAM_DDS0_AM_s1_translator:uav_read
	wire          lookup_ram_ram_dds0_am_s1_agent_m0_readdatavalid;                                      // LOOKUP_RAM_RAM_DDS0_AM_s1_translator:uav_readdatavalid -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent:m0_readdatavalid
	wire          lookup_ram_ram_dds0_am_s1_agent_m0_lock;                                               // LOOKUP_RAM_RAM_DDS0_AM_s1_agent:m0_lock -> LOOKUP_RAM_RAM_DDS0_AM_s1_translator:uav_lock
	wire   [15:0] lookup_ram_ram_dds0_am_s1_agent_m0_writedata;                                          // LOOKUP_RAM_RAM_DDS0_AM_s1_agent:m0_writedata -> LOOKUP_RAM_RAM_DDS0_AM_s1_translator:uav_writedata
	wire          lookup_ram_ram_dds0_am_s1_agent_m0_write;                                              // LOOKUP_RAM_RAM_DDS0_AM_s1_agent:m0_write -> LOOKUP_RAM_RAM_DDS0_AM_s1_translator:uav_write
	wire    [1:0] lookup_ram_ram_dds0_am_s1_agent_m0_burstcount;                                         // LOOKUP_RAM_RAM_DDS0_AM_s1_agent:m0_burstcount -> LOOKUP_RAM_RAM_DDS0_AM_s1_translator:uav_burstcount
	wire          lookup_ram_ram_dds0_am_s1_agent_rf_source_valid;                                       // LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rf_source_valid -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent_rsp_fifo:in_valid
	wire   [87:0] lookup_ram_ram_dds0_am_s1_agent_rf_source_data;                                        // LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rf_source_data -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent_rsp_fifo:in_data
	wire          lookup_ram_ram_dds0_am_s1_agent_rf_source_ready;                                       // LOOKUP_RAM_RAM_DDS0_AM_s1_agent_rsp_fifo:in_ready -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rf_source_ready
	wire          lookup_ram_ram_dds0_am_s1_agent_rf_source_startofpacket;                               // LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rf_source_startofpacket -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent_rsp_fifo:in_startofpacket
	wire          lookup_ram_ram_dds0_am_s1_agent_rf_source_endofpacket;                                 // LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rf_source_endofpacket -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent_rsp_fifo:in_endofpacket
	wire          lookup_ram_ram_dds0_am_s1_agent_rsp_fifo_out_valid;                                    // LOOKUP_RAM_RAM_DDS0_AM_s1_agent_rsp_fifo:out_valid -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rf_sink_valid
	wire   [87:0] lookup_ram_ram_dds0_am_s1_agent_rsp_fifo_out_data;                                     // LOOKUP_RAM_RAM_DDS0_AM_s1_agent_rsp_fifo:out_data -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rf_sink_data
	wire          lookup_ram_ram_dds0_am_s1_agent_rsp_fifo_out_ready;                                    // LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rf_sink_ready -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent_rsp_fifo:out_ready
	wire          lookup_ram_ram_dds0_am_s1_agent_rsp_fifo_out_startofpacket;                            // LOOKUP_RAM_RAM_DDS0_AM_s1_agent_rsp_fifo:out_startofpacket -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rf_sink_startofpacket
	wire          lookup_ram_ram_dds0_am_s1_agent_rsp_fifo_out_endofpacket;                              // LOOKUP_RAM_RAM_DDS0_AM_s1_agent_rsp_fifo:out_endofpacket -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rf_sink_endofpacket
	wire   [15:0] lookup_ram_ram_dds0_fm_s1_agent_m0_readdata;                                           // LOOKUP_RAM_RAM_DDS0_FM_s1_translator:uav_readdata -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent:m0_readdata
	wire          lookup_ram_ram_dds0_fm_s1_agent_m0_waitrequest;                                        // LOOKUP_RAM_RAM_DDS0_FM_s1_translator:uav_waitrequest -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent:m0_waitrequest
	wire          lookup_ram_ram_dds0_fm_s1_agent_m0_debugaccess;                                        // LOOKUP_RAM_RAM_DDS0_FM_s1_agent:m0_debugaccess -> LOOKUP_RAM_RAM_DDS0_FM_s1_translator:uav_debugaccess
	wire   [19:0] lookup_ram_ram_dds0_fm_s1_agent_m0_address;                                            // LOOKUP_RAM_RAM_DDS0_FM_s1_agent:m0_address -> LOOKUP_RAM_RAM_DDS0_FM_s1_translator:uav_address
	wire    [1:0] lookup_ram_ram_dds0_fm_s1_agent_m0_byteenable;                                         // LOOKUP_RAM_RAM_DDS0_FM_s1_agent:m0_byteenable -> LOOKUP_RAM_RAM_DDS0_FM_s1_translator:uav_byteenable
	wire          lookup_ram_ram_dds0_fm_s1_agent_m0_read;                                               // LOOKUP_RAM_RAM_DDS0_FM_s1_agent:m0_read -> LOOKUP_RAM_RAM_DDS0_FM_s1_translator:uav_read
	wire          lookup_ram_ram_dds0_fm_s1_agent_m0_readdatavalid;                                      // LOOKUP_RAM_RAM_DDS0_FM_s1_translator:uav_readdatavalid -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent:m0_readdatavalid
	wire          lookup_ram_ram_dds0_fm_s1_agent_m0_lock;                                               // LOOKUP_RAM_RAM_DDS0_FM_s1_agent:m0_lock -> LOOKUP_RAM_RAM_DDS0_FM_s1_translator:uav_lock
	wire   [15:0] lookup_ram_ram_dds0_fm_s1_agent_m0_writedata;                                          // LOOKUP_RAM_RAM_DDS0_FM_s1_agent:m0_writedata -> LOOKUP_RAM_RAM_DDS0_FM_s1_translator:uav_writedata
	wire          lookup_ram_ram_dds0_fm_s1_agent_m0_write;                                              // LOOKUP_RAM_RAM_DDS0_FM_s1_agent:m0_write -> LOOKUP_RAM_RAM_DDS0_FM_s1_translator:uav_write
	wire    [1:0] lookup_ram_ram_dds0_fm_s1_agent_m0_burstcount;                                         // LOOKUP_RAM_RAM_DDS0_FM_s1_agent:m0_burstcount -> LOOKUP_RAM_RAM_DDS0_FM_s1_translator:uav_burstcount
	wire          lookup_ram_ram_dds0_fm_s1_agent_rf_source_valid;                                       // LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rf_source_valid -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent_rsp_fifo:in_valid
	wire   [87:0] lookup_ram_ram_dds0_fm_s1_agent_rf_source_data;                                        // LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rf_source_data -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent_rsp_fifo:in_data
	wire          lookup_ram_ram_dds0_fm_s1_agent_rf_source_ready;                                       // LOOKUP_RAM_RAM_DDS0_FM_s1_agent_rsp_fifo:in_ready -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rf_source_ready
	wire          lookup_ram_ram_dds0_fm_s1_agent_rf_source_startofpacket;                               // LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rf_source_startofpacket -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent_rsp_fifo:in_startofpacket
	wire          lookup_ram_ram_dds0_fm_s1_agent_rf_source_endofpacket;                                 // LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rf_source_endofpacket -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent_rsp_fifo:in_endofpacket
	wire          lookup_ram_ram_dds0_fm_s1_agent_rsp_fifo_out_valid;                                    // LOOKUP_RAM_RAM_DDS0_FM_s1_agent_rsp_fifo:out_valid -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rf_sink_valid
	wire   [87:0] lookup_ram_ram_dds0_fm_s1_agent_rsp_fifo_out_data;                                     // LOOKUP_RAM_RAM_DDS0_FM_s1_agent_rsp_fifo:out_data -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rf_sink_data
	wire          lookup_ram_ram_dds0_fm_s1_agent_rsp_fifo_out_ready;                                    // LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rf_sink_ready -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent_rsp_fifo:out_ready
	wire          lookup_ram_ram_dds0_fm_s1_agent_rsp_fifo_out_startofpacket;                            // LOOKUP_RAM_RAM_DDS0_FM_s1_agent_rsp_fifo:out_startofpacket -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rf_sink_startofpacket
	wire          lookup_ram_ram_dds0_fm_s1_agent_rsp_fifo_out_endofpacket;                              // LOOKUP_RAM_RAM_DDS0_FM_s1_agent_rsp_fifo:out_endofpacket -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rf_sink_endofpacket
	wire   [15:0] lookup_ram_ram_dds0_s1_agent_m0_readdata;                                              // LOOKUP_RAM_RAM_DDS0_s1_translator:uav_readdata -> LOOKUP_RAM_RAM_DDS0_s1_agent:m0_readdata
	wire          lookup_ram_ram_dds0_s1_agent_m0_waitrequest;                                           // LOOKUP_RAM_RAM_DDS0_s1_translator:uav_waitrequest -> LOOKUP_RAM_RAM_DDS0_s1_agent:m0_waitrequest
	wire          lookup_ram_ram_dds0_s1_agent_m0_debugaccess;                                           // LOOKUP_RAM_RAM_DDS0_s1_agent:m0_debugaccess -> LOOKUP_RAM_RAM_DDS0_s1_translator:uav_debugaccess
	wire   [19:0] lookup_ram_ram_dds0_s1_agent_m0_address;                                               // LOOKUP_RAM_RAM_DDS0_s1_agent:m0_address -> LOOKUP_RAM_RAM_DDS0_s1_translator:uav_address
	wire    [1:0] lookup_ram_ram_dds0_s1_agent_m0_byteenable;                                            // LOOKUP_RAM_RAM_DDS0_s1_agent:m0_byteenable -> LOOKUP_RAM_RAM_DDS0_s1_translator:uav_byteenable
	wire          lookup_ram_ram_dds0_s1_agent_m0_read;                                                  // LOOKUP_RAM_RAM_DDS0_s1_agent:m0_read -> LOOKUP_RAM_RAM_DDS0_s1_translator:uav_read
	wire          lookup_ram_ram_dds0_s1_agent_m0_readdatavalid;                                         // LOOKUP_RAM_RAM_DDS0_s1_translator:uav_readdatavalid -> LOOKUP_RAM_RAM_DDS0_s1_agent:m0_readdatavalid
	wire          lookup_ram_ram_dds0_s1_agent_m0_lock;                                                  // LOOKUP_RAM_RAM_DDS0_s1_agent:m0_lock -> LOOKUP_RAM_RAM_DDS0_s1_translator:uav_lock
	wire   [15:0] lookup_ram_ram_dds0_s1_agent_m0_writedata;                                             // LOOKUP_RAM_RAM_DDS0_s1_agent:m0_writedata -> LOOKUP_RAM_RAM_DDS0_s1_translator:uav_writedata
	wire          lookup_ram_ram_dds0_s1_agent_m0_write;                                                 // LOOKUP_RAM_RAM_DDS0_s1_agent:m0_write -> LOOKUP_RAM_RAM_DDS0_s1_translator:uav_write
	wire    [1:0] lookup_ram_ram_dds0_s1_agent_m0_burstcount;                                            // LOOKUP_RAM_RAM_DDS0_s1_agent:m0_burstcount -> LOOKUP_RAM_RAM_DDS0_s1_translator:uav_burstcount
	wire          lookup_ram_ram_dds0_s1_agent_rf_source_valid;                                          // LOOKUP_RAM_RAM_DDS0_s1_agent:rf_source_valid -> LOOKUP_RAM_RAM_DDS0_s1_agent_rsp_fifo:in_valid
	wire   [87:0] lookup_ram_ram_dds0_s1_agent_rf_source_data;                                           // LOOKUP_RAM_RAM_DDS0_s1_agent:rf_source_data -> LOOKUP_RAM_RAM_DDS0_s1_agent_rsp_fifo:in_data
	wire          lookup_ram_ram_dds0_s1_agent_rf_source_ready;                                          // LOOKUP_RAM_RAM_DDS0_s1_agent_rsp_fifo:in_ready -> LOOKUP_RAM_RAM_DDS0_s1_agent:rf_source_ready
	wire          lookup_ram_ram_dds0_s1_agent_rf_source_startofpacket;                                  // LOOKUP_RAM_RAM_DDS0_s1_agent:rf_source_startofpacket -> LOOKUP_RAM_RAM_DDS0_s1_agent_rsp_fifo:in_startofpacket
	wire          lookup_ram_ram_dds0_s1_agent_rf_source_endofpacket;                                    // LOOKUP_RAM_RAM_DDS0_s1_agent:rf_source_endofpacket -> LOOKUP_RAM_RAM_DDS0_s1_agent_rsp_fifo:in_endofpacket
	wire          lookup_ram_ram_dds0_s1_agent_rsp_fifo_out_valid;                                       // LOOKUP_RAM_RAM_DDS0_s1_agent_rsp_fifo:out_valid -> LOOKUP_RAM_RAM_DDS0_s1_agent:rf_sink_valid
	wire   [87:0] lookup_ram_ram_dds0_s1_agent_rsp_fifo_out_data;                                        // LOOKUP_RAM_RAM_DDS0_s1_agent_rsp_fifo:out_data -> LOOKUP_RAM_RAM_DDS0_s1_agent:rf_sink_data
	wire          lookup_ram_ram_dds0_s1_agent_rsp_fifo_out_ready;                                       // LOOKUP_RAM_RAM_DDS0_s1_agent:rf_sink_ready -> LOOKUP_RAM_RAM_DDS0_s1_agent_rsp_fifo:out_ready
	wire          lookup_ram_ram_dds0_s1_agent_rsp_fifo_out_startofpacket;                               // LOOKUP_RAM_RAM_DDS0_s1_agent_rsp_fifo:out_startofpacket -> LOOKUP_RAM_RAM_DDS0_s1_agent:rf_sink_startofpacket
	wire          lookup_ram_ram_dds0_s1_agent_rsp_fifo_out_endofpacket;                                 // LOOKUP_RAM_RAM_DDS0_s1_agent_rsp_fifo:out_endofpacket -> LOOKUP_RAM_RAM_DDS0_s1_agent:rf_sink_endofpacket
	wire   [15:0] lookup_ram_ram_dds1_am_s1_agent_m0_readdata;                                           // LOOKUP_RAM_RAM_DDS1_AM_s1_translator:uav_readdata -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent:m0_readdata
	wire          lookup_ram_ram_dds1_am_s1_agent_m0_waitrequest;                                        // LOOKUP_RAM_RAM_DDS1_AM_s1_translator:uav_waitrequest -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent:m0_waitrequest
	wire          lookup_ram_ram_dds1_am_s1_agent_m0_debugaccess;                                        // LOOKUP_RAM_RAM_DDS1_AM_s1_agent:m0_debugaccess -> LOOKUP_RAM_RAM_DDS1_AM_s1_translator:uav_debugaccess
	wire   [19:0] lookup_ram_ram_dds1_am_s1_agent_m0_address;                                            // LOOKUP_RAM_RAM_DDS1_AM_s1_agent:m0_address -> LOOKUP_RAM_RAM_DDS1_AM_s1_translator:uav_address
	wire    [1:0] lookup_ram_ram_dds1_am_s1_agent_m0_byteenable;                                         // LOOKUP_RAM_RAM_DDS1_AM_s1_agent:m0_byteenable -> LOOKUP_RAM_RAM_DDS1_AM_s1_translator:uav_byteenable
	wire          lookup_ram_ram_dds1_am_s1_agent_m0_read;                                               // LOOKUP_RAM_RAM_DDS1_AM_s1_agent:m0_read -> LOOKUP_RAM_RAM_DDS1_AM_s1_translator:uav_read
	wire          lookup_ram_ram_dds1_am_s1_agent_m0_readdatavalid;                                      // LOOKUP_RAM_RAM_DDS1_AM_s1_translator:uav_readdatavalid -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent:m0_readdatavalid
	wire          lookup_ram_ram_dds1_am_s1_agent_m0_lock;                                               // LOOKUP_RAM_RAM_DDS1_AM_s1_agent:m0_lock -> LOOKUP_RAM_RAM_DDS1_AM_s1_translator:uav_lock
	wire   [15:0] lookup_ram_ram_dds1_am_s1_agent_m0_writedata;                                          // LOOKUP_RAM_RAM_DDS1_AM_s1_agent:m0_writedata -> LOOKUP_RAM_RAM_DDS1_AM_s1_translator:uav_writedata
	wire          lookup_ram_ram_dds1_am_s1_agent_m0_write;                                              // LOOKUP_RAM_RAM_DDS1_AM_s1_agent:m0_write -> LOOKUP_RAM_RAM_DDS1_AM_s1_translator:uav_write
	wire    [1:0] lookup_ram_ram_dds1_am_s1_agent_m0_burstcount;                                         // LOOKUP_RAM_RAM_DDS1_AM_s1_agent:m0_burstcount -> LOOKUP_RAM_RAM_DDS1_AM_s1_translator:uav_burstcount
	wire          lookup_ram_ram_dds1_am_s1_agent_rf_source_valid;                                       // LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rf_source_valid -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent_rsp_fifo:in_valid
	wire   [87:0] lookup_ram_ram_dds1_am_s1_agent_rf_source_data;                                        // LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rf_source_data -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent_rsp_fifo:in_data
	wire          lookup_ram_ram_dds1_am_s1_agent_rf_source_ready;                                       // LOOKUP_RAM_RAM_DDS1_AM_s1_agent_rsp_fifo:in_ready -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rf_source_ready
	wire          lookup_ram_ram_dds1_am_s1_agent_rf_source_startofpacket;                               // LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rf_source_startofpacket -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent_rsp_fifo:in_startofpacket
	wire          lookup_ram_ram_dds1_am_s1_agent_rf_source_endofpacket;                                 // LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rf_source_endofpacket -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent_rsp_fifo:in_endofpacket
	wire          lookup_ram_ram_dds1_am_s1_agent_rsp_fifo_out_valid;                                    // LOOKUP_RAM_RAM_DDS1_AM_s1_agent_rsp_fifo:out_valid -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rf_sink_valid
	wire   [87:0] lookup_ram_ram_dds1_am_s1_agent_rsp_fifo_out_data;                                     // LOOKUP_RAM_RAM_DDS1_AM_s1_agent_rsp_fifo:out_data -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rf_sink_data
	wire          lookup_ram_ram_dds1_am_s1_agent_rsp_fifo_out_ready;                                    // LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rf_sink_ready -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent_rsp_fifo:out_ready
	wire          lookup_ram_ram_dds1_am_s1_agent_rsp_fifo_out_startofpacket;                            // LOOKUP_RAM_RAM_DDS1_AM_s1_agent_rsp_fifo:out_startofpacket -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rf_sink_startofpacket
	wire          lookup_ram_ram_dds1_am_s1_agent_rsp_fifo_out_endofpacket;                              // LOOKUP_RAM_RAM_DDS1_AM_s1_agent_rsp_fifo:out_endofpacket -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rf_sink_endofpacket
	wire   [15:0] lookup_ram_ram_dds1_fm_s1_agent_m0_readdata;                                           // LOOKUP_RAM_RAM_DDS1_FM_s1_translator:uav_readdata -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent:m0_readdata
	wire          lookup_ram_ram_dds1_fm_s1_agent_m0_waitrequest;                                        // LOOKUP_RAM_RAM_DDS1_FM_s1_translator:uav_waitrequest -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent:m0_waitrequest
	wire          lookup_ram_ram_dds1_fm_s1_agent_m0_debugaccess;                                        // LOOKUP_RAM_RAM_DDS1_FM_s1_agent:m0_debugaccess -> LOOKUP_RAM_RAM_DDS1_FM_s1_translator:uav_debugaccess
	wire   [19:0] lookup_ram_ram_dds1_fm_s1_agent_m0_address;                                            // LOOKUP_RAM_RAM_DDS1_FM_s1_agent:m0_address -> LOOKUP_RAM_RAM_DDS1_FM_s1_translator:uav_address
	wire    [1:0] lookup_ram_ram_dds1_fm_s1_agent_m0_byteenable;                                         // LOOKUP_RAM_RAM_DDS1_FM_s1_agent:m0_byteenable -> LOOKUP_RAM_RAM_DDS1_FM_s1_translator:uav_byteenable
	wire          lookup_ram_ram_dds1_fm_s1_agent_m0_read;                                               // LOOKUP_RAM_RAM_DDS1_FM_s1_agent:m0_read -> LOOKUP_RAM_RAM_DDS1_FM_s1_translator:uav_read
	wire          lookup_ram_ram_dds1_fm_s1_agent_m0_readdatavalid;                                      // LOOKUP_RAM_RAM_DDS1_FM_s1_translator:uav_readdatavalid -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent:m0_readdatavalid
	wire          lookup_ram_ram_dds1_fm_s1_agent_m0_lock;                                               // LOOKUP_RAM_RAM_DDS1_FM_s1_agent:m0_lock -> LOOKUP_RAM_RAM_DDS1_FM_s1_translator:uav_lock
	wire   [15:0] lookup_ram_ram_dds1_fm_s1_agent_m0_writedata;                                          // LOOKUP_RAM_RAM_DDS1_FM_s1_agent:m0_writedata -> LOOKUP_RAM_RAM_DDS1_FM_s1_translator:uav_writedata
	wire          lookup_ram_ram_dds1_fm_s1_agent_m0_write;                                              // LOOKUP_RAM_RAM_DDS1_FM_s1_agent:m0_write -> LOOKUP_RAM_RAM_DDS1_FM_s1_translator:uav_write
	wire    [1:0] lookup_ram_ram_dds1_fm_s1_agent_m0_burstcount;                                         // LOOKUP_RAM_RAM_DDS1_FM_s1_agent:m0_burstcount -> LOOKUP_RAM_RAM_DDS1_FM_s1_translator:uav_burstcount
	wire          lookup_ram_ram_dds1_fm_s1_agent_rf_source_valid;                                       // LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rf_source_valid -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent_rsp_fifo:in_valid
	wire   [87:0] lookup_ram_ram_dds1_fm_s1_agent_rf_source_data;                                        // LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rf_source_data -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent_rsp_fifo:in_data
	wire          lookup_ram_ram_dds1_fm_s1_agent_rf_source_ready;                                       // LOOKUP_RAM_RAM_DDS1_FM_s1_agent_rsp_fifo:in_ready -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rf_source_ready
	wire          lookup_ram_ram_dds1_fm_s1_agent_rf_source_startofpacket;                               // LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rf_source_startofpacket -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent_rsp_fifo:in_startofpacket
	wire          lookup_ram_ram_dds1_fm_s1_agent_rf_source_endofpacket;                                 // LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rf_source_endofpacket -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent_rsp_fifo:in_endofpacket
	wire          lookup_ram_ram_dds1_fm_s1_agent_rsp_fifo_out_valid;                                    // LOOKUP_RAM_RAM_DDS1_FM_s1_agent_rsp_fifo:out_valid -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rf_sink_valid
	wire   [87:0] lookup_ram_ram_dds1_fm_s1_agent_rsp_fifo_out_data;                                     // LOOKUP_RAM_RAM_DDS1_FM_s1_agent_rsp_fifo:out_data -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rf_sink_data
	wire          lookup_ram_ram_dds1_fm_s1_agent_rsp_fifo_out_ready;                                    // LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rf_sink_ready -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent_rsp_fifo:out_ready
	wire          lookup_ram_ram_dds1_fm_s1_agent_rsp_fifo_out_startofpacket;                            // LOOKUP_RAM_RAM_DDS1_FM_s1_agent_rsp_fifo:out_startofpacket -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rf_sink_startofpacket
	wire          lookup_ram_ram_dds1_fm_s1_agent_rsp_fifo_out_endofpacket;                              // LOOKUP_RAM_RAM_DDS1_FM_s1_agent_rsp_fifo:out_endofpacket -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rf_sink_endofpacket
	wire   [15:0] lookup_ram_ram_dds1_s1_agent_m0_readdata;                                              // LOOKUP_RAM_RAM_DDS1_s1_translator:uav_readdata -> LOOKUP_RAM_RAM_DDS1_s1_agent:m0_readdata
	wire          lookup_ram_ram_dds1_s1_agent_m0_waitrequest;                                           // LOOKUP_RAM_RAM_DDS1_s1_translator:uav_waitrequest -> LOOKUP_RAM_RAM_DDS1_s1_agent:m0_waitrequest
	wire          lookup_ram_ram_dds1_s1_agent_m0_debugaccess;                                           // LOOKUP_RAM_RAM_DDS1_s1_agent:m0_debugaccess -> LOOKUP_RAM_RAM_DDS1_s1_translator:uav_debugaccess
	wire   [19:0] lookup_ram_ram_dds1_s1_agent_m0_address;                                               // LOOKUP_RAM_RAM_DDS1_s1_agent:m0_address -> LOOKUP_RAM_RAM_DDS1_s1_translator:uav_address
	wire    [1:0] lookup_ram_ram_dds1_s1_agent_m0_byteenable;                                            // LOOKUP_RAM_RAM_DDS1_s1_agent:m0_byteenable -> LOOKUP_RAM_RAM_DDS1_s1_translator:uav_byteenable
	wire          lookup_ram_ram_dds1_s1_agent_m0_read;                                                  // LOOKUP_RAM_RAM_DDS1_s1_agent:m0_read -> LOOKUP_RAM_RAM_DDS1_s1_translator:uav_read
	wire          lookup_ram_ram_dds1_s1_agent_m0_readdatavalid;                                         // LOOKUP_RAM_RAM_DDS1_s1_translator:uav_readdatavalid -> LOOKUP_RAM_RAM_DDS1_s1_agent:m0_readdatavalid
	wire          lookup_ram_ram_dds1_s1_agent_m0_lock;                                                  // LOOKUP_RAM_RAM_DDS1_s1_agent:m0_lock -> LOOKUP_RAM_RAM_DDS1_s1_translator:uav_lock
	wire   [15:0] lookup_ram_ram_dds1_s1_agent_m0_writedata;                                             // LOOKUP_RAM_RAM_DDS1_s1_agent:m0_writedata -> LOOKUP_RAM_RAM_DDS1_s1_translator:uav_writedata
	wire          lookup_ram_ram_dds1_s1_agent_m0_write;                                                 // LOOKUP_RAM_RAM_DDS1_s1_agent:m0_write -> LOOKUP_RAM_RAM_DDS1_s1_translator:uav_write
	wire    [1:0] lookup_ram_ram_dds1_s1_agent_m0_burstcount;                                            // LOOKUP_RAM_RAM_DDS1_s1_agent:m0_burstcount -> LOOKUP_RAM_RAM_DDS1_s1_translator:uav_burstcount
	wire          lookup_ram_ram_dds1_s1_agent_rf_source_valid;                                          // LOOKUP_RAM_RAM_DDS1_s1_agent:rf_source_valid -> LOOKUP_RAM_RAM_DDS1_s1_agent_rsp_fifo:in_valid
	wire   [87:0] lookup_ram_ram_dds1_s1_agent_rf_source_data;                                           // LOOKUP_RAM_RAM_DDS1_s1_agent:rf_source_data -> LOOKUP_RAM_RAM_DDS1_s1_agent_rsp_fifo:in_data
	wire          lookup_ram_ram_dds1_s1_agent_rf_source_ready;                                          // LOOKUP_RAM_RAM_DDS1_s1_agent_rsp_fifo:in_ready -> LOOKUP_RAM_RAM_DDS1_s1_agent:rf_source_ready
	wire          lookup_ram_ram_dds1_s1_agent_rf_source_startofpacket;                                  // LOOKUP_RAM_RAM_DDS1_s1_agent:rf_source_startofpacket -> LOOKUP_RAM_RAM_DDS1_s1_agent_rsp_fifo:in_startofpacket
	wire          lookup_ram_ram_dds1_s1_agent_rf_source_endofpacket;                                    // LOOKUP_RAM_RAM_DDS1_s1_agent:rf_source_endofpacket -> LOOKUP_RAM_RAM_DDS1_s1_agent_rsp_fifo:in_endofpacket
	wire          lookup_ram_ram_dds1_s1_agent_rsp_fifo_out_valid;                                       // LOOKUP_RAM_RAM_DDS1_s1_agent_rsp_fifo:out_valid -> LOOKUP_RAM_RAM_DDS1_s1_agent:rf_sink_valid
	wire   [87:0] lookup_ram_ram_dds1_s1_agent_rsp_fifo_out_data;                                        // LOOKUP_RAM_RAM_DDS1_s1_agent_rsp_fifo:out_data -> LOOKUP_RAM_RAM_DDS1_s1_agent:rf_sink_data
	wire          lookup_ram_ram_dds1_s1_agent_rsp_fifo_out_ready;                                       // LOOKUP_RAM_RAM_DDS1_s1_agent:rf_sink_ready -> LOOKUP_RAM_RAM_DDS1_s1_agent_rsp_fifo:out_ready
	wire          lookup_ram_ram_dds1_s1_agent_rsp_fifo_out_startofpacket;                               // LOOKUP_RAM_RAM_DDS1_s1_agent_rsp_fifo:out_startofpacket -> LOOKUP_RAM_RAM_DDS1_s1_agent:rf_sink_startofpacket
	wire          lookup_ram_ram_dds1_s1_agent_rsp_fifo_out_endofpacket;                                 // LOOKUP_RAM_RAM_DDS1_s1_agent_rsp_fifo:out_endofpacket -> LOOKUP_RAM_RAM_DDS1_s1_agent:rf_sink_endofpacket
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                         // JTAG_UART_avalon_jtag_slave_translator:uav_readdata -> JTAG_UART_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                      // JTAG_UART_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_UART_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                      // JTAG_UART_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_UART_avalon_jtag_slave_translator:uav_debugaccess
	wire   [19:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                          // JTAG_UART_avalon_jtag_slave_agent:m0_address -> JTAG_UART_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                       // JTAG_UART_avalon_jtag_slave_agent:m0_byteenable -> JTAG_UART_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                             // JTAG_UART_avalon_jtag_slave_agent:m0_read -> JTAG_UART_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                    // JTAG_UART_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_UART_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                             // JTAG_UART_avalon_jtag_slave_agent:m0_lock -> JTAG_UART_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                        // JTAG_UART_avalon_jtag_slave_agent:m0_writedata -> JTAG_UART_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                            // JTAG_UART_avalon_jtag_slave_agent:m0_write -> JTAG_UART_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                       // JTAG_UART_avalon_jtag_slave_agent:m0_burstcount -> JTAG_UART_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                     // JTAG_UART_avalon_jtag_slave_agent:rf_source_valid -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [105:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                      // JTAG_UART_avalon_jtag_slave_agent:rf_source_data -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                     // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_UART_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                             // JTAG_UART_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                               // JTAG_UART_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                  // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_valid
	wire  [105:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                                   // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                  // JTAG_UART_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                          // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                            // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_031_src_valid;                                                                 // cmd_mux_031:src_valid -> JTAG_UART_avalon_jtag_slave_agent:cp_valid
	wire  [104:0] cmd_mux_031_src_data;                                                                  // cmd_mux_031:src_data -> JTAG_UART_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_031_src_ready;                                                                 // JTAG_UART_avalon_jtag_slave_agent:cp_ready -> cmd_mux_031:src_ready
	wire   [46:0] cmd_mux_031_src_channel;                                                               // cmd_mux_031:src_channel -> JTAG_UART_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_031_src_startofpacket;                                                         // cmd_mux_031:src_startofpacket -> JTAG_UART_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_031_src_endofpacket;                                                           // cmd_mux_031:src_endofpacket -> JTAG_UART_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] lcd_dma_control_port_slave_agent_m0_readdata;                                          // LCD_DMA_control_port_slave_translator:uav_readdata -> LCD_DMA_control_port_slave_agent:m0_readdata
	wire          lcd_dma_control_port_slave_agent_m0_waitrequest;                                       // LCD_DMA_control_port_slave_translator:uav_waitrequest -> LCD_DMA_control_port_slave_agent:m0_waitrequest
	wire          lcd_dma_control_port_slave_agent_m0_debugaccess;                                       // LCD_DMA_control_port_slave_agent:m0_debugaccess -> LCD_DMA_control_port_slave_translator:uav_debugaccess
	wire   [19:0] lcd_dma_control_port_slave_agent_m0_address;                                           // LCD_DMA_control_port_slave_agent:m0_address -> LCD_DMA_control_port_slave_translator:uav_address
	wire    [3:0] lcd_dma_control_port_slave_agent_m0_byteenable;                                        // LCD_DMA_control_port_slave_agent:m0_byteenable -> LCD_DMA_control_port_slave_translator:uav_byteenable
	wire          lcd_dma_control_port_slave_agent_m0_read;                                              // LCD_DMA_control_port_slave_agent:m0_read -> LCD_DMA_control_port_slave_translator:uav_read
	wire          lcd_dma_control_port_slave_agent_m0_readdatavalid;                                     // LCD_DMA_control_port_slave_translator:uav_readdatavalid -> LCD_DMA_control_port_slave_agent:m0_readdatavalid
	wire          lcd_dma_control_port_slave_agent_m0_lock;                                              // LCD_DMA_control_port_slave_agent:m0_lock -> LCD_DMA_control_port_slave_translator:uav_lock
	wire   [31:0] lcd_dma_control_port_slave_agent_m0_writedata;                                         // LCD_DMA_control_port_slave_agent:m0_writedata -> LCD_DMA_control_port_slave_translator:uav_writedata
	wire          lcd_dma_control_port_slave_agent_m0_write;                                             // LCD_DMA_control_port_slave_agent:m0_write -> LCD_DMA_control_port_slave_translator:uav_write
	wire    [2:0] lcd_dma_control_port_slave_agent_m0_burstcount;                                        // LCD_DMA_control_port_slave_agent:m0_burstcount -> LCD_DMA_control_port_slave_translator:uav_burstcount
	wire          lcd_dma_control_port_slave_agent_rf_source_valid;                                      // LCD_DMA_control_port_slave_agent:rf_source_valid -> LCD_DMA_control_port_slave_agent_rsp_fifo:in_valid
	wire  [105:0] lcd_dma_control_port_slave_agent_rf_source_data;                                       // LCD_DMA_control_port_slave_agent:rf_source_data -> LCD_DMA_control_port_slave_agent_rsp_fifo:in_data
	wire          lcd_dma_control_port_slave_agent_rf_source_ready;                                      // LCD_DMA_control_port_slave_agent_rsp_fifo:in_ready -> LCD_DMA_control_port_slave_agent:rf_source_ready
	wire          lcd_dma_control_port_slave_agent_rf_source_startofpacket;                              // LCD_DMA_control_port_slave_agent:rf_source_startofpacket -> LCD_DMA_control_port_slave_agent_rsp_fifo:in_startofpacket
	wire          lcd_dma_control_port_slave_agent_rf_source_endofpacket;                                // LCD_DMA_control_port_slave_agent:rf_source_endofpacket -> LCD_DMA_control_port_slave_agent_rsp_fifo:in_endofpacket
	wire          lcd_dma_control_port_slave_agent_rsp_fifo_out_valid;                                   // LCD_DMA_control_port_slave_agent_rsp_fifo:out_valid -> LCD_DMA_control_port_slave_agent:rf_sink_valid
	wire  [105:0] lcd_dma_control_port_slave_agent_rsp_fifo_out_data;                                    // LCD_DMA_control_port_slave_agent_rsp_fifo:out_data -> LCD_DMA_control_port_slave_agent:rf_sink_data
	wire          lcd_dma_control_port_slave_agent_rsp_fifo_out_ready;                                   // LCD_DMA_control_port_slave_agent:rf_sink_ready -> LCD_DMA_control_port_slave_agent_rsp_fifo:out_ready
	wire          lcd_dma_control_port_slave_agent_rsp_fifo_out_startofpacket;                           // LCD_DMA_control_port_slave_agent_rsp_fifo:out_startofpacket -> LCD_DMA_control_port_slave_agent:rf_sink_startofpacket
	wire          lcd_dma_control_port_slave_agent_rsp_fifo_out_endofpacket;                             // LCD_DMA_control_port_slave_agent_rsp_fifo:out_endofpacket -> LCD_DMA_control_port_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_032_src_valid;                                                                 // cmd_mux_032:src_valid -> LCD_DMA_control_port_slave_agent:cp_valid
	wire  [104:0] cmd_mux_032_src_data;                                                                  // cmd_mux_032:src_data -> LCD_DMA_control_port_slave_agent:cp_data
	wire          cmd_mux_032_src_ready;                                                                 // LCD_DMA_control_port_slave_agent:cp_ready -> cmd_mux_032:src_ready
	wire   [46:0] cmd_mux_032_src_channel;                                                               // cmd_mux_032:src_channel -> LCD_DMA_control_port_slave_agent:cp_channel
	wire          cmd_mux_032_src_startofpacket;                                                         // cmd_mux_032:src_startofpacket -> LCD_DMA_control_port_slave_agent:cp_startofpacket
	wire          cmd_mux_032_src_endofpacket;                                                           // cmd_mux_032:src_endofpacket -> LCD_DMA_control_port_slave_agent:cp_endofpacket
	wire   [31:0] spi_dma_control_port_slave_agent_m0_readdata;                                          // SPI_DMA_control_port_slave_translator:uav_readdata -> SPI_DMA_control_port_slave_agent:m0_readdata
	wire          spi_dma_control_port_slave_agent_m0_waitrequest;                                       // SPI_DMA_control_port_slave_translator:uav_waitrequest -> SPI_DMA_control_port_slave_agent:m0_waitrequest
	wire          spi_dma_control_port_slave_agent_m0_debugaccess;                                       // SPI_DMA_control_port_slave_agent:m0_debugaccess -> SPI_DMA_control_port_slave_translator:uav_debugaccess
	wire   [19:0] spi_dma_control_port_slave_agent_m0_address;                                           // SPI_DMA_control_port_slave_agent:m0_address -> SPI_DMA_control_port_slave_translator:uav_address
	wire    [3:0] spi_dma_control_port_slave_agent_m0_byteenable;                                        // SPI_DMA_control_port_slave_agent:m0_byteenable -> SPI_DMA_control_port_slave_translator:uav_byteenable
	wire          spi_dma_control_port_slave_agent_m0_read;                                              // SPI_DMA_control_port_slave_agent:m0_read -> SPI_DMA_control_port_slave_translator:uav_read
	wire          spi_dma_control_port_slave_agent_m0_readdatavalid;                                     // SPI_DMA_control_port_slave_translator:uav_readdatavalid -> SPI_DMA_control_port_slave_agent:m0_readdatavalid
	wire          spi_dma_control_port_slave_agent_m0_lock;                                              // SPI_DMA_control_port_slave_agent:m0_lock -> SPI_DMA_control_port_slave_translator:uav_lock
	wire   [31:0] spi_dma_control_port_slave_agent_m0_writedata;                                         // SPI_DMA_control_port_slave_agent:m0_writedata -> SPI_DMA_control_port_slave_translator:uav_writedata
	wire          spi_dma_control_port_slave_agent_m0_write;                                             // SPI_DMA_control_port_slave_agent:m0_write -> SPI_DMA_control_port_slave_translator:uav_write
	wire    [2:0] spi_dma_control_port_slave_agent_m0_burstcount;                                        // SPI_DMA_control_port_slave_agent:m0_burstcount -> SPI_DMA_control_port_slave_translator:uav_burstcount
	wire          spi_dma_control_port_slave_agent_rf_source_valid;                                      // SPI_DMA_control_port_slave_agent:rf_source_valid -> SPI_DMA_control_port_slave_agent_rsp_fifo:in_valid
	wire  [105:0] spi_dma_control_port_slave_agent_rf_source_data;                                       // SPI_DMA_control_port_slave_agent:rf_source_data -> SPI_DMA_control_port_slave_agent_rsp_fifo:in_data
	wire          spi_dma_control_port_slave_agent_rf_source_ready;                                      // SPI_DMA_control_port_slave_agent_rsp_fifo:in_ready -> SPI_DMA_control_port_slave_agent:rf_source_ready
	wire          spi_dma_control_port_slave_agent_rf_source_startofpacket;                              // SPI_DMA_control_port_slave_agent:rf_source_startofpacket -> SPI_DMA_control_port_slave_agent_rsp_fifo:in_startofpacket
	wire          spi_dma_control_port_slave_agent_rf_source_endofpacket;                                // SPI_DMA_control_port_slave_agent:rf_source_endofpacket -> SPI_DMA_control_port_slave_agent_rsp_fifo:in_endofpacket
	wire          spi_dma_control_port_slave_agent_rsp_fifo_out_valid;                                   // SPI_DMA_control_port_slave_agent_rsp_fifo:out_valid -> SPI_DMA_control_port_slave_agent:rf_sink_valid
	wire  [105:0] spi_dma_control_port_slave_agent_rsp_fifo_out_data;                                    // SPI_DMA_control_port_slave_agent_rsp_fifo:out_data -> SPI_DMA_control_port_slave_agent:rf_sink_data
	wire          spi_dma_control_port_slave_agent_rsp_fifo_out_ready;                                   // SPI_DMA_control_port_slave_agent:rf_sink_ready -> SPI_DMA_control_port_slave_agent_rsp_fifo:out_ready
	wire          spi_dma_control_port_slave_agent_rsp_fifo_out_startofpacket;                           // SPI_DMA_control_port_slave_agent_rsp_fifo:out_startofpacket -> SPI_DMA_control_port_slave_agent:rf_sink_startofpacket
	wire          spi_dma_control_port_slave_agent_rsp_fifo_out_endofpacket;                             // SPI_DMA_control_port_slave_agent_rsp_fifo:out_endofpacket -> SPI_DMA_control_port_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_033_src_valid;                                                                 // cmd_mux_033:src_valid -> SPI_DMA_control_port_slave_agent:cp_valid
	wire  [104:0] cmd_mux_033_src_data;                                                                  // cmd_mux_033:src_data -> SPI_DMA_control_port_slave_agent:cp_data
	wire          cmd_mux_033_src_ready;                                                                 // SPI_DMA_control_port_slave_agent:cp_ready -> cmd_mux_033:src_ready
	wire   [46:0] cmd_mux_033_src_channel;                                                               // cmd_mux_033:src_channel -> SPI_DMA_control_port_slave_agent:cp_channel
	wire          cmd_mux_033_src_startofpacket;                                                         // cmd_mux_033:src_startofpacket -> SPI_DMA_control_port_slave_agent:cp_startofpacket
	wire          cmd_mux_033_src_endofpacket;                                                           // cmd_mux_033:src_endofpacket -> SPI_DMA_control_port_slave_agent:cp_endofpacket
	wire   [31:0] flash_csr_agent_m0_readdata;                                                           // FLASH_csr_translator:uav_readdata -> FLASH_csr_agent:m0_readdata
	wire          flash_csr_agent_m0_waitrequest;                                                        // FLASH_csr_translator:uav_waitrequest -> FLASH_csr_agent:m0_waitrequest
	wire          flash_csr_agent_m0_debugaccess;                                                        // FLASH_csr_agent:m0_debugaccess -> FLASH_csr_translator:uav_debugaccess
	wire   [19:0] flash_csr_agent_m0_address;                                                            // FLASH_csr_agent:m0_address -> FLASH_csr_translator:uav_address
	wire    [3:0] flash_csr_agent_m0_byteenable;                                                         // FLASH_csr_agent:m0_byteenable -> FLASH_csr_translator:uav_byteenable
	wire          flash_csr_agent_m0_read;                                                               // FLASH_csr_agent:m0_read -> FLASH_csr_translator:uav_read
	wire          flash_csr_agent_m0_readdatavalid;                                                      // FLASH_csr_translator:uav_readdatavalid -> FLASH_csr_agent:m0_readdatavalid
	wire          flash_csr_agent_m0_lock;                                                               // FLASH_csr_agent:m0_lock -> FLASH_csr_translator:uav_lock
	wire   [31:0] flash_csr_agent_m0_writedata;                                                          // FLASH_csr_agent:m0_writedata -> FLASH_csr_translator:uav_writedata
	wire          flash_csr_agent_m0_write;                                                              // FLASH_csr_agent:m0_write -> FLASH_csr_translator:uav_write
	wire    [2:0] flash_csr_agent_m0_burstcount;                                                         // FLASH_csr_agent:m0_burstcount -> FLASH_csr_translator:uav_burstcount
	wire          flash_csr_agent_rf_source_valid;                                                       // FLASH_csr_agent:rf_source_valid -> FLASH_csr_agent_rsp_fifo:in_valid
	wire  [105:0] flash_csr_agent_rf_source_data;                                                        // FLASH_csr_agent:rf_source_data -> FLASH_csr_agent_rsp_fifo:in_data
	wire          flash_csr_agent_rf_source_ready;                                                       // FLASH_csr_agent_rsp_fifo:in_ready -> FLASH_csr_agent:rf_source_ready
	wire          flash_csr_agent_rf_source_startofpacket;                                               // FLASH_csr_agent:rf_source_startofpacket -> FLASH_csr_agent_rsp_fifo:in_startofpacket
	wire          flash_csr_agent_rf_source_endofpacket;                                                 // FLASH_csr_agent:rf_source_endofpacket -> FLASH_csr_agent_rsp_fifo:in_endofpacket
	wire          flash_csr_agent_rsp_fifo_out_valid;                                                    // FLASH_csr_agent_rsp_fifo:out_valid -> FLASH_csr_agent:rf_sink_valid
	wire  [105:0] flash_csr_agent_rsp_fifo_out_data;                                                     // FLASH_csr_agent_rsp_fifo:out_data -> FLASH_csr_agent:rf_sink_data
	wire          flash_csr_agent_rsp_fifo_out_ready;                                                    // FLASH_csr_agent:rf_sink_ready -> FLASH_csr_agent_rsp_fifo:out_ready
	wire          flash_csr_agent_rsp_fifo_out_startofpacket;                                            // FLASH_csr_agent_rsp_fifo:out_startofpacket -> FLASH_csr_agent:rf_sink_startofpacket
	wire          flash_csr_agent_rsp_fifo_out_endofpacket;                                              // FLASH_csr_agent_rsp_fifo:out_endofpacket -> FLASH_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_034_src_valid;                                                                 // cmd_mux_034:src_valid -> FLASH_csr_agent:cp_valid
	wire  [104:0] cmd_mux_034_src_data;                                                                  // cmd_mux_034:src_data -> FLASH_csr_agent:cp_data
	wire          cmd_mux_034_src_ready;                                                                 // FLASH_csr_agent:cp_ready -> cmd_mux_034:src_ready
	wire   [46:0] cmd_mux_034_src_channel;                                                               // cmd_mux_034:src_channel -> FLASH_csr_agent:cp_channel
	wire          cmd_mux_034_src_startofpacket;                                                         // cmd_mux_034:src_startofpacket -> FLASH_csr_agent:cp_startofpacket
	wire          cmd_mux_034_src_endofpacket;                                                           // cmd_mux_034:src_endofpacket -> FLASH_csr_agent:cp_endofpacket
	wire   [31:0] flash_data_agent_m0_readdata;                                                          // FLASH_data_translator:uav_readdata -> FLASH_data_agent:m0_readdata
	wire          flash_data_agent_m0_waitrequest;                                                       // FLASH_data_translator:uav_waitrequest -> FLASH_data_agent:m0_waitrequest
	wire          flash_data_agent_m0_debugaccess;                                                       // FLASH_data_agent:m0_debugaccess -> FLASH_data_translator:uav_debugaccess
	wire   [19:0] flash_data_agent_m0_address;                                                           // FLASH_data_agent:m0_address -> FLASH_data_translator:uav_address
	wire    [3:0] flash_data_agent_m0_byteenable;                                                        // FLASH_data_agent:m0_byteenable -> FLASH_data_translator:uav_byteenable
	wire          flash_data_agent_m0_read;                                                              // FLASH_data_agent:m0_read -> FLASH_data_translator:uav_read
	wire          flash_data_agent_m0_readdatavalid;                                                     // FLASH_data_translator:uav_readdatavalid -> FLASH_data_agent:m0_readdatavalid
	wire          flash_data_agent_m0_lock;                                                              // FLASH_data_agent:m0_lock -> FLASH_data_translator:uav_lock
	wire   [31:0] flash_data_agent_m0_writedata;                                                         // FLASH_data_agent:m0_writedata -> FLASH_data_translator:uav_writedata
	wire          flash_data_agent_m0_write;                                                             // FLASH_data_agent:m0_write -> FLASH_data_translator:uav_write
	wire    [5:0] flash_data_agent_m0_burstcount;                                                        // FLASH_data_agent:m0_burstcount -> FLASH_data_translator:uav_burstcount
	wire          flash_data_agent_rf_source_valid;                                                      // FLASH_data_agent:rf_source_valid -> FLASH_data_agent_rsp_fifo:in_valid
	wire  [105:0] flash_data_agent_rf_source_data;                                                       // FLASH_data_agent:rf_source_data -> FLASH_data_agent_rsp_fifo:in_data
	wire          flash_data_agent_rf_source_ready;                                                      // FLASH_data_agent_rsp_fifo:in_ready -> FLASH_data_agent:rf_source_ready
	wire          flash_data_agent_rf_source_startofpacket;                                              // FLASH_data_agent:rf_source_startofpacket -> FLASH_data_agent_rsp_fifo:in_startofpacket
	wire          flash_data_agent_rf_source_endofpacket;                                                // FLASH_data_agent:rf_source_endofpacket -> FLASH_data_agent_rsp_fifo:in_endofpacket
	wire          flash_data_agent_rsp_fifo_out_valid;                                                   // FLASH_data_agent_rsp_fifo:out_valid -> FLASH_data_agent:rf_sink_valid
	wire  [105:0] flash_data_agent_rsp_fifo_out_data;                                                    // FLASH_data_agent_rsp_fifo:out_data -> FLASH_data_agent:rf_sink_data
	wire          flash_data_agent_rsp_fifo_out_ready;                                                   // FLASH_data_agent:rf_sink_ready -> FLASH_data_agent_rsp_fifo:out_ready
	wire          flash_data_agent_rsp_fifo_out_startofpacket;                                           // FLASH_data_agent_rsp_fifo:out_startofpacket -> FLASH_data_agent:rf_sink_startofpacket
	wire          flash_data_agent_rsp_fifo_out_endofpacket;                                             // FLASH_data_agent_rsp_fifo:out_endofpacket -> FLASH_data_agent:rf_sink_endofpacket
	wire          cmd_mux_035_src_valid;                                                                 // cmd_mux_035:src_valid -> FLASH_data_agent:cp_valid
	wire  [104:0] cmd_mux_035_src_data;                                                                  // cmd_mux_035:src_data -> FLASH_data_agent:cp_data
	wire          cmd_mux_035_src_ready;                                                                 // FLASH_data_agent:cp_ready -> cmd_mux_035:src_ready
	wire   [46:0] cmd_mux_035_src_channel;                                                               // cmd_mux_035:src_channel -> FLASH_data_agent:cp_channel
	wire          cmd_mux_035_src_startofpacket;                                                         // cmd_mux_035:src_startofpacket -> FLASH_data_agent:cp_startofpacket
	wire          cmd_mux_035_src_endofpacket;                                                           // cmd_mux_035:src_endofpacket -> FLASH_data_agent:cp_endofpacket
	wire   [31:0] nios_cpu_debug_mem_slave_agent_m0_readdata;                                            // NIOS_CPU_debug_mem_slave_translator:uav_readdata -> NIOS_CPU_debug_mem_slave_agent:m0_readdata
	wire          nios_cpu_debug_mem_slave_agent_m0_waitrequest;                                         // NIOS_CPU_debug_mem_slave_translator:uav_waitrequest -> NIOS_CPU_debug_mem_slave_agent:m0_waitrequest
	wire          nios_cpu_debug_mem_slave_agent_m0_debugaccess;                                         // NIOS_CPU_debug_mem_slave_agent:m0_debugaccess -> NIOS_CPU_debug_mem_slave_translator:uav_debugaccess
	wire   [19:0] nios_cpu_debug_mem_slave_agent_m0_address;                                             // NIOS_CPU_debug_mem_slave_agent:m0_address -> NIOS_CPU_debug_mem_slave_translator:uav_address
	wire    [3:0] nios_cpu_debug_mem_slave_agent_m0_byteenable;                                          // NIOS_CPU_debug_mem_slave_agent:m0_byteenable -> NIOS_CPU_debug_mem_slave_translator:uav_byteenable
	wire          nios_cpu_debug_mem_slave_agent_m0_read;                                                // NIOS_CPU_debug_mem_slave_agent:m0_read -> NIOS_CPU_debug_mem_slave_translator:uav_read
	wire          nios_cpu_debug_mem_slave_agent_m0_readdatavalid;                                       // NIOS_CPU_debug_mem_slave_translator:uav_readdatavalid -> NIOS_CPU_debug_mem_slave_agent:m0_readdatavalid
	wire          nios_cpu_debug_mem_slave_agent_m0_lock;                                                // NIOS_CPU_debug_mem_slave_agent:m0_lock -> NIOS_CPU_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios_cpu_debug_mem_slave_agent_m0_writedata;                                           // NIOS_CPU_debug_mem_slave_agent:m0_writedata -> NIOS_CPU_debug_mem_slave_translator:uav_writedata
	wire          nios_cpu_debug_mem_slave_agent_m0_write;                                               // NIOS_CPU_debug_mem_slave_agent:m0_write -> NIOS_CPU_debug_mem_slave_translator:uav_write
	wire    [2:0] nios_cpu_debug_mem_slave_agent_m0_burstcount;                                          // NIOS_CPU_debug_mem_slave_agent:m0_burstcount -> NIOS_CPU_debug_mem_slave_translator:uav_burstcount
	wire          nios_cpu_debug_mem_slave_agent_rf_source_valid;                                        // NIOS_CPU_debug_mem_slave_agent:rf_source_valid -> NIOS_CPU_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [105:0] nios_cpu_debug_mem_slave_agent_rf_source_data;                                         // NIOS_CPU_debug_mem_slave_agent:rf_source_data -> NIOS_CPU_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios_cpu_debug_mem_slave_agent_rf_source_ready;                                        // NIOS_CPU_debug_mem_slave_agent_rsp_fifo:in_ready -> NIOS_CPU_debug_mem_slave_agent:rf_source_ready
	wire          nios_cpu_debug_mem_slave_agent_rf_source_startofpacket;                                // NIOS_CPU_debug_mem_slave_agent:rf_source_startofpacket -> NIOS_CPU_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios_cpu_debug_mem_slave_agent_rf_source_endofpacket;                                  // NIOS_CPU_debug_mem_slave_agent:rf_source_endofpacket -> NIOS_CPU_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios_cpu_debug_mem_slave_agent_rsp_fifo_out_valid;                                     // NIOS_CPU_debug_mem_slave_agent_rsp_fifo:out_valid -> NIOS_CPU_debug_mem_slave_agent:rf_sink_valid
	wire  [105:0] nios_cpu_debug_mem_slave_agent_rsp_fifo_out_data;                                      // NIOS_CPU_debug_mem_slave_agent_rsp_fifo:out_data -> NIOS_CPU_debug_mem_slave_agent:rf_sink_data
	wire          nios_cpu_debug_mem_slave_agent_rsp_fifo_out_ready;                                     // NIOS_CPU_debug_mem_slave_agent:rf_sink_ready -> NIOS_CPU_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios_cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                             // NIOS_CPU_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> NIOS_CPU_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios_cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                               // NIOS_CPU_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> NIOS_CPU_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_036_src_valid;                                                                 // cmd_mux_036:src_valid -> NIOS_CPU_debug_mem_slave_agent:cp_valid
	wire  [104:0] cmd_mux_036_src_data;                                                                  // cmd_mux_036:src_data -> NIOS_CPU_debug_mem_slave_agent:cp_data
	wire          cmd_mux_036_src_ready;                                                                 // NIOS_CPU_debug_mem_slave_agent:cp_ready -> cmd_mux_036:src_ready
	wire   [46:0] cmd_mux_036_src_channel;                                                               // cmd_mux_036:src_channel -> NIOS_CPU_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_036_src_startofpacket;                                                         // cmd_mux_036:src_startofpacket -> NIOS_CPU_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_036_src_endofpacket;                                                           // cmd_mux_036:src_endofpacket -> NIOS_CPU_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] ram_24k_s1_agent_m0_readdata;                                                          // RAM_24K_s1_translator:uav_readdata -> RAM_24K_s1_agent:m0_readdata
	wire          ram_24k_s1_agent_m0_waitrequest;                                                       // RAM_24K_s1_translator:uav_waitrequest -> RAM_24K_s1_agent:m0_waitrequest
	wire          ram_24k_s1_agent_m0_debugaccess;                                                       // RAM_24K_s1_agent:m0_debugaccess -> RAM_24K_s1_translator:uav_debugaccess
	wire   [19:0] ram_24k_s1_agent_m0_address;                                                           // RAM_24K_s1_agent:m0_address -> RAM_24K_s1_translator:uav_address
	wire    [3:0] ram_24k_s1_agent_m0_byteenable;                                                        // RAM_24K_s1_agent:m0_byteenable -> RAM_24K_s1_translator:uav_byteenable
	wire          ram_24k_s1_agent_m0_read;                                                              // RAM_24K_s1_agent:m0_read -> RAM_24K_s1_translator:uav_read
	wire          ram_24k_s1_agent_m0_readdatavalid;                                                     // RAM_24K_s1_translator:uav_readdatavalid -> RAM_24K_s1_agent:m0_readdatavalid
	wire          ram_24k_s1_agent_m0_lock;                                                              // RAM_24K_s1_agent:m0_lock -> RAM_24K_s1_translator:uav_lock
	wire   [31:0] ram_24k_s1_agent_m0_writedata;                                                         // RAM_24K_s1_agent:m0_writedata -> RAM_24K_s1_translator:uav_writedata
	wire          ram_24k_s1_agent_m0_write;                                                             // RAM_24K_s1_agent:m0_write -> RAM_24K_s1_translator:uav_write
	wire    [2:0] ram_24k_s1_agent_m0_burstcount;                                                        // RAM_24K_s1_agent:m0_burstcount -> RAM_24K_s1_translator:uav_burstcount
	wire          ram_24k_s1_agent_rf_source_valid;                                                      // RAM_24K_s1_agent:rf_source_valid -> RAM_24K_s1_agent_rsp_fifo:in_valid
	wire  [105:0] ram_24k_s1_agent_rf_source_data;                                                       // RAM_24K_s1_agent:rf_source_data -> RAM_24K_s1_agent_rsp_fifo:in_data
	wire          ram_24k_s1_agent_rf_source_ready;                                                      // RAM_24K_s1_agent_rsp_fifo:in_ready -> RAM_24K_s1_agent:rf_source_ready
	wire          ram_24k_s1_agent_rf_source_startofpacket;                                              // RAM_24K_s1_agent:rf_source_startofpacket -> RAM_24K_s1_agent_rsp_fifo:in_startofpacket
	wire          ram_24k_s1_agent_rf_source_endofpacket;                                                // RAM_24K_s1_agent:rf_source_endofpacket -> RAM_24K_s1_agent_rsp_fifo:in_endofpacket
	wire          ram_24k_s1_agent_rsp_fifo_out_valid;                                                   // RAM_24K_s1_agent_rsp_fifo:out_valid -> RAM_24K_s1_agent:rf_sink_valid
	wire  [105:0] ram_24k_s1_agent_rsp_fifo_out_data;                                                    // RAM_24K_s1_agent_rsp_fifo:out_data -> RAM_24K_s1_agent:rf_sink_data
	wire          ram_24k_s1_agent_rsp_fifo_out_ready;                                                   // RAM_24K_s1_agent:rf_sink_ready -> RAM_24K_s1_agent_rsp_fifo:out_ready
	wire          ram_24k_s1_agent_rsp_fifo_out_startofpacket;                                           // RAM_24K_s1_agent_rsp_fifo:out_startofpacket -> RAM_24K_s1_agent:rf_sink_startofpacket
	wire          ram_24k_s1_agent_rsp_fifo_out_endofpacket;                                             // RAM_24K_s1_agent_rsp_fifo:out_endofpacket -> RAM_24K_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_037_src_valid;                                                                 // cmd_mux_037:src_valid -> RAM_24K_s1_agent:cp_valid
	wire  [104:0] cmd_mux_037_src_data;                                                                  // cmd_mux_037:src_data -> RAM_24K_s1_agent:cp_data
	wire          cmd_mux_037_src_ready;                                                                 // RAM_24K_s1_agent:cp_ready -> cmd_mux_037:src_ready
	wire   [46:0] cmd_mux_037_src_channel;                                                               // cmd_mux_037:src_channel -> RAM_24K_s1_agent:cp_channel
	wire          cmd_mux_037_src_startofpacket;                                                         // cmd_mux_037:src_startofpacket -> RAM_24K_s1_agent:cp_startofpacket
	wire          cmd_mux_037_src_endofpacket;                                                           // cmd_mux_037:src_endofpacket -> RAM_24K_s1_agent:cp_endofpacket
	wire   [31:0] pio_led_debug_s1_agent_m0_readdata;                                                    // PIO_LED_DEBUG_s1_translator:uav_readdata -> PIO_LED_DEBUG_s1_agent:m0_readdata
	wire          pio_led_debug_s1_agent_m0_waitrequest;                                                 // PIO_LED_DEBUG_s1_translator:uav_waitrequest -> PIO_LED_DEBUG_s1_agent:m0_waitrequest
	wire          pio_led_debug_s1_agent_m0_debugaccess;                                                 // PIO_LED_DEBUG_s1_agent:m0_debugaccess -> PIO_LED_DEBUG_s1_translator:uav_debugaccess
	wire   [19:0] pio_led_debug_s1_agent_m0_address;                                                     // PIO_LED_DEBUG_s1_agent:m0_address -> PIO_LED_DEBUG_s1_translator:uav_address
	wire    [3:0] pio_led_debug_s1_agent_m0_byteenable;                                                  // PIO_LED_DEBUG_s1_agent:m0_byteenable -> PIO_LED_DEBUG_s1_translator:uav_byteenable
	wire          pio_led_debug_s1_agent_m0_read;                                                        // PIO_LED_DEBUG_s1_agent:m0_read -> PIO_LED_DEBUG_s1_translator:uav_read
	wire          pio_led_debug_s1_agent_m0_readdatavalid;                                               // PIO_LED_DEBUG_s1_translator:uav_readdatavalid -> PIO_LED_DEBUG_s1_agent:m0_readdatavalid
	wire          pio_led_debug_s1_agent_m0_lock;                                                        // PIO_LED_DEBUG_s1_agent:m0_lock -> PIO_LED_DEBUG_s1_translator:uav_lock
	wire   [31:0] pio_led_debug_s1_agent_m0_writedata;                                                   // PIO_LED_DEBUG_s1_agent:m0_writedata -> PIO_LED_DEBUG_s1_translator:uav_writedata
	wire          pio_led_debug_s1_agent_m0_write;                                                       // PIO_LED_DEBUG_s1_agent:m0_write -> PIO_LED_DEBUG_s1_translator:uav_write
	wire    [2:0] pio_led_debug_s1_agent_m0_burstcount;                                                  // PIO_LED_DEBUG_s1_agent:m0_burstcount -> PIO_LED_DEBUG_s1_translator:uav_burstcount
	wire          pio_led_debug_s1_agent_rf_source_valid;                                                // PIO_LED_DEBUG_s1_agent:rf_source_valid -> PIO_LED_DEBUG_s1_agent_rsp_fifo:in_valid
	wire  [105:0] pio_led_debug_s1_agent_rf_source_data;                                                 // PIO_LED_DEBUG_s1_agent:rf_source_data -> PIO_LED_DEBUG_s1_agent_rsp_fifo:in_data
	wire          pio_led_debug_s1_agent_rf_source_ready;                                                // PIO_LED_DEBUG_s1_agent_rsp_fifo:in_ready -> PIO_LED_DEBUG_s1_agent:rf_source_ready
	wire          pio_led_debug_s1_agent_rf_source_startofpacket;                                        // PIO_LED_DEBUG_s1_agent:rf_source_startofpacket -> PIO_LED_DEBUG_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_led_debug_s1_agent_rf_source_endofpacket;                                          // PIO_LED_DEBUG_s1_agent:rf_source_endofpacket -> PIO_LED_DEBUG_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_led_debug_s1_agent_rsp_fifo_out_valid;                                             // PIO_LED_DEBUG_s1_agent_rsp_fifo:out_valid -> PIO_LED_DEBUG_s1_agent:rf_sink_valid
	wire  [105:0] pio_led_debug_s1_agent_rsp_fifo_out_data;                                              // PIO_LED_DEBUG_s1_agent_rsp_fifo:out_data -> PIO_LED_DEBUG_s1_agent:rf_sink_data
	wire          pio_led_debug_s1_agent_rsp_fifo_out_ready;                                             // PIO_LED_DEBUG_s1_agent:rf_sink_ready -> PIO_LED_DEBUG_s1_agent_rsp_fifo:out_ready
	wire          pio_led_debug_s1_agent_rsp_fifo_out_startofpacket;                                     // PIO_LED_DEBUG_s1_agent_rsp_fifo:out_startofpacket -> PIO_LED_DEBUG_s1_agent:rf_sink_startofpacket
	wire          pio_led_debug_s1_agent_rsp_fifo_out_endofpacket;                                       // PIO_LED_DEBUG_s1_agent_rsp_fifo:out_endofpacket -> PIO_LED_DEBUG_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_038_src_valid;                                                                 // cmd_mux_038:src_valid -> PIO_LED_DEBUG_s1_agent:cp_valid
	wire  [104:0] cmd_mux_038_src_data;                                                                  // cmd_mux_038:src_data -> PIO_LED_DEBUG_s1_agent:cp_data
	wire          cmd_mux_038_src_ready;                                                                 // PIO_LED_DEBUG_s1_agent:cp_ready -> cmd_mux_038:src_ready
	wire   [46:0] cmd_mux_038_src_channel;                                                               // cmd_mux_038:src_channel -> PIO_LED_DEBUG_s1_agent:cp_channel
	wire          cmd_mux_038_src_startofpacket;                                                         // cmd_mux_038:src_startofpacket -> PIO_LED_DEBUG_s1_agent:cp_startofpacket
	wire          cmd_mux_038_src_endofpacket;                                                           // cmd_mux_038:src_endofpacket -> PIO_LED_DEBUG_s1_agent:cp_endofpacket
	wire   [31:0] timer_delay_32bit_s1_agent_m0_readdata;                                                // TIMER_DELAY_32bit_s1_translator:uav_readdata -> TIMER_DELAY_32bit_s1_agent:m0_readdata
	wire          timer_delay_32bit_s1_agent_m0_waitrequest;                                             // TIMER_DELAY_32bit_s1_translator:uav_waitrequest -> TIMER_DELAY_32bit_s1_agent:m0_waitrequest
	wire          timer_delay_32bit_s1_agent_m0_debugaccess;                                             // TIMER_DELAY_32bit_s1_agent:m0_debugaccess -> TIMER_DELAY_32bit_s1_translator:uav_debugaccess
	wire   [19:0] timer_delay_32bit_s1_agent_m0_address;                                                 // TIMER_DELAY_32bit_s1_agent:m0_address -> TIMER_DELAY_32bit_s1_translator:uav_address
	wire    [3:0] timer_delay_32bit_s1_agent_m0_byteenable;                                              // TIMER_DELAY_32bit_s1_agent:m0_byteenable -> TIMER_DELAY_32bit_s1_translator:uav_byteenable
	wire          timer_delay_32bit_s1_agent_m0_read;                                                    // TIMER_DELAY_32bit_s1_agent:m0_read -> TIMER_DELAY_32bit_s1_translator:uav_read
	wire          timer_delay_32bit_s1_agent_m0_readdatavalid;                                           // TIMER_DELAY_32bit_s1_translator:uav_readdatavalid -> TIMER_DELAY_32bit_s1_agent:m0_readdatavalid
	wire          timer_delay_32bit_s1_agent_m0_lock;                                                    // TIMER_DELAY_32bit_s1_agent:m0_lock -> TIMER_DELAY_32bit_s1_translator:uav_lock
	wire   [31:0] timer_delay_32bit_s1_agent_m0_writedata;                                               // TIMER_DELAY_32bit_s1_agent:m0_writedata -> TIMER_DELAY_32bit_s1_translator:uav_writedata
	wire          timer_delay_32bit_s1_agent_m0_write;                                                   // TIMER_DELAY_32bit_s1_agent:m0_write -> TIMER_DELAY_32bit_s1_translator:uav_write
	wire    [2:0] timer_delay_32bit_s1_agent_m0_burstcount;                                              // TIMER_DELAY_32bit_s1_agent:m0_burstcount -> TIMER_DELAY_32bit_s1_translator:uav_burstcount
	wire          timer_delay_32bit_s1_agent_rf_source_valid;                                            // TIMER_DELAY_32bit_s1_agent:rf_source_valid -> TIMER_DELAY_32bit_s1_agent_rsp_fifo:in_valid
	wire  [105:0] timer_delay_32bit_s1_agent_rf_source_data;                                             // TIMER_DELAY_32bit_s1_agent:rf_source_data -> TIMER_DELAY_32bit_s1_agent_rsp_fifo:in_data
	wire          timer_delay_32bit_s1_agent_rf_source_ready;                                            // TIMER_DELAY_32bit_s1_agent_rsp_fifo:in_ready -> TIMER_DELAY_32bit_s1_agent:rf_source_ready
	wire          timer_delay_32bit_s1_agent_rf_source_startofpacket;                                    // TIMER_DELAY_32bit_s1_agent:rf_source_startofpacket -> TIMER_DELAY_32bit_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_delay_32bit_s1_agent_rf_source_endofpacket;                                      // TIMER_DELAY_32bit_s1_agent:rf_source_endofpacket -> TIMER_DELAY_32bit_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_delay_32bit_s1_agent_rsp_fifo_out_valid;                                         // TIMER_DELAY_32bit_s1_agent_rsp_fifo:out_valid -> TIMER_DELAY_32bit_s1_agent:rf_sink_valid
	wire  [105:0] timer_delay_32bit_s1_agent_rsp_fifo_out_data;                                          // TIMER_DELAY_32bit_s1_agent_rsp_fifo:out_data -> TIMER_DELAY_32bit_s1_agent:rf_sink_data
	wire          timer_delay_32bit_s1_agent_rsp_fifo_out_ready;                                         // TIMER_DELAY_32bit_s1_agent:rf_sink_ready -> TIMER_DELAY_32bit_s1_agent_rsp_fifo:out_ready
	wire          timer_delay_32bit_s1_agent_rsp_fifo_out_startofpacket;                                 // TIMER_DELAY_32bit_s1_agent_rsp_fifo:out_startofpacket -> TIMER_DELAY_32bit_s1_agent:rf_sink_startofpacket
	wire          timer_delay_32bit_s1_agent_rsp_fifo_out_endofpacket;                                   // TIMER_DELAY_32bit_s1_agent_rsp_fifo:out_endofpacket -> TIMER_DELAY_32bit_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_039_src_valid;                                                                 // cmd_mux_039:src_valid -> TIMER_DELAY_32bit_s1_agent:cp_valid
	wire  [104:0] cmd_mux_039_src_data;                                                                  // cmd_mux_039:src_data -> TIMER_DELAY_32bit_s1_agent:cp_data
	wire          cmd_mux_039_src_ready;                                                                 // TIMER_DELAY_32bit_s1_agent:cp_ready -> cmd_mux_039:src_ready
	wire   [46:0] cmd_mux_039_src_channel;                                                               // cmd_mux_039:src_channel -> TIMER_DELAY_32bit_s1_agent:cp_channel
	wire          cmd_mux_039_src_startofpacket;                                                         // cmd_mux_039:src_startofpacket -> TIMER_DELAY_32bit_s1_agent:cp_startofpacket
	wire          cmd_mux_039_src_endofpacket;                                                           // cmd_mux_039:src_endofpacket -> TIMER_DELAY_32bit_s1_agent:cp_endofpacket
	wire   [31:0] keypad_s1_agent_m0_readdata;                                                           // KEYPAD_s1_translator:uav_readdata -> KEYPAD_s1_agent:m0_readdata
	wire          keypad_s1_agent_m0_waitrequest;                                                        // KEYPAD_s1_translator:uav_waitrequest -> KEYPAD_s1_agent:m0_waitrequest
	wire          keypad_s1_agent_m0_debugaccess;                                                        // KEYPAD_s1_agent:m0_debugaccess -> KEYPAD_s1_translator:uav_debugaccess
	wire   [19:0] keypad_s1_agent_m0_address;                                                            // KEYPAD_s1_agent:m0_address -> KEYPAD_s1_translator:uav_address
	wire    [3:0] keypad_s1_agent_m0_byteenable;                                                         // KEYPAD_s1_agent:m0_byteenable -> KEYPAD_s1_translator:uav_byteenable
	wire          keypad_s1_agent_m0_read;                                                               // KEYPAD_s1_agent:m0_read -> KEYPAD_s1_translator:uav_read
	wire          keypad_s1_agent_m0_readdatavalid;                                                      // KEYPAD_s1_translator:uav_readdatavalid -> KEYPAD_s1_agent:m0_readdatavalid
	wire          keypad_s1_agent_m0_lock;                                                               // KEYPAD_s1_agent:m0_lock -> KEYPAD_s1_translator:uav_lock
	wire   [31:0] keypad_s1_agent_m0_writedata;                                                          // KEYPAD_s1_agent:m0_writedata -> KEYPAD_s1_translator:uav_writedata
	wire          keypad_s1_agent_m0_write;                                                              // KEYPAD_s1_agent:m0_write -> KEYPAD_s1_translator:uav_write
	wire    [2:0] keypad_s1_agent_m0_burstcount;                                                         // KEYPAD_s1_agent:m0_burstcount -> KEYPAD_s1_translator:uav_burstcount
	wire          keypad_s1_agent_rf_source_valid;                                                       // KEYPAD_s1_agent:rf_source_valid -> KEYPAD_s1_agent_rsp_fifo:in_valid
	wire  [105:0] keypad_s1_agent_rf_source_data;                                                        // KEYPAD_s1_agent:rf_source_data -> KEYPAD_s1_agent_rsp_fifo:in_data
	wire          keypad_s1_agent_rf_source_ready;                                                       // KEYPAD_s1_agent_rsp_fifo:in_ready -> KEYPAD_s1_agent:rf_source_ready
	wire          keypad_s1_agent_rf_source_startofpacket;                                               // KEYPAD_s1_agent:rf_source_startofpacket -> KEYPAD_s1_agent_rsp_fifo:in_startofpacket
	wire          keypad_s1_agent_rf_source_endofpacket;                                                 // KEYPAD_s1_agent:rf_source_endofpacket -> KEYPAD_s1_agent_rsp_fifo:in_endofpacket
	wire          keypad_s1_agent_rsp_fifo_out_valid;                                                    // KEYPAD_s1_agent_rsp_fifo:out_valid -> KEYPAD_s1_agent:rf_sink_valid
	wire  [105:0] keypad_s1_agent_rsp_fifo_out_data;                                                     // KEYPAD_s1_agent_rsp_fifo:out_data -> KEYPAD_s1_agent:rf_sink_data
	wire          keypad_s1_agent_rsp_fifo_out_ready;                                                    // KEYPAD_s1_agent:rf_sink_ready -> KEYPAD_s1_agent_rsp_fifo:out_ready
	wire          keypad_s1_agent_rsp_fifo_out_startofpacket;                                            // KEYPAD_s1_agent_rsp_fifo:out_startofpacket -> KEYPAD_s1_agent:rf_sink_startofpacket
	wire          keypad_s1_agent_rsp_fifo_out_endofpacket;                                              // KEYPAD_s1_agent_rsp_fifo:out_endofpacket -> KEYPAD_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_040_src_valid;                                                                 // cmd_mux_040:src_valid -> KEYPAD_s1_agent:cp_valid
	wire  [104:0] cmd_mux_040_src_data;                                                                  // cmd_mux_040:src_data -> KEYPAD_s1_agent:cp_data
	wire          cmd_mux_040_src_ready;                                                                 // KEYPAD_s1_agent:cp_ready -> cmd_mux_040:src_ready
	wire   [46:0] cmd_mux_040_src_channel;                                                               // cmd_mux_040:src_channel -> KEYPAD_s1_agent:cp_channel
	wire          cmd_mux_040_src_startofpacket;                                                         // cmd_mux_040:src_startofpacket -> KEYPAD_s1_agent:cp_startofpacket
	wire          cmd_mux_040_src_endofpacket;                                                           // cmd_mux_040:src_endofpacket -> KEYPAD_s1_agent:cp_endofpacket
	wire   [31:0] btn_display_s1_agent_m0_readdata;                                                      // BTN_DISPLAY_s1_translator:uav_readdata -> BTN_DISPLAY_s1_agent:m0_readdata
	wire          btn_display_s1_agent_m0_waitrequest;                                                   // BTN_DISPLAY_s1_translator:uav_waitrequest -> BTN_DISPLAY_s1_agent:m0_waitrequest
	wire          btn_display_s1_agent_m0_debugaccess;                                                   // BTN_DISPLAY_s1_agent:m0_debugaccess -> BTN_DISPLAY_s1_translator:uav_debugaccess
	wire   [19:0] btn_display_s1_agent_m0_address;                                                       // BTN_DISPLAY_s1_agent:m0_address -> BTN_DISPLAY_s1_translator:uav_address
	wire    [3:0] btn_display_s1_agent_m0_byteenable;                                                    // BTN_DISPLAY_s1_agent:m0_byteenable -> BTN_DISPLAY_s1_translator:uav_byteenable
	wire          btn_display_s1_agent_m0_read;                                                          // BTN_DISPLAY_s1_agent:m0_read -> BTN_DISPLAY_s1_translator:uav_read
	wire          btn_display_s1_agent_m0_readdatavalid;                                                 // BTN_DISPLAY_s1_translator:uav_readdatavalid -> BTN_DISPLAY_s1_agent:m0_readdatavalid
	wire          btn_display_s1_agent_m0_lock;                                                          // BTN_DISPLAY_s1_agent:m0_lock -> BTN_DISPLAY_s1_translator:uav_lock
	wire   [31:0] btn_display_s1_agent_m0_writedata;                                                     // BTN_DISPLAY_s1_agent:m0_writedata -> BTN_DISPLAY_s1_translator:uav_writedata
	wire          btn_display_s1_agent_m0_write;                                                         // BTN_DISPLAY_s1_agent:m0_write -> BTN_DISPLAY_s1_translator:uav_write
	wire    [2:0] btn_display_s1_agent_m0_burstcount;                                                    // BTN_DISPLAY_s1_agent:m0_burstcount -> BTN_DISPLAY_s1_translator:uav_burstcount
	wire          btn_display_s1_agent_rf_source_valid;                                                  // BTN_DISPLAY_s1_agent:rf_source_valid -> BTN_DISPLAY_s1_agent_rsp_fifo:in_valid
	wire  [105:0] btn_display_s1_agent_rf_source_data;                                                   // BTN_DISPLAY_s1_agent:rf_source_data -> BTN_DISPLAY_s1_agent_rsp_fifo:in_data
	wire          btn_display_s1_agent_rf_source_ready;                                                  // BTN_DISPLAY_s1_agent_rsp_fifo:in_ready -> BTN_DISPLAY_s1_agent:rf_source_ready
	wire          btn_display_s1_agent_rf_source_startofpacket;                                          // BTN_DISPLAY_s1_agent:rf_source_startofpacket -> BTN_DISPLAY_s1_agent_rsp_fifo:in_startofpacket
	wire          btn_display_s1_agent_rf_source_endofpacket;                                            // BTN_DISPLAY_s1_agent:rf_source_endofpacket -> BTN_DISPLAY_s1_agent_rsp_fifo:in_endofpacket
	wire          btn_display_s1_agent_rsp_fifo_out_valid;                                               // BTN_DISPLAY_s1_agent_rsp_fifo:out_valid -> BTN_DISPLAY_s1_agent:rf_sink_valid
	wire  [105:0] btn_display_s1_agent_rsp_fifo_out_data;                                                // BTN_DISPLAY_s1_agent_rsp_fifo:out_data -> BTN_DISPLAY_s1_agent:rf_sink_data
	wire          btn_display_s1_agent_rsp_fifo_out_ready;                                               // BTN_DISPLAY_s1_agent:rf_sink_ready -> BTN_DISPLAY_s1_agent_rsp_fifo:out_ready
	wire          btn_display_s1_agent_rsp_fifo_out_startofpacket;                                       // BTN_DISPLAY_s1_agent_rsp_fifo:out_startofpacket -> BTN_DISPLAY_s1_agent:rf_sink_startofpacket
	wire          btn_display_s1_agent_rsp_fifo_out_endofpacket;                                         // BTN_DISPLAY_s1_agent_rsp_fifo:out_endofpacket -> BTN_DISPLAY_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_041_src_valid;                                                                 // cmd_mux_041:src_valid -> BTN_DISPLAY_s1_agent:cp_valid
	wire  [104:0] cmd_mux_041_src_data;                                                                  // cmd_mux_041:src_data -> BTN_DISPLAY_s1_agent:cp_data
	wire          cmd_mux_041_src_ready;                                                                 // BTN_DISPLAY_s1_agent:cp_ready -> cmd_mux_041:src_ready
	wire   [46:0] cmd_mux_041_src_channel;                                                               // cmd_mux_041:src_channel -> BTN_DISPLAY_s1_agent:cp_channel
	wire          cmd_mux_041_src_startofpacket;                                                         // cmd_mux_041:src_startofpacket -> BTN_DISPLAY_s1_agent:cp_startofpacket
	wire          cmd_mux_041_src_endofpacket;                                                           // cmd_mux_041:src_endofpacket -> BTN_DISPLAY_s1_agent:cp_endofpacket
	wire   [31:0] btn_encoder_s1_agent_m0_readdata;                                                      // BTN_ENCODER_s1_translator:uav_readdata -> BTN_ENCODER_s1_agent:m0_readdata
	wire          btn_encoder_s1_agent_m0_waitrequest;                                                   // BTN_ENCODER_s1_translator:uav_waitrequest -> BTN_ENCODER_s1_agent:m0_waitrequest
	wire          btn_encoder_s1_agent_m0_debugaccess;                                                   // BTN_ENCODER_s1_agent:m0_debugaccess -> BTN_ENCODER_s1_translator:uav_debugaccess
	wire   [19:0] btn_encoder_s1_agent_m0_address;                                                       // BTN_ENCODER_s1_agent:m0_address -> BTN_ENCODER_s1_translator:uav_address
	wire    [3:0] btn_encoder_s1_agent_m0_byteenable;                                                    // BTN_ENCODER_s1_agent:m0_byteenable -> BTN_ENCODER_s1_translator:uav_byteenable
	wire          btn_encoder_s1_agent_m0_read;                                                          // BTN_ENCODER_s1_agent:m0_read -> BTN_ENCODER_s1_translator:uav_read
	wire          btn_encoder_s1_agent_m0_readdatavalid;                                                 // BTN_ENCODER_s1_translator:uav_readdatavalid -> BTN_ENCODER_s1_agent:m0_readdatavalid
	wire          btn_encoder_s1_agent_m0_lock;                                                          // BTN_ENCODER_s1_agent:m0_lock -> BTN_ENCODER_s1_translator:uav_lock
	wire   [31:0] btn_encoder_s1_agent_m0_writedata;                                                     // BTN_ENCODER_s1_agent:m0_writedata -> BTN_ENCODER_s1_translator:uav_writedata
	wire          btn_encoder_s1_agent_m0_write;                                                         // BTN_ENCODER_s1_agent:m0_write -> BTN_ENCODER_s1_translator:uav_write
	wire    [2:0] btn_encoder_s1_agent_m0_burstcount;                                                    // BTN_ENCODER_s1_agent:m0_burstcount -> BTN_ENCODER_s1_translator:uav_burstcount
	wire          btn_encoder_s1_agent_rf_source_valid;                                                  // BTN_ENCODER_s1_agent:rf_source_valid -> BTN_ENCODER_s1_agent_rsp_fifo:in_valid
	wire  [105:0] btn_encoder_s1_agent_rf_source_data;                                                   // BTN_ENCODER_s1_agent:rf_source_data -> BTN_ENCODER_s1_agent_rsp_fifo:in_data
	wire          btn_encoder_s1_agent_rf_source_ready;                                                  // BTN_ENCODER_s1_agent_rsp_fifo:in_ready -> BTN_ENCODER_s1_agent:rf_source_ready
	wire          btn_encoder_s1_agent_rf_source_startofpacket;                                          // BTN_ENCODER_s1_agent:rf_source_startofpacket -> BTN_ENCODER_s1_agent_rsp_fifo:in_startofpacket
	wire          btn_encoder_s1_agent_rf_source_endofpacket;                                            // BTN_ENCODER_s1_agent:rf_source_endofpacket -> BTN_ENCODER_s1_agent_rsp_fifo:in_endofpacket
	wire          btn_encoder_s1_agent_rsp_fifo_out_valid;                                               // BTN_ENCODER_s1_agent_rsp_fifo:out_valid -> BTN_ENCODER_s1_agent:rf_sink_valid
	wire  [105:0] btn_encoder_s1_agent_rsp_fifo_out_data;                                                // BTN_ENCODER_s1_agent_rsp_fifo:out_data -> BTN_ENCODER_s1_agent:rf_sink_data
	wire          btn_encoder_s1_agent_rsp_fifo_out_ready;                                               // BTN_ENCODER_s1_agent:rf_sink_ready -> BTN_ENCODER_s1_agent_rsp_fifo:out_ready
	wire          btn_encoder_s1_agent_rsp_fifo_out_startofpacket;                                       // BTN_ENCODER_s1_agent_rsp_fifo:out_startofpacket -> BTN_ENCODER_s1_agent:rf_sink_startofpacket
	wire          btn_encoder_s1_agent_rsp_fifo_out_endofpacket;                                         // BTN_ENCODER_s1_agent_rsp_fifo:out_endofpacket -> BTN_ENCODER_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_042_src_valid;                                                                 // cmd_mux_042:src_valid -> BTN_ENCODER_s1_agent:cp_valid
	wire  [104:0] cmd_mux_042_src_data;                                                                  // cmd_mux_042:src_data -> BTN_ENCODER_s1_agent:cp_data
	wire          cmd_mux_042_src_ready;                                                                 // BTN_ENCODER_s1_agent:cp_ready -> cmd_mux_042:src_ready
	wire   [46:0] cmd_mux_042_src_channel;                                                               // cmd_mux_042:src_channel -> BTN_ENCODER_s1_agent:cp_channel
	wire          cmd_mux_042_src_startofpacket;                                                         // cmd_mux_042:src_startofpacket -> BTN_ENCODER_s1_agent:cp_startofpacket
	wire          cmd_mux_042_src_endofpacket;                                                           // cmd_mux_042:src_endofpacket -> BTN_ENCODER_s1_agent:cp_endofpacket
	wire   [31:0] btn_ch_onoff_s1_agent_m0_readdata;                                                     // BTN_CH_ONOFF_s1_translator:uav_readdata -> BTN_CH_ONOFF_s1_agent:m0_readdata
	wire          btn_ch_onoff_s1_agent_m0_waitrequest;                                                  // BTN_CH_ONOFF_s1_translator:uav_waitrequest -> BTN_CH_ONOFF_s1_agent:m0_waitrequest
	wire          btn_ch_onoff_s1_agent_m0_debugaccess;                                                  // BTN_CH_ONOFF_s1_agent:m0_debugaccess -> BTN_CH_ONOFF_s1_translator:uav_debugaccess
	wire   [19:0] btn_ch_onoff_s1_agent_m0_address;                                                      // BTN_CH_ONOFF_s1_agent:m0_address -> BTN_CH_ONOFF_s1_translator:uav_address
	wire    [3:0] btn_ch_onoff_s1_agent_m0_byteenable;                                                   // BTN_CH_ONOFF_s1_agent:m0_byteenable -> BTN_CH_ONOFF_s1_translator:uav_byteenable
	wire          btn_ch_onoff_s1_agent_m0_read;                                                         // BTN_CH_ONOFF_s1_agent:m0_read -> BTN_CH_ONOFF_s1_translator:uav_read
	wire          btn_ch_onoff_s1_agent_m0_readdatavalid;                                                // BTN_CH_ONOFF_s1_translator:uav_readdatavalid -> BTN_CH_ONOFF_s1_agent:m0_readdatavalid
	wire          btn_ch_onoff_s1_agent_m0_lock;                                                         // BTN_CH_ONOFF_s1_agent:m0_lock -> BTN_CH_ONOFF_s1_translator:uav_lock
	wire   [31:0] btn_ch_onoff_s1_agent_m0_writedata;                                                    // BTN_CH_ONOFF_s1_agent:m0_writedata -> BTN_CH_ONOFF_s1_translator:uav_writedata
	wire          btn_ch_onoff_s1_agent_m0_write;                                                        // BTN_CH_ONOFF_s1_agent:m0_write -> BTN_CH_ONOFF_s1_translator:uav_write
	wire    [2:0] btn_ch_onoff_s1_agent_m0_burstcount;                                                   // BTN_CH_ONOFF_s1_agent:m0_burstcount -> BTN_CH_ONOFF_s1_translator:uav_burstcount
	wire          btn_ch_onoff_s1_agent_rf_source_valid;                                                 // BTN_CH_ONOFF_s1_agent:rf_source_valid -> BTN_CH_ONOFF_s1_agent_rsp_fifo:in_valid
	wire  [105:0] btn_ch_onoff_s1_agent_rf_source_data;                                                  // BTN_CH_ONOFF_s1_agent:rf_source_data -> BTN_CH_ONOFF_s1_agent_rsp_fifo:in_data
	wire          btn_ch_onoff_s1_agent_rf_source_ready;                                                 // BTN_CH_ONOFF_s1_agent_rsp_fifo:in_ready -> BTN_CH_ONOFF_s1_agent:rf_source_ready
	wire          btn_ch_onoff_s1_agent_rf_source_startofpacket;                                         // BTN_CH_ONOFF_s1_agent:rf_source_startofpacket -> BTN_CH_ONOFF_s1_agent_rsp_fifo:in_startofpacket
	wire          btn_ch_onoff_s1_agent_rf_source_endofpacket;                                           // BTN_CH_ONOFF_s1_agent:rf_source_endofpacket -> BTN_CH_ONOFF_s1_agent_rsp_fifo:in_endofpacket
	wire          btn_ch_onoff_s1_agent_rsp_fifo_out_valid;                                              // BTN_CH_ONOFF_s1_agent_rsp_fifo:out_valid -> BTN_CH_ONOFF_s1_agent:rf_sink_valid
	wire  [105:0] btn_ch_onoff_s1_agent_rsp_fifo_out_data;                                               // BTN_CH_ONOFF_s1_agent_rsp_fifo:out_data -> BTN_CH_ONOFF_s1_agent:rf_sink_data
	wire          btn_ch_onoff_s1_agent_rsp_fifo_out_ready;                                              // BTN_CH_ONOFF_s1_agent:rf_sink_ready -> BTN_CH_ONOFF_s1_agent_rsp_fifo:out_ready
	wire          btn_ch_onoff_s1_agent_rsp_fifo_out_startofpacket;                                      // BTN_CH_ONOFF_s1_agent_rsp_fifo:out_startofpacket -> BTN_CH_ONOFF_s1_agent:rf_sink_startofpacket
	wire          btn_ch_onoff_s1_agent_rsp_fifo_out_endofpacket;                                        // BTN_CH_ONOFF_s1_agent_rsp_fifo:out_endofpacket -> BTN_CH_ONOFF_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_043_src_valid;                                                                 // cmd_mux_043:src_valid -> BTN_CH_ONOFF_s1_agent:cp_valid
	wire  [104:0] cmd_mux_043_src_data;                                                                  // cmd_mux_043:src_data -> BTN_CH_ONOFF_s1_agent:cp_data
	wire          cmd_mux_043_src_ready;                                                                 // BTN_CH_ONOFF_s1_agent:cp_ready -> cmd_mux_043:src_ready
	wire   [46:0] cmd_mux_043_src_channel;                                                               // cmd_mux_043:src_channel -> BTN_CH_ONOFF_s1_agent:cp_channel
	wire          cmd_mux_043_src_startofpacket;                                                         // cmd_mux_043:src_startofpacket -> BTN_CH_ONOFF_s1_agent:cp_startofpacket
	wire          cmd_mux_043_src_endofpacket;                                                           // cmd_mux_043:src_endofpacket -> BTN_CH_ONOFF_s1_agent:cp_endofpacket
	wire   [31:0] dds_reset_s1_agent_m0_readdata;                                                        // DDS_RESET_s1_translator:uav_readdata -> DDS_RESET_s1_agent:m0_readdata
	wire          dds_reset_s1_agent_m0_waitrequest;                                                     // DDS_RESET_s1_translator:uav_waitrequest -> DDS_RESET_s1_agent:m0_waitrequest
	wire          dds_reset_s1_agent_m0_debugaccess;                                                     // DDS_RESET_s1_agent:m0_debugaccess -> DDS_RESET_s1_translator:uav_debugaccess
	wire   [19:0] dds_reset_s1_agent_m0_address;                                                         // DDS_RESET_s1_agent:m0_address -> DDS_RESET_s1_translator:uav_address
	wire    [3:0] dds_reset_s1_agent_m0_byteenable;                                                      // DDS_RESET_s1_agent:m0_byteenable -> DDS_RESET_s1_translator:uav_byteenable
	wire          dds_reset_s1_agent_m0_read;                                                            // DDS_RESET_s1_agent:m0_read -> DDS_RESET_s1_translator:uav_read
	wire          dds_reset_s1_agent_m0_readdatavalid;                                                   // DDS_RESET_s1_translator:uav_readdatavalid -> DDS_RESET_s1_agent:m0_readdatavalid
	wire          dds_reset_s1_agent_m0_lock;                                                            // DDS_RESET_s1_agent:m0_lock -> DDS_RESET_s1_translator:uav_lock
	wire   [31:0] dds_reset_s1_agent_m0_writedata;                                                       // DDS_RESET_s1_agent:m0_writedata -> DDS_RESET_s1_translator:uav_writedata
	wire          dds_reset_s1_agent_m0_write;                                                           // DDS_RESET_s1_agent:m0_write -> DDS_RESET_s1_translator:uav_write
	wire    [2:0] dds_reset_s1_agent_m0_burstcount;                                                      // DDS_RESET_s1_agent:m0_burstcount -> DDS_RESET_s1_translator:uav_burstcount
	wire          dds_reset_s1_agent_rf_source_valid;                                                    // DDS_RESET_s1_agent:rf_source_valid -> DDS_RESET_s1_agent_rsp_fifo:in_valid
	wire  [105:0] dds_reset_s1_agent_rf_source_data;                                                     // DDS_RESET_s1_agent:rf_source_data -> DDS_RESET_s1_agent_rsp_fifo:in_data
	wire          dds_reset_s1_agent_rf_source_ready;                                                    // DDS_RESET_s1_agent_rsp_fifo:in_ready -> DDS_RESET_s1_agent:rf_source_ready
	wire          dds_reset_s1_agent_rf_source_startofpacket;                                            // DDS_RESET_s1_agent:rf_source_startofpacket -> DDS_RESET_s1_agent_rsp_fifo:in_startofpacket
	wire          dds_reset_s1_agent_rf_source_endofpacket;                                              // DDS_RESET_s1_agent:rf_source_endofpacket -> DDS_RESET_s1_agent_rsp_fifo:in_endofpacket
	wire          dds_reset_s1_agent_rsp_fifo_out_valid;                                                 // DDS_RESET_s1_agent_rsp_fifo:out_valid -> DDS_RESET_s1_agent:rf_sink_valid
	wire  [105:0] dds_reset_s1_agent_rsp_fifo_out_data;                                                  // DDS_RESET_s1_agent_rsp_fifo:out_data -> DDS_RESET_s1_agent:rf_sink_data
	wire          dds_reset_s1_agent_rsp_fifo_out_ready;                                                 // DDS_RESET_s1_agent:rf_sink_ready -> DDS_RESET_s1_agent_rsp_fifo:out_ready
	wire          dds_reset_s1_agent_rsp_fifo_out_startofpacket;                                         // DDS_RESET_s1_agent_rsp_fifo:out_startofpacket -> DDS_RESET_s1_agent:rf_sink_startofpacket
	wire          dds_reset_s1_agent_rsp_fifo_out_endofpacket;                                           // DDS_RESET_s1_agent_rsp_fifo:out_endofpacket -> DDS_RESET_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_044_src_valid;                                                                 // cmd_mux_044:src_valid -> DDS_RESET_s1_agent:cp_valid
	wire  [104:0] cmd_mux_044_src_data;                                                                  // cmd_mux_044:src_data -> DDS_RESET_s1_agent:cp_data
	wire          cmd_mux_044_src_ready;                                                                 // DDS_RESET_s1_agent:cp_ready -> cmd_mux_044:src_ready
	wire   [46:0] cmd_mux_044_src_channel;                                                               // cmd_mux_044:src_channel -> DDS_RESET_s1_agent:cp_channel
	wire          cmd_mux_044_src_startofpacket;                                                         // cmd_mux_044:src_startofpacket -> DDS_RESET_s1_agent:cp_startofpacket
	wire          cmd_mux_044_src_endofpacket;                                                           // cmd_mux_044:src_endofpacket -> DDS_RESET_s1_agent:cp_endofpacket
	wire   [31:0] lookup_ram_isr_s1_agent_m0_readdata;                                                   // LOOKUP_RAM_ISR_s1_translator:uav_readdata -> LOOKUP_RAM_ISR_s1_agent:m0_readdata
	wire          lookup_ram_isr_s1_agent_m0_waitrequest;                                                // LOOKUP_RAM_ISR_s1_translator:uav_waitrequest -> LOOKUP_RAM_ISR_s1_agent:m0_waitrequest
	wire          lookup_ram_isr_s1_agent_m0_debugaccess;                                                // LOOKUP_RAM_ISR_s1_agent:m0_debugaccess -> LOOKUP_RAM_ISR_s1_translator:uav_debugaccess
	wire   [19:0] lookup_ram_isr_s1_agent_m0_address;                                                    // LOOKUP_RAM_ISR_s1_agent:m0_address -> LOOKUP_RAM_ISR_s1_translator:uav_address
	wire    [3:0] lookup_ram_isr_s1_agent_m0_byteenable;                                                 // LOOKUP_RAM_ISR_s1_agent:m0_byteenable -> LOOKUP_RAM_ISR_s1_translator:uav_byteenable
	wire          lookup_ram_isr_s1_agent_m0_read;                                                       // LOOKUP_RAM_ISR_s1_agent:m0_read -> LOOKUP_RAM_ISR_s1_translator:uav_read
	wire          lookup_ram_isr_s1_agent_m0_readdatavalid;                                              // LOOKUP_RAM_ISR_s1_translator:uav_readdatavalid -> LOOKUP_RAM_ISR_s1_agent:m0_readdatavalid
	wire          lookup_ram_isr_s1_agent_m0_lock;                                                       // LOOKUP_RAM_ISR_s1_agent:m0_lock -> LOOKUP_RAM_ISR_s1_translator:uav_lock
	wire   [31:0] lookup_ram_isr_s1_agent_m0_writedata;                                                  // LOOKUP_RAM_ISR_s1_agent:m0_writedata -> LOOKUP_RAM_ISR_s1_translator:uav_writedata
	wire          lookup_ram_isr_s1_agent_m0_write;                                                      // LOOKUP_RAM_ISR_s1_agent:m0_write -> LOOKUP_RAM_ISR_s1_translator:uav_write
	wire    [2:0] lookup_ram_isr_s1_agent_m0_burstcount;                                                 // LOOKUP_RAM_ISR_s1_agent:m0_burstcount -> LOOKUP_RAM_ISR_s1_translator:uav_burstcount
	wire          lookup_ram_isr_s1_agent_rf_source_valid;                                               // LOOKUP_RAM_ISR_s1_agent:rf_source_valid -> LOOKUP_RAM_ISR_s1_agent_rsp_fifo:in_valid
	wire  [105:0] lookup_ram_isr_s1_agent_rf_source_data;                                                // LOOKUP_RAM_ISR_s1_agent:rf_source_data -> LOOKUP_RAM_ISR_s1_agent_rsp_fifo:in_data
	wire          lookup_ram_isr_s1_agent_rf_source_ready;                                               // LOOKUP_RAM_ISR_s1_agent_rsp_fifo:in_ready -> LOOKUP_RAM_ISR_s1_agent:rf_source_ready
	wire          lookup_ram_isr_s1_agent_rf_source_startofpacket;                                       // LOOKUP_RAM_ISR_s1_agent:rf_source_startofpacket -> LOOKUP_RAM_ISR_s1_agent_rsp_fifo:in_startofpacket
	wire          lookup_ram_isr_s1_agent_rf_source_endofpacket;                                         // LOOKUP_RAM_ISR_s1_agent:rf_source_endofpacket -> LOOKUP_RAM_ISR_s1_agent_rsp_fifo:in_endofpacket
	wire          lookup_ram_isr_s1_agent_rsp_fifo_out_valid;                                            // LOOKUP_RAM_ISR_s1_agent_rsp_fifo:out_valid -> LOOKUP_RAM_ISR_s1_agent:rf_sink_valid
	wire  [105:0] lookup_ram_isr_s1_agent_rsp_fifo_out_data;                                             // LOOKUP_RAM_ISR_s1_agent_rsp_fifo:out_data -> LOOKUP_RAM_ISR_s1_agent:rf_sink_data
	wire          lookup_ram_isr_s1_agent_rsp_fifo_out_ready;                                            // LOOKUP_RAM_ISR_s1_agent:rf_sink_ready -> LOOKUP_RAM_ISR_s1_agent_rsp_fifo:out_ready
	wire          lookup_ram_isr_s1_agent_rsp_fifo_out_startofpacket;                                    // LOOKUP_RAM_ISR_s1_agent_rsp_fifo:out_startofpacket -> LOOKUP_RAM_ISR_s1_agent:rf_sink_startofpacket
	wire          lookup_ram_isr_s1_agent_rsp_fifo_out_endofpacket;                                      // LOOKUP_RAM_ISR_s1_agent_rsp_fifo:out_endofpacket -> LOOKUP_RAM_ISR_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_045_src_valid;                                                                 // cmd_mux_045:src_valid -> LOOKUP_RAM_ISR_s1_agent:cp_valid
	wire  [104:0] cmd_mux_045_src_data;                                                                  // cmd_mux_045:src_data -> LOOKUP_RAM_ISR_s1_agent:cp_data
	wire          cmd_mux_045_src_ready;                                                                 // LOOKUP_RAM_ISR_s1_agent:cp_ready -> cmd_mux_045:src_ready
	wire   [46:0] cmd_mux_045_src_channel;                                                               // cmd_mux_045:src_channel -> LOOKUP_RAM_ISR_s1_agent:cp_channel
	wire          cmd_mux_045_src_startofpacket;                                                         // cmd_mux_045:src_startofpacket -> LOOKUP_RAM_ISR_s1_agent:cp_startofpacket
	wire          cmd_mux_045_src_endofpacket;                                                           // cmd_mux_045:src_endofpacket -> LOOKUP_RAM_ISR_s1_agent:cp_endofpacket
	wire   [31:0] sd_spi_spi_control_port_agent_m0_readdata;                                             // SD_SPI_spi_control_port_translator:uav_readdata -> SD_SPI_spi_control_port_agent:m0_readdata
	wire          sd_spi_spi_control_port_agent_m0_waitrequest;                                          // SD_SPI_spi_control_port_translator:uav_waitrequest -> SD_SPI_spi_control_port_agent:m0_waitrequest
	wire          sd_spi_spi_control_port_agent_m0_debugaccess;                                          // SD_SPI_spi_control_port_agent:m0_debugaccess -> SD_SPI_spi_control_port_translator:uav_debugaccess
	wire   [19:0] sd_spi_spi_control_port_agent_m0_address;                                              // SD_SPI_spi_control_port_agent:m0_address -> SD_SPI_spi_control_port_translator:uav_address
	wire    [3:0] sd_spi_spi_control_port_agent_m0_byteenable;                                           // SD_SPI_spi_control_port_agent:m0_byteenable -> SD_SPI_spi_control_port_translator:uav_byteenable
	wire          sd_spi_spi_control_port_agent_m0_read;                                                 // SD_SPI_spi_control_port_agent:m0_read -> SD_SPI_spi_control_port_translator:uav_read
	wire          sd_spi_spi_control_port_agent_m0_readdatavalid;                                        // SD_SPI_spi_control_port_translator:uav_readdatavalid -> SD_SPI_spi_control_port_agent:m0_readdatavalid
	wire          sd_spi_spi_control_port_agent_m0_lock;                                                 // SD_SPI_spi_control_port_agent:m0_lock -> SD_SPI_spi_control_port_translator:uav_lock
	wire   [31:0] sd_spi_spi_control_port_agent_m0_writedata;                                            // SD_SPI_spi_control_port_agent:m0_writedata -> SD_SPI_spi_control_port_translator:uav_writedata
	wire          sd_spi_spi_control_port_agent_m0_write;                                                // SD_SPI_spi_control_port_agent:m0_write -> SD_SPI_spi_control_port_translator:uav_write
	wire    [2:0] sd_spi_spi_control_port_agent_m0_burstcount;                                           // SD_SPI_spi_control_port_agent:m0_burstcount -> SD_SPI_spi_control_port_translator:uav_burstcount
	wire          sd_spi_spi_control_port_agent_rf_source_valid;                                         // SD_SPI_spi_control_port_agent:rf_source_valid -> SD_SPI_spi_control_port_agent_rsp_fifo:in_valid
	wire  [105:0] sd_spi_spi_control_port_agent_rf_source_data;                                          // SD_SPI_spi_control_port_agent:rf_source_data -> SD_SPI_spi_control_port_agent_rsp_fifo:in_data
	wire          sd_spi_spi_control_port_agent_rf_source_ready;                                         // SD_SPI_spi_control_port_agent_rsp_fifo:in_ready -> SD_SPI_spi_control_port_agent:rf_source_ready
	wire          sd_spi_spi_control_port_agent_rf_source_startofpacket;                                 // SD_SPI_spi_control_port_agent:rf_source_startofpacket -> SD_SPI_spi_control_port_agent_rsp_fifo:in_startofpacket
	wire          sd_spi_spi_control_port_agent_rf_source_endofpacket;                                   // SD_SPI_spi_control_port_agent:rf_source_endofpacket -> SD_SPI_spi_control_port_agent_rsp_fifo:in_endofpacket
	wire          sd_spi_spi_control_port_agent_rsp_fifo_out_valid;                                      // SD_SPI_spi_control_port_agent_rsp_fifo:out_valid -> SD_SPI_spi_control_port_agent:rf_sink_valid
	wire  [105:0] sd_spi_spi_control_port_agent_rsp_fifo_out_data;                                       // SD_SPI_spi_control_port_agent_rsp_fifo:out_data -> SD_SPI_spi_control_port_agent:rf_sink_data
	wire          sd_spi_spi_control_port_agent_rsp_fifo_out_ready;                                      // SD_SPI_spi_control_port_agent:rf_sink_ready -> SD_SPI_spi_control_port_agent_rsp_fifo:out_ready
	wire          sd_spi_spi_control_port_agent_rsp_fifo_out_startofpacket;                              // SD_SPI_spi_control_port_agent_rsp_fifo:out_startofpacket -> SD_SPI_spi_control_port_agent:rf_sink_startofpacket
	wire          sd_spi_spi_control_port_agent_rsp_fifo_out_endofpacket;                                // SD_SPI_spi_control_port_agent_rsp_fifo:out_endofpacket -> SD_SPI_spi_control_port_agent:rf_sink_endofpacket
	wire          cmd_mux_046_src_valid;                                                                 // cmd_mux_046:src_valid -> SD_SPI_spi_control_port_agent:cp_valid
	wire  [104:0] cmd_mux_046_src_data;                                                                  // cmd_mux_046:src_data -> SD_SPI_spi_control_port_agent:cp_data
	wire          cmd_mux_046_src_ready;                                                                 // SD_SPI_spi_control_port_agent:cp_ready -> cmd_mux_046:src_ready
	wire   [46:0] cmd_mux_046_src_channel;                                                               // cmd_mux_046:src_channel -> SD_SPI_spi_control_port_agent:cp_channel
	wire          cmd_mux_046_src_startofpacket;                                                         // cmd_mux_046:src_startofpacket -> SD_SPI_spi_control_port_agent:cp_startofpacket
	wire          cmd_mux_046_src_endofpacket;                                                           // cmd_mux_046:src_endofpacket -> SD_SPI_spi_control_port_agent:cp_endofpacket
	wire          nios_cpu_data_master_agent_cp_valid;                                                   // NIOS_CPU_data_master_agent:cp_valid -> router:sink_valid
	wire  [104:0] nios_cpu_data_master_agent_cp_data;                                                    // NIOS_CPU_data_master_agent:cp_data -> router:sink_data
	wire          nios_cpu_data_master_agent_cp_ready;                                                   // router:sink_ready -> NIOS_CPU_data_master_agent:cp_ready
	wire          nios_cpu_data_master_agent_cp_startofpacket;                                           // NIOS_CPU_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          nios_cpu_data_master_agent_cp_endofpacket;                                             // NIOS_CPU_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                      // router:src_valid -> cmd_demux:sink_valid
	wire  [104:0] router_src_data;                                                                       // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                      // cmd_demux:sink_ready -> router:src_ready
	wire   [46:0] router_src_channel;                                                                    // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                              // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          lcd_dma_read_master_agent_cp_valid;                                                    // LCD_DMA_read_master_agent:cp_valid -> router_001:sink_valid
	wire   [77:0] lcd_dma_read_master_agent_cp_data;                                                     // LCD_DMA_read_master_agent:cp_data -> router_001:sink_data
	wire          lcd_dma_read_master_agent_cp_ready;                                                    // router_001:sink_ready -> LCD_DMA_read_master_agent:cp_ready
	wire          lcd_dma_read_master_agent_cp_startofpacket;                                            // LCD_DMA_read_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          lcd_dma_read_master_agent_cp_endofpacket;                                              // LCD_DMA_read_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                  // router_001:src_valid -> cmd_demux_001:sink_valid
	wire   [77:0] router_001_src_data;                                                                   // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                                  // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [46:0] router_001_src_channel;                                                                // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                          // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                            // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          spi_dma_write_master_agent_cp_valid;                                                   // SPI_DMA_write_master_agent:cp_valid -> router_002:sink_valid
	wire   [77:0] spi_dma_write_master_agent_cp_data;                                                    // SPI_DMA_write_master_agent:cp_data -> router_002:sink_data
	wire          spi_dma_write_master_agent_cp_ready;                                                   // router_002:sink_ready -> SPI_DMA_write_master_agent:cp_ready
	wire          spi_dma_write_master_agent_cp_startofpacket;                                           // SPI_DMA_write_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          spi_dma_write_master_agent_cp_endofpacket;                                             // SPI_DMA_write_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                  // router_002:src_valid -> cmd_demux_002:sink_valid
	wire   [77:0] router_002_src_data;                                                                   // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                                  // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [46:0] router_002_src_channel;                                                                // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                          // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                            // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          nios_cpu_instruction_master_agent_cp_valid;                                            // NIOS_CPU_instruction_master_agent:cp_valid -> router_003:sink_valid
	wire  [104:0] nios_cpu_instruction_master_agent_cp_data;                                             // NIOS_CPU_instruction_master_agent:cp_data -> router_003:sink_data
	wire          nios_cpu_instruction_master_agent_cp_ready;                                            // router_003:sink_ready -> NIOS_CPU_instruction_master_agent:cp_ready
	wire          nios_cpu_instruction_master_agent_cp_startofpacket;                                    // NIOS_CPU_instruction_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          nios_cpu_instruction_master_agent_cp_endofpacket;                                      // NIOS_CPU_instruction_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                  // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [104:0] router_003_src_data;                                                                   // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                                  // cmd_demux_003:sink_ready -> router_003:src_ready
	wire   [46:0] router_003_src_channel;                                                                // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                          // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                            // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          dds0_am_modindex_s1_agent_rp_valid;                                                    // DDS0_AM_ModIndex_s1_agent:rp_valid -> router_004:sink_valid
	wire  [104:0] dds0_am_modindex_s1_agent_rp_data;                                                     // DDS0_AM_ModIndex_s1_agent:rp_data -> router_004:sink_data
	wire          dds0_am_modindex_s1_agent_rp_ready;                                                    // router_004:sink_ready -> DDS0_AM_ModIndex_s1_agent:rp_ready
	wire          dds0_am_modindex_s1_agent_rp_startofpacket;                                            // DDS0_AM_ModIndex_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          dds0_am_modindex_s1_agent_rp_endofpacket;                                              // DDS0_AM_ModIndex_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                  // router_004:src_valid -> rsp_demux:sink_valid
	wire  [104:0] router_004_src_data;                                                                   // router_004:src_data -> rsp_demux:sink_data
	wire          router_004_src_ready;                                                                  // rsp_demux:sink_ready -> router_004:src_ready
	wire   [46:0] router_004_src_channel;                                                                // router_004:src_channel -> rsp_demux:sink_channel
	wire          router_004_src_startofpacket;                                                          // router_004:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_004_src_endofpacket;                                                            // router_004:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          dds1_am_modindex_s1_agent_rp_valid;                                                    // DDS1_AM_ModIndex_s1_agent:rp_valid -> router_005:sink_valid
	wire  [104:0] dds1_am_modindex_s1_agent_rp_data;                                                     // DDS1_AM_ModIndex_s1_agent:rp_data -> router_005:sink_data
	wire          dds1_am_modindex_s1_agent_rp_ready;                                                    // router_005:sink_ready -> DDS1_AM_ModIndex_s1_agent:rp_ready
	wire          dds1_am_modindex_s1_agent_rp_startofpacket;                                            // DDS1_AM_ModIndex_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          dds1_am_modindex_s1_agent_rp_endofpacket;                                              // DDS1_AM_ModIndex_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                  // router_005:src_valid -> rsp_demux_001:sink_valid
	wire  [104:0] router_005_src_data;                                                                   // router_005:src_data -> rsp_demux_001:sink_data
	wire          router_005_src_ready;                                                                  // rsp_demux_001:sink_ready -> router_005:src_ready
	wire   [46:0] router_005_src_channel;                                                                // router_005:src_channel -> rsp_demux_001:sink_channel
	wire          router_005_src_startofpacket;                                                          // router_005:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_005_src_endofpacket;                                                            // router_005:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          dds0_am_modphasestep_s1_agent_rp_valid;                                                // DDS0_AM_ModPhaseStep_s1_agent:rp_valid -> router_006:sink_valid
	wire  [104:0] dds0_am_modphasestep_s1_agent_rp_data;                                                 // DDS0_AM_ModPhaseStep_s1_agent:rp_data -> router_006:sink_data
	wire          dds0_am_modphasestep_s1_agent_rp_ready;                                                // router_006:sink_ready -> DDS0_AM_ModPhaseStep_s1_agent:rp_ready
	wire          dds0_am_modphasestep_s1_agent_rp_startofpacket;                                        // DDS0_AM_ModPhaseStep_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          dds0_am_modphasestep_s1_agent_rp_endofpacket;                                          // DDS0_AM_ModPhaseStep_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                  // router_006:src_valid -> rsp_demux_002:sink_valid
	wire  [104:0] router_006_src_data;                                                                   // router_006:src_data -> rsp_demux_002:sink_data
	wire          router_006_src_ready;                                                                  // rsp_demux_002:sink_ready -> router_006:src_ready
	wire   [46:0] router_006_src_channel;                                                                // router_006:src_channel -> rsp_demux_002:sink_channel
	wire          router_006_src_startofpacket;                                                          // router_006:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_006_src_endofpacket;                                                            // router_006:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          dds1_am_modphasestep_s1_agent_rp_valid;                                                // DDS1_AM_ModPhaseStep_s1_agent:rp_valid -> router_007:sink_valid
	wire  [104:0] dds1_am_modphasestep_s1_agent_rp_data;                                                 // DDS1_AM_ModPhaseStep_s1_agent:rp_data -> router_007:sink_data
	wire          dds1_am_modphasestep_s1_agent_rp_ready;                                                // router_007:sink_ready -> DDS1_AM_ModPhaseStep_s1_agent:rp_ready
	wire          dds1_am_modphasestep_s1_agent_rp_startofpacket;                                        // DDS1_AM_ModPhaseStep_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          dds1_am_modphasestep_s1_agent_rp_endofpacket;                                          // DDS1_AM_ModPhaseStep_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                  // router_007:src_valid -> rsp_demux_003:sink_valid
	wire  [104:0] router_007_src_data;                                                                   // router_007:src_data -> rsp_demux_003:sink_data
	wire          router_007_src_ready;                                                                  // rsp_demux_003:sink_ready -> router_007:src_ready
	wire   [46:0] router_007_src_channel;                                                                // router_007:src_channel -> rsp_demux_003:sink_channel
	wire          router_007_src_startofpacket;                                                          // router_007:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_007_src_endofpacket;                                                            // router_007:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          lcd_backlight_pwm_s1_agent_rp_valid;                                                   // LCD_BackLight_PWM_s1_agent:rp_valid -> router_008:sink_valid
	wire  [104:0] lcd_backlight_pwm_s1_agent_rp_data;                                                    // LCD_BackLight_PWM_s1_agent:rp_data -> router_008:sink_data
	wire          lcd_backlight_pwm_s1_agent_rp_ready;                                                   // router_008:sink_ready -> LCD_BackLight_PWM_s1_agent:rp_ready
	wire          lcd_backlight_pwm_s1_agent_rp_startofpacket;                                           // LCD_BackLight_PWM_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          lcd_backlight_pwm_s1_agent_rp_endofpacket;                                             // LCD_BackLight_PWM_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                  // router_008:src_valid -> rsp_demux_004:sink_valid
	wire  [104:0] router_008_src_data;                                                                   // router_008:src_data -> rsp_demux_004:sink_data
	wire          router_008_src_ready;                                                                  // rsp_demux_004:sink_ready -> router_008:src_ready
	wire   [46:0] router_008_src_channel;                                                                // router_008:src_channel -> rsp_demux_004:sink_channel
	wire          router_008_src_startofpacket;                                                          // router_008:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_008_src_endofpacket;                                                            // router_008:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          lcd_control_s1_agent_rp_valid;                                                         // LCD_Control_s1_agent:rp_valid -> router_009:sink_valid
	wire  [104:0] lcd_control_s1_agent_rp_data;                                                          // LCD_Control_s1_agent:rp_data -> router_009:sink_data
	wire          lcd_control_s1_agent_rp_ready;                                                         // router_009:sink_ready -> LCD_Control_s1_agent:rp_ready
	wire          lcd_control_s1_agent_rp_startofpacket;                                                 // LCD_Control_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          lcd_control_s1_agent_rp_endofpacket;                                                   // LCD_Control_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                  // router_009:src_valid -> rsp_demux_005:sink_valid
	wire  [104:0] router_009_src_data;                                                                   // router_009:src_data -> rsp_demux_005:sink_data
	wire          router_009_src_ready;                                                                  // rsp_demux_005:sink_ready -> router_009:src_ready
	wire   [46:0] router_009_src_channel;                                                                // router_009:src_channel -> rsp_demux_005:sink_channel
	wire          router_009_src_startofpacket;                                                          // router_009:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_009_src_endofpacket;                                                            // router_009:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          lcd_data_s1_agent_rp_valid;                                                            // LCD_Data_s1_agent:rp_valid -> router_010:sink_valid
	wire  [104:0] lcd_data_s1_agent_rp_data;                                                             // LCD_Data_s1_agent:rp_data -> router_010:sink_data
	wire          lcd_data_s1_agent_rp_ready;                                                            // router_010:sink_ready -> LCD_Data_s1_agent:rp_ready
	wire          lcd_data_s1_agent_rp_startofpacket;                                                    // LCD_Data_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          lcd_data_s1_agent_rp_endofpacket;                                                      // LCD_Data_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                  // router_010:src_valid -> rsp_demux_006:sink_valid
	wire  [104:0] router_010_src_data;                                                                   // router_010:src_data -> rsp_demux_006:sink_data
	wire          router_010_src_ready;                                                                  // rsp_demux_006:sink_ready -> router_010:src_ready
	wire   [46:0] router_010_src_channel;                                                                // router_010:src_channel -> rsp_demux_006:sink_channel
	wire          router_010_src_startofpacket;                                                          // router_010:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_010_src_endofpacket;                                                            // router_010:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          dds0_fm_moddeviationphase_s1_agent_rp_valid;                                           // DDS0_FM_ModDeviationPhase_s1_agent:rp_valid -> router_011:sink_valid
	wire  [104:0] dds0_fm_moddeviationphase_s1_agent_rp_data;                                            // DDS0_FM_ModDeviationPhase_s1_agent:rp_data -> router_011:sink_data
	wire          dds0_fm_moddeviationphase_s1_agent_rp_ready;                                           // router_011:sink_ready -> DDS0_FM_ModDeviationPhase_s1_agent:rp_ready
	wire          dds0_fm_moddeviationphase_s1_agent_rp_startofpacket;                                   // DDS0_FM_ModDeviationPhase_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          dds0_fm_moddeviationphase_s1_agent_rp_endofpacket;                                     // DDS0_FM_ModDeviationPhase_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                  // router_011:src_valid -> rsp_demux_007:sink_valid
	wire  [104:0] router_011_src_data;                                                                   // router_011:src_data -> rsp_demux_007:sink_data
	wire          router_011_src_ready;                                                                  // rsp_demux_007:sink_ready -> router_011:src_ready
	wire   [46:0] router_011_src_channel;                                                                // router_011:src_channel -> rsp_demux_007:sink_channel
	wire          router_011_src_startofpacket;                                                          // router_011:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_011_src_endofpacket;                                                            // router_011:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          dds1_fm_moddeviationphase_s1_agent_rp_valid;                                           // DDS1_FM_ModDeviationPhase_s1_agent:rp_valid -> router_012:sink_valid
	wire  [104:0] dds1_fm_moddeviationphase_s1_agent_rp_data;                                            // DDS1_FM_ModDeviationPhase_s1_agent:rp_data -> router_012:sink_data
	wire          dds1_fm_moddeviationphase_s1_agent_rp_ready;                                           // router_012:sink_ready -> DDS1_FM_ModDeviationPhase_s1_agent:rp_ready
	wire          dds1_fm_moddeviationphase_s1_agent_rp_startofpacket;                                   // DDS1_FM_ModDeviationPhase_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          dds1_fm_moddeviationphase_s1_agent_rp_endofpacket;                                     // DDS1_FM_ModDeviationPhase_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                  // router_012:src_valid -> rsp_demux_008:sink_valid
	wire  [104:0] router_012_src_data;                                                                   // router_012:src_data -> rsp_demux_008:sink_data
	wire          router_012_src_ready;                                                                  // rsp_demux_008:sink_ready -> router_012:src_ready
	wire   [46:0] router_012_src_channel;                                                                // router_012:src_channel -> rsp_demux_008:sink_channel
	wire          router_012_src_startofpacket;                                                          // router_012:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_012_src_endofpacket;                                                            // router_012:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          dds0_fm_modphasestep_s1_agent_rp_valid;                                                // DDS0_FM_ModPhaseStep_s1_agent:rp_valid -> router_013:sink_valid
	wire  [104:0] dds0_fm_modphasestep_s1_agent_rp_data;                                                 // DDS0_FM_ModPhaseStep_s1_agent:rp_data -> router_013:sink_data
	wire          dds0_fm_modphasestep_s1_agent_rp_ready;                                                // router_013:sink_ready -> DDS0_FM_ModPhaseStep_s1_agent:rp_ready
	wire          dds0_fm_modphasestep_s1_agent_rp_startofpacket;                                        // DDS0_FM_ModPhaseStep_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          dds0_fm_modphasestep_s1_agent_rp_endofpacket;                                          // DDS0_FM_ModPhaseStep_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                  // router_013:src_valid -> rsp_demux_009:sink_valid
	wire  [104:0] router_013_src_data;                                                                   // router_013:src_data -> rsp_demux_009:sink_data
	wire          router_013_src_ready;                                                                  // rsp_demux_009:sink_ready -> router_013:src_ready
	wire   [46:0] router_013_src_channel;                                                                // router_013:src_channel -> rsp_demux_009:sink_channel
	wire          router_013_src_startofpacket;                                                          // router_013:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_013_src_endofpacket;                                                            // router_013:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          dds1_fm_modphasestep_s1_agent_rp_valid;                                                // DDS1_FM_ModPhaseStep_s1_agent:rp_valid -> router_014:sink_valid
	wire  [104:0] dds1_fm_modphasestep_s1_agent_rp_data;                                                 // DDS1_FM_ModPhaseStep_s1_agent:rp_data -> router_014:sink_data
	wire          dds1_fm_modphasestep_s1_agent_rp_ready;                                                // router_014:sink_ready -> DDS1_FM_ModPhaseStep_s1_agent:rp_ready
	wire          dds1_fm_modphasestep_s1_agent_rp_startofpacket;                                        // DDS1_FM_ModPhaseStep_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          dds1_fm_modphasestep_s1_agent_rp_endofpacket;                                          // DDS1_FM_ModPhaseStep_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                  // router_014:src_valid -> rsp_demux_010:sink_valid
	wire  [104:0] router_014_src_data;                                                                   // router_014:src_data -> rsp_demux_010:sink_data
	wire          router_014_src_ready;                                                                  // rsp_demux_010:sink_ready -> router_014:src_ready
	wire   [46:0] router_014_src_channel;                                                                // router_014:src_channel -> rsp_demux_010:sink_channel
	wire          router_014_src_startofpacket;                                                          // router_014:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_014_src_endofpacket;                                                            // router_014:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          dds0_outputrelay_s1_agent_rp_valid;                                                    // DDS0_OutputRelay_s1_agent:rp_valid -> router_015:sink_valid
	wire  [104:0] dds0_outputrelay_s1_agent_rp_data;                                                     // DDS0_OutputRelay_s1_agent:rp_data -> router_015:sink_data
	wire          dds0_outputrelay_s1_agent_rp_ready;                                                    // router_015:sink_ready -> DDS0_OutputRelay_s1_agent:rp_ready
	wire          dds0_outputrelay_s1_agent_rp_startofpacket;                                            // DDS0_OutputRelay_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          dds0_outputrelay_s1_agent_rp_endofpacket;                                              // DDS0_OutputRelay_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                  // router_015:src_valid -> rsp_demux_011:sink_valid
	wire  [104:0] router_015_src_data;                                                                   // router_015:src_data -> rsp_demux_011:sink_data
	wire          router_015_src_ready;                                                                  // rsp_demux_011:sink_ready -> router_015:src_ready
	wire   [46:0] router_015_src_channel;                                                                // router_015:src_channel -> rsp_demux_011:sink_channel
	wire          router_015_src_startofpacket;                                                          // router_015:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_015_src_endofpacket;                                                            // router_015:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          dds1_outputrelay_s1_agent_rp_valid;                                                    // DDS1_OutputRelay_s1_agent:rp_valid -> router_016:sink_valid
	wire  [104:0] dds1_outputrelay_s1_agent_rp_data;                                                     // DDS1_OutputRelay_s1_agent:rp_data -> router_016:sink_data
	wire          dds1_outputrelay_s1_agent_rp_ready;                                                    // router_016:sink_ready -> DDS1_OutputRelay_s1_agent:rp_ready
	wire          dds1_outputrelay_s1_agent_rp_startofpacket;                                            // DDS1_OutputRelay_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          dds1_outputrelay_s1_agent_rp_endofpacket;                                              // DDS1_OutputRelay_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                  // router_016:src_valid -> rsp_demux_012:sink_valid
	wire  [104:0] router_016_src_data;                                                                   // router_016:src_data -> rsp_demux_012:sink_data
	wire          router_016_src_ready;                                                                  // rsp_demux_012:sink_ready -> router_016:src_ready
	wire   [46:0] router_016_src_channel;                                                                // router_016:src_channel -> rsp_demux_012:sink_channel
	wire          router_016_src_startofpacket;                                                          // router_016:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_016_src_endofpacket;                                                            // router_016:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          dds0_pm_modindex_s1_agent_rp_valid;                                                    // DDS0_PM_ModIndex_s1_agent:rp_valid -> router_017:sink_valid
	wire  [104:0] dds0_pm_modindex_s1_agent_rp_data;                                                     // DDS0_PM_ModIndex_s1_agent:rp_data -> router_017:sink_data
	wire          dds0_pm_modindex_s1_agent_rp_ready;                                                    // router_017:sink_ready -> DDS0_PM_ModIndex_s1_agent:rp_ready
	wire          dds0_pm_modindex_s1_agent_rp_startofpacket;                                            // DDS0_PM_ModIndex_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          dds0_pm_modindex_s1_agent_rp_endofpacket;                                              // DDS0_PM_ModIndex_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                  // router_017:src_valid -> rsp_demux_013:sink_valid
	wire  [104:0] router_017_src_data;                                                                   // router_017:src_data -> rsp_demux_013:sink_data
	wire          router_017_src_ready;                                                                  // rsp_demux_013:sink_ready -> router_017:src_ready
	wire   [46:0] router_017_src_channel;                                                                // router_017:src_channel -> rsp_demux_013:sink_channel
	wire          router_017_src_startofpacket;                                                          // router_017:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_017_src_endofpacket;                                                            // router_017:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          dds1_pm_modindex_s1_agent_rp_valid;                                                    // DDS1_PM_ModIndex_s1_agent:rp_valid -> router_018:sink_valid
	wire  [104:0] dds1_pm_modindex_s1_agent_rp_data;                                                     // DDS1_PM_ModIndex_s1_agent:rp_data -> router_018:sink_data
	wire          dds1_pm_modindex_s1_agent_rp_ready;                                                    // router_018:sink_ready -> DDS1_PM_ModIndex_s1_agent:rp_ready
	wire          dds1_pm_modindex_s1_agent_rp_startofpacket;                                            // DDS1_PM_ModIndex_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          dds1_pm_modindex_s1_agent_rp_endofpacket;                                              // DDS1_PM_ModIndex_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                  // router_018:src_valid -> rsp_demux_014:sink_valid
	wire  [104:0] router_018_src_data;                                                                   // router_018:src_data -> rsp_demux_014:sink_data
	wire          router_018_src_ready;                                                                  // rsp_demux_014:sink_ready -> router_018:src_ready
	wire   [46:0] router_018_src_channel;                                                                // router_018:src_channel -> rsp_demux_014:sink_channel
	wire          router_018_src_startofpacket;                                                          // router_018:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_018_src_endofpacket;                                                            // router_018:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          dds0_pm_modphasestep_s1_agent_rp_valid;                                                // DDS0_PM_ModPhaseStep_s1_agent:rp_valid -> router_019:sink_valid
	wire  [104:0] dds0_pm_modphasestep_s1_agent_rp_data;                                                 // DDS0_PM_ModPhaseStep_s1_agent:rp_data -> router_019:sink_data
	wire          dds0_pm_modphasestep_s1_agent_rp_ready;                                                // router_019:sink_ready -> DDS0_PM_ModPhaseStep_s1_agent:rp_ready
	wire          dds0_pm_modphasestep_s1_agent_rp_startofpacket;                                        // DDS0_PM_ModPhaseStep_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          dds0_pm_modphasestep_s1_agent_rp_endofpacket;                                          // DDS0_PM_ModPhaseStep_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                                  // router_019:src_valid -> rsp_demux_015:sink_valid
	wire  [104:0] router_019_src_data;                                                                   // router_019:src_data -> rsp_demux_015:sink_data
	wire          router_019_src_ready;                                                                  // rsp_demux_015:sink_ready -> router_019:src_ready
	wire   [46:0] router_019_src_channel;                                                                // router_019:src_channel -> rsp_demux_015:sink_channel
	wire          router_019_src_startofpacket;                                                          // router_019:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_019_src_endofpacket;                                                            // router_019:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          dds1_pm_modphasestep_s1_agent_rp_valid;                                                // DDS1_PM_ModPhaseStep_s1_agent:rp_valid -> router_020:sink_valid
	wire  [104:0] dds1_pm_modphasestep_s1_agent_rp_data;                                                 // DDS1_PM_ModPhaseStep_s1_agent:rp_data -> router_020:sink_data
	wire          dds1_pm_modphasestep_s1_agent_rp_ready;                                                // router_020:sink_ready -> DDS1_PM_ModPhaseStep_s1_agent:rp_ready
	wire          dds1_pm_modphasestep_s1_agent_rp_startofpacket;                                        // DDS1_PM_ModPhaseStep_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          dds1_pm_modphasestep_s1_agent_rp_endofpacket;                                          // DDS1_PM_ModPhaseStep_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                                  // router_020:src_valid -> rsp_demux_016:sink_valid
	wire  [104:0] router_020_src_data;                                                                   // router_020:src_data -> rsp_demux_016:sink_data
	wire          router_020_src_ready;                                                                  // rsp_demux_016:sink_ready -> router_020:src_ready
	wire   [46:0] router_020_src_channel;                                                                // router_020:src_channel -> rsp_demux_016:sink_channel
	wire          router_020_src_startofpacket;                                                          // router_020:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_020_src_endofpacket;                                                            // router_020:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          dds0_pwm_amplitude_s1_agent_rp_valid;                                                  // DDS0_PWM_Amplitude_s1_agent:rp_valid -> router_021:sink_valid
	wire  [104:0] dds0_pwm_amplitude_s1_agent_rp_data;                                                   // DDS0_PWM_Amplitude_s1_agent:rp_data -> router_021:sink_data
	wire          dds0_pwm_amplitude_s1_agent_rp_ready;                                                  // router_021:sink_ready -> DDS0_PWM_Amplitude_s1_agent:rp_ready
	wire          dds0_pwm_amplitude_s1_agent_rp_startofpacket;                                          // DDS0_PWM_Amplitude_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          dds0_pwm_amplitude_s1_agent_rp_endofpacket;                                            // DDS0_PWM_Amplitude_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                                  // router_021:src_valid -> rsp_demux_017:sink_valid
	wire  [104:0] router_021_src_data;                                                                   // router_021:src_data -> rsp_demux_017:sink_data
	wire          router_021_src_ready;                                                                  // rsp_demux_017:sink_ready -> router_021:src_ready
	wire   [46:0] router_021_src_channel;                                                                // router_021:src_channel -> rsp_demux_017:sink_channel
	wire          router_021_src_startofpacket;                                                          // router_021:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_021_src_endofpacket;                                                            // router_021:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          dds1_pwm_amplitude_s1_agent_rp_valid;                                                  // DDS1_PWM_Amplitude_s1_agent:rp_valid -> router_022:sink_valid
	wire  [104:0] dds1_pwm_amplitude_s1_agent_rp_data;                                                   // DDS1_PWM_Amplitude_s1_agent:rp_data -> router_022:sink_data
	wire          dds1_pwm_amplitude_s1_agent_rp_ready;                                                  // router_022:sink_ready -> DDS1_PWM_Amplitude_s1_agent:rp_ready
	wire          dds1_pwm_amplitude_s1_agent_rp_startofpacket;                                          // DDS1_PWM_Amplitude_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          dds1_pwm_amplitude_s1_agent_rp_endofpacket;                                            // DDS1_PWM_Amplitude_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                                  // router_022:src_valid -> rsp_demux_018:sink_valid
	wire  [104:0] router_022_src_data;                                                                   // router_022:src_data -> rsp_demux_018:sink_data
	wire          router_022_src_ready;                                                                  // rsp_demux_018:sink_ready -> router_022:src_ready
	wire   [46:0] router_022_src_channel;                                                                // router_022:src_channel -> rsp_demux_018:sink_channel
	wire          router_022_src_startofpacket;                                                          // router_022:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_022_src_endofpacket;                                                            // router_022:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          dds0_pwm_offset_s1_agent_rp_valid;                                                     // DDS0_PWM_Offset_s1_agent:rp_valid -> router_023:sink_valid
	wire  [104:0] dds0_pwm_offset_s1_agent_rp_data;                                                      // DDS0_PWM_Offset_s1_agent:rp_data -> router_023:sink_data
	wire          dds0_pwm_offset_s1_agent_rp_ready;                                                     // router_023:sink_ready -> DDS0_PWM_Offset_s1_agent:rp_ready
	wire          dds0_pwm_offset_s1_agent_rp_startofpacket;                                             // DDS0_PWM_Offset_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          dds0_pwm_offset_s1_agent_rp_endofpacket;                                               // DDS0_PWM_Offset_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                                  // router_023:src_valid -> rsp_demux_019:sink_valid
	wire  [104:0] router_023_src_data;                                                                   // router_023:src_data -> rsp_demux_019:sink_data
	wire          router_023_src_ready;                                                                  // rsp_demux_019:sink_ready -> router_023:src_ready
	wire   [46:0] router_023_src_channel;                                                                // router_023:src_channel -> rsp_demux_019:sink_channel
	wire          router_023_src_startofpacket;                                                          // router_023:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_023_src_endofpacket;                                                            // router_023:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          dds1_pwm_offset_s1_agent_rp_valid;                                                     // DDS1_PWM_Offset_s1_agent:rp_valid -> router_024:sink_valid
	wire  [104:0] dds1_pwm_offset_s1_agent_rp_data;                                                      // DDS1_PWM_Offset_s1_agent:rp_data -> router_024:sink_data
	wire          dds1_pwm_offset_s1_agent_rp_ready;                                                     // router_024:sink_ready -> DDS1_PWM_Offset_s1_agent:rp_ready
	wire          dds1_pwm_offset_s1_agent_rp_startofpacket;                                             // DDS1_PWM_Offset_s1_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          dds1_pwm_offset_s1_agent_rp_endofpacket;                                               // DDS1_PWM_Offset_s1_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                                  // router_024:src_valid -> rsp_demux_020:sink_valid
	wire  [104:0] router_024_src_data;                                                                   // router_024:src_data -> rsp_demux_020:sink_data
	wire          router_024_src_ready;                                                                  // rsp_demux_020:sink_ready -> router_024:src_ready
	wire   [46:0] router_024_src_channel;                                                                // router_024:src_channel -> rsp_demux_020:sink_channel
	wire          router_024_src_startofpacket;                                                          // router_024:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_024_src_endofpacket;                                                            // router_024:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          dds0_phaseoffset_s1_agent_rp_valid;                                                    // DDS0_PhaseOffset_s1_agent:rp_valid -> router_025:sink_valid
	wire  [104:0] dds0_phaseoffset_s1_agent_rp_data;                                                     // DDS0_PhaseOffset_s1_agent:rp_data -> router_025:sink_data
	wire          dds0_phaseoffset_s1_agent_rp_ready;                                                    // router_025:sink_ready -> DDS0_PhaseOffset_s1_agent:rp_ready
	wire          dds0_phaseoffset_s1_agent_rp_startofpacket;                                            // DDS0_PhaseOffset_s1_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          dds0_phaseoffset_s1_agent_rp_endofpacket;                                              // DDS0_PhaseOffset_s1_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                                  // router_025:src_valid -> rsp_demux_021:sink_valid
	wire  [104:0] router_025_src_data;                                                                   // router_025:src_data -> rsp_demux_021:sink_data
	wire          router_025_src_ready;                                                                  // rsp_demux_021:sink_ready -> router_025:src_ready
	wire   [46:0] router_025_src_channel;                                                                // router_025:src_channel -> rsp_demux_021:sink_channel
	wire          router_025_src_startofpacket;                                                          // router_025:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_025_src_endofpacket;                                                            // router_025:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          dds1_phaseoffset_s1_agent_rp_valid;                                                    // DDS1_PhaseOffset_s1_agent:rp_valid -> router_026:sink_valid
	wire  [104:0] dds1_phaseoffset_s1_agent_rp_data;                                                     // DDS1_PhaseOffset_s1_agent:rp_data -> router_026:sink_data
	wire          dds1_phaseoffset_s1_agent_rp_ready;                                                    // router_026:sink_ready -> DDS1_PhaseOffset_s1_agent:rp_ready
	wire          dds1_phaseoffset_s1_agent_rp_startofpacket;                                            // DDS1_PhaseOffset_s1_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          dds1_phaseoffset_s1_agent_rp_endofpacket;                                              // DDS1_PhaseOffset_s1_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                                  // router_026:src_valid -> rsp_demux_022:sink_valid
	wire  [104:0] router_026_src_data;                                                                   // router_026:src_data -> rsp_demux_022:sink_data
	wire          router_026_src_ready;                                                                  // rsp_demux_022:sink_ready -> router_026:src_ready
	wire   [46:0] router_026_src_channel;                                                                // router_026:src_channel -> rsp_demux_022:sink_channel
	wire          router_026_src_startofpacket;                                                          // router_026:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_026_src_endofpacket;                                                            // router_026:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          dds0_phasestep_s1_agent_rp_valid;                                                      // DDS0_PhaseStep_s1_agent:rp_valid -> router_027:sink_valid
	wire  [104:0] dds0_phasestep_s1_agent_rp_data;                                                       // DDS0_PhaseStep_s1_agent:rp_data -> router_027:sink_data
	wire          dds0_phasestep_s1_agent_rp_ready;                                                      // router_027:sink_ready -> DDS0_PhaseStep_s1_agent:rp_ready
	wire          dds0_phasestep_s1_agent_rp_startofpacket;                                              // DDS0_PhaseStep_s1_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          dds0_phasestep_s1_agent_rp_endofpacket;                                                // DDS0_PhaseStep_s1_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_027_src_valid;                                                                  // router_027:src_valid -> rsp_demux_023:sink_valid
	wire  [104:0] router_027_src_data;                                                                   // router_027:src_data -> rsp_demux_023:sink_data
	wire          router_027_src_ready;                                                                  // rsp_demux_023:sink_ready -> router_027:src_ready
	wire   [46:0] router_027_src_channel;                                                                // router_027:src_channel -> rsp_demux_023:sink_channel
	wire          router_027_src_startofpacket;                                                          // router_027:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_027_src_endofpacket;                                                            // router_027:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          dds1_phasestep_s1_agent_rp_valid;                                                      // DDS1_PhaseStep_s1_agent:rp_valid -> router_028:sink_valid
	wire  [104:0] dds1_phasestep_s1_agent_rp_data;                                                       // DDS1_PhaseStep_s1_agent:rp_data -> router_028:sink_data
	wire          dds1_phasestep_s1_agent_rp_ready;                                                      // router_028:sink_ready -> DDS1_PhaseStep_s1_agent:rp_ready
	wire          dds1_phasestep_s1_agent_rp_startofpacket;                                              // DDS1_PhaseStep_s1_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire          dds1_phasestep_s1_agent_rp_endofpacket;                                                // DDS1_PhaseStep_s1_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire          router_028_src_valid;                                                                  // router_028:src_valid -> rsp_demux_024:sink_valid
	wire  [104:0] router_028_src_data;                                                                   // router_028:src_data -> rsp_demux_024:sink_data
	wire          router_028_src_ready;                                                                  // rsp_demux_024:sink_ready -> router_028:src_ready
	wire   [46:0] router_028_src_channel;                                                                // router_028:src_channel -> rsp_demux_024:sink_channel
	wire          router_028_src_startofpacket;                                                          // router_028:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire          router_028_src_endofpacket;                                                            // router_028:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          lookup_ram_ram_dds0_am_s1_agent_rp_valid;                                              // LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rp_valid -> router_029:sink_valid
	wire   [86:0] lookup_ram_ram_dds0_am_s1_agent_rp_data;                                               // LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rp_data -> router_029:sink_data
	wire          lookup_ram_ram_dds0_am_s1_agent_rp_ready;                                              // router_029:sink_ready -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rp_ready
	wire          lookup_ram_ram_dds0_am_s1_agent_rp_startofpacket;                                      // LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rp_startofpacket -> router_029:sink_startofpacket
	wire          lookup_ram_ram_dds0_am_s1_agent_rp_endofpacket;                                        // LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rp_endofpacket -> router_029:sink_endofpacket
	wire          router_029_src_valid;                                                                  // router_029:src_valid -> rsp_demux_025:sink_valid
	wire   [86:0] router_029_src_data;                                                                   // router_029:src_data -> rsp_demux_025:sink_data
	wire          router_029_src_ready;                                                                  // rsp_demux_025:sink_ready -> router_029:src_ready
	wire   [46:0] router_029_src_channel;                                                                // router_029:src_channel -> rsp_demux_025:sink_channel
	wire          router_029_src_startofpacket;                                                          // router_029:src_startofpacket -> rsp_demux_025:sink_startofpacket
	wire          router_029_src_endofpacket;                                                            // router_029:src_endofpacket -> rsp_demux_025:sink_endofpacket
	wire          lookup_ram_ram_dds0_fm_s1_agent_rp_valid;                                              // LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rp_valid -> router_030:sink_valid
	wire   [86:0] lookup_ram_ram_dds0_fm_s1_agent_rp_data;                                               // LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rp_data -> router_030:sink_data
	wire          lookup_ram_ram_dds0_fm_s1_agent_rp_ready;                                              // router_030:sink_ready -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rp_ready
	wire          lookup_ram_ram_dds0_fm_s1_agent_rp_startofpacket;                                      // LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rp_startofpacket -> router_030:sink_startofpacket
	wire          lookup_ram_ram_dds0_fm_s1_agent_rp_endofpacket;                                        // LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rp_endofpacket -> router_030:sink_endofpacket
	wire          router_030_src_valid;                                                                  // router_030:src_valid -> rsp_demux_026:sink_valid
	wire   [86:0] router_030_src_data;                                                                   // router_030:src_data -> rsp_demux_026:sink_data
	wire          router_030_src_ready;                                                                  // rsp_demux_026:sink_ready -> router_030:src_ready
	wire   [46:0] router_030_src_channel;                                                                // router_030:src_channel -> rsp_demux_026:sink_channel
	wire          router_030_src_startofpacket;                                                          // router_030:src_startofpacket -> rsp_demux_026:sink_startofpacket
	wire          router_030_src_endofpacket;                                                            // router_030:src_endofpacket -> rsp_demux_026:sink_endofpacket
	wire          lookup_ram_ram_dds0_s1_agent_rp_valid;                                                 // LOOKUP_RAM_RAM_DDS0_s1_agent:rp_valid -> router_031:sink_valid
	wire   [86:0] lookup_ram_ram_dds0_s1_agent_rp_data;                                                  // LOOKUP_RAM_RAM_DDS0_s1_agent:rp_data -> router_031:sink_data
	wire          lookup_ram_ram_dds0_s1_agent_rp_ready;                                                 // router_031:sink_ready -> LOOKUP_RAM_RAM_DDS0_s1_agent:rp_ready
	wire          lookup_ram_ram_dds0_s1_agent_rp_startofpacket;                                         // LOOKUP_RAM_RAM_DDS0_s1_agent:rp_startofpacket -> router_031:sink_startofpacket
	wire          lookup_ram_ram_dds0_s1_agent_rp_endofpacket;                                           // LOOKUP_RAM_RAM_DDS0_s1_agent:rp_endofpacket -> router_031:sink_endofpacket
	wire          router_031_src_valid;                                                                  // router_031:src_valid -> rsp_demux_027:sink_valid
	wire   [86:0] router_031_src_data;                                                                   // router_031:src_data -> rsp_demux_027:sink_data
	wire          router_031_src_ready;                                                                  // rsp_demux_027:sink_ready -> router_031:src_ready
	wire   [46:0] router_031_src_channel;                                                                // router_031:src_channel -> rsp_demux_027:sink_channel
	wire          router_031_src_startofpacket;                                                          // router_031:src_startofpacket -> rsp_demux_027:sink_startofpacket
	wire          router_031_src_endofpacket;                                                            // router_031:src_endofpacket -> rsp_demux_027:sink_endofpacket
	wire          lookup_ram_ram_dds1_am_s1_agent_rp_valid;                                              // LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rp_valid -> router_032:sink_valid
	wire   [86:0] lookup_ram_ram_dds1_am_s1_agent_rp_data;                                               // LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rp_data -> router_032:sink_data
	wire          lookup_ram_ram_dds1_am_s1_agent_rp_ready;                                              // router_032:sink_ready -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rp_ready
	wire          lookup_ram_ram_dds1_am_s1_agent_rp_startofpacket;                                      // LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rp_startofpacket -> router_032:sink_startofpacket
	wire          lookup_ram_ram_dds1_am_s1_agent_rp_endofpacket;                                        // LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rp_endofpacket -> router_032:sink_endofpacket
	wire          router_032_src_valid;                                                                  // router_032:src_valid -> rsp_demux_028:sink_valid
	wire   [86:0] router_032_src_data;                                                                   // router_032:src_data -> rsp_demux_028:sink_data
	wire          router_032_src_ready;                                                                  // rsp_demux_028:sink_ready -> router_032:src_ready
	wire   [46:0] router_032_src_channel;                                                                // router_032:src_channel -> rsp_demux_028:sink_channel
	wire          router_032_src_startofpacket;                                                          // router_032:src_startofpacket -> rsp_demux_028:sink_startofpacket
	wire          router_032_src_endofpacket;                                                            // router_032:src_endofpacket -> rsp_demux_028:sink_endofpacket
	wire          lookup_ram_ram_dds1_fm_s1_agent_rp_valid;                                              // LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rp_valid -> router_033:sink_valid
	wire   [86:0] lookup_ram_ram_dds1_fm_s1_agent_rp_data;                                               // LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rp_data -> router_033:sink_data
	wire          lookup_ram_ram_dds1_fm_s1_agent_rp_ready;                                              // router_033:sink_ready -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rp_ready
	wire          lookup_ram_ram_dds1_fm_s1_agent_rp_startofpacket;                                      // LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rp_startofpacket -> router_033:sink_startofpacket
	wire          lookup_ram_ram_dds1_fm_s1_agent_rp_endofpacket;                                        // LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rp_endofpacket -> router_033:sink_endofpacket
	wire          router_033_src_valid;                                                                  // router_033:src_valid -> rsp_demux_029:sink_valid
	wire   [86:0] router_033_src_data;                                                                   // router_033:src_data -> rsp_demux_029:sink_data
	wire          router_033_src_ready;                                                                  // rsp_demux_029:sink_ready -> router_033:src_ready
	wire   [46:0] router_033_src_channel;                                                                // router_033:src_channel -> rsp_demux_029:sink_channel
	wire          router_033_src_startofpacket;                                                          // router_033:src_startofpacket -> rsp_demux_029:sink_startofpacket
	wire          router_033_src_endofpacket;                                                            // router_033:src_endofpacket -> rsp_demux_029:sink_endofpacket
	wire          lookup_ram_ram_dds1_s1_agent_rp_valid;                                                 // LOOKUP_RAM_RAM_DDS1_s1_agent:rp_valid -> router_034:sink_valid
	wire   [86:0] lookup_ram_ram_dds1_s1_agent_rp_data;                                                  // LOOKUP_RAM_RAM_DDS1_s1_agent:rp_data -> router_034:sink_data
	wire          lookup_ram_ram_dds1_s1_agent_rp_ready;                                                 // router_034:sink_ready -> LOOKUP_RAM_RAM_DDS1_s1_agent:rp_ready
	wire          lookup_ram_ram_dds1_s1_agent_rp_startofpacket;                                         // LOOKUP_RAM_RAM_DDS1_s1_agent:rp_startofpacket -> router_034:sink_startofpacket
	wire          lookup_ram_ram_dds1_s1_agent_rp_endofpacket;                                           // LOOKUP_RAM_RAM_DDS1_s1_agent:rp_endofpacket -> router_034:sink_endofpacket
	wire          router_034_src_valid;                                                                  // router_034:src_valid -> rsp_demux_030:sink_valid
	wire   [86:0] router_034_src_data;                                                                   // router_034:src_data -> rsp_demux_030:sink_data
	wire          router_034_src_ready;                                                                  // rsp_demux_030:sink_ready -> router_034:src_ready
	wire   [46:0] router_034_src_channel;                                                                // router_034:src_channel -> rsp_demux_030:sink_channel
	wire          router_034_src_startofpacket;                                                          // router_034:src_startofpacket -> rsp_demux_030:sink_startofpacket
	wire          router_034_src_endofpacket;                                                            // router_034:src_endofpacket -> rsp_demux_030:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                            // JTAG_UART_avalon_jtag_slave_agent:rp_valid -> router_035:sink_valid
	wire  [104:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                             // JTAG_UART_avalon_jtag_slave_agent:rp_data -> router_035:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                            // router_035:sink_ready -> JTAG_UART_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                    // JTAG_UART_avalon_jtag_slave_agent:rp_startofpacket -> router_035:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                      // JTAG_UART_avalon_jtag_slave_agent:rp_endofpacket -> router_035:sink_endofpacket
	wire          router_035_src_valid;                                                                  // router_035:src_valid -> rsp_demux_031:sink_valid
	wire  [104:0] router_035_src_data;                                                                   // router_035:src_data -> rsp_demux_031:sink_data
	wire          router_035_src_ready;                                                                  // rsp_demux_031:sink_ready -> router_035:src_ready
	wire   [46:0] router_035_src_channel;                                                                // router_035:src_channel -> rsp_demux_031:sink_channel
	wire          router_035_src_startofpacket;                                                          // router_035:src_startofpacket -> rsp_demux_031:sink_startofpacket
	wire          router_035_src_endofpacket;                                                            // router_035:src_endofpacket -> rsp_demux_031:sink_endofpacket
	wire          lcd_dma_control_port_slave_agent_rp_valid;                                             // LCD_DMA_control_port_slave_agent:rp_valid -> router_036:sink_valid
	wire  [104:0] lcd_dma_control_port_slave_agent_rp_data;                                              // LCD_DMA_control_port_slave_agent:rp_data -> router_036:sink_data
	wire          lcd_dma_control_port_slave_agent_rp_ready;                                             // router_036:sink_ready -> LCD_DMA_control_port_slave_agent:rp_ready
	wire          lcd_dma_control_port_slave_agent_rp_startofpacket;                                     // LCD_DMA_control_port_slave_agent:rp_startofpacket -> router_036:sink_startofpacket
	wire          lcd_dma_control_port_slave_agent_rp_endofpacket;                                       // LCD_DMA_control_port_slave_agent:rp_endofpacket -> router_036:sink_endofpacket
	wire          router_036_src_valid;                                                                  // router_036:src_valid -> rsp_demux_032:sink_valid
	wire  [104:0] router_036_src_data;                                                                   // router_036:src_data -> rsp_demux_032:sink_data
	wire          router_036_src_ready;                                                                  // rsp_demux_032:sink_ready -> router_036:src_ready
	wire   [46:0] router_036_src_channel;                                                                // router_036:src_channel -> rsp_demux_032:sink_channel
	wire          router_036_src_startofpacket;                                                          // router_036:src_startofpacket -> rsp_demux_032:sink_startofpacket
	wire          router_036_src_endofpacket;                                                            // router_036:src_endofpacket -> rsp_demux_032:sink_endofpacket
	wire          spi_dma_control_port_slave_agent_rp_valid;                                             // SPI_DMA_control_port_slave_agent:rp_valid -> router_037:sink_valid
	wire  [104:0] spi_dma_control_port_slave_agent_rp_data;                                              // SPI_DMA_control_port_slave_agent:rp_data -> router_037:sink_data
	wire          spi_dma_control_port_slave_agent_rp_ready;                                             // router_037:sink_ready -> SPI_DMA_control_port_slave_agent:rp_ready
	wire          spi_dma_control_port_slave_agent_rp_startofpacket;                                     // SPI_DMA_control_port_slave_agent:rp_startofpacket -> router_037:sink_startofpacket
	wire          spi_dma_control_port_slave_agent_rp_endofpacket;                                       // SPI_DMA_control_port_slave_agent:rp_endofpacket -> router_037:sink_endofpacket
	wire          router_037_src_valid;                                                                  // router_037:src_valid -> rsp_demux_033:sink_valid
	wire  [104:0] router_037_src_data;                                                                   // router_037:src_data -> rsp_demux_033:sink_data
	wire          router_037_src_ready;                                                                  // rsp_demux_033:sink_ready -> router_037:src_ready
	wire   [46:0] router_037_src_channel;                                                                // router_037:src_channel -> rsp_demux_033:sink_channel
	wire          router_037_src_startofpacket;                                                          // router_037:src_startofpacket -> rsp_demux_033:sink_startofpacket
	wire          router_037_src_endofpacket;                                                            // router_037:src_endofpacket -> rsp_demux_033:sink_endofpacket
	wire          flash_csr_agent_rp_valid;                                                              // FLASH_csr_agent:rp_valid -> router_038:sink_valid
	wire  [104:0] flash_csr_agent_rp_data;                                                               // FLASH_csr_agent:rp_data -> router_038:sink_data
	wire          flash_csr_agent_rp_ready;                                                              // router_038:sink_ready -> FLASH_csr_agent:rp_ready
	wire          flash_csr_agent_rp_startofpacket;                                                      // FLASH_csr_agent:rp_startofpacket -> router_038:sink_startofpacket
	wire          flash_csr_agent_rp_endofpacket;                                                        // FLASH_csr_agent:rp_endofpacket -> router_038:sink_endofpacket
	wire          router_038_src_valid;                                                                  // router_038:src_valid -> rsp_demux_034:sink_valid
	wire  [104:0] router_038_src_data;                                                                   // router_038:src_data -> rsp_demux_034:sink_data
	wire          router_038_src_ready;                                                                  // rsp_demux_034:sink_ready -> router_038:src_ready
	wire   [46:0] router_038_src_channel;                                                                // router_038:src_channel -> rsp_demux_034:sink_channel
	wire          router_038_src_startofpacket;                                                          // router_038:src_startofpacket -> rsp_demux_034:sink_startofpacket
	wire          router_038_src_endofpacket;                                                            // router_038:src_endofpacket -> rsp_demux_034:sink_endofpacket
	wire          flash_data_agent_rp_valid;                                                             // FLASH_data_agent:rp_valid -> router_039:sink_valid
	wire  [104:0] flash_data_agent_rp_data;                                                              // FLASH_data_agent:rp_data -> router_039:sink_data
	wire          flash_data_agent_rp_ready;                                                             // router_039:sink_ready -> FLASH_data_agent:rp_ready
	wire          flash_data_agent_rp_startofpacket;                                                     // FLASH_data_agent:rp_startofpacket -> router_039:sink_startofpacket
	wire          flash_data_agent_rp_endofpacket;                                                       // FLASH_data_agent:rp_endofpacket -> router_039:sink_endofpacket
	wire          router_039_src_valid;                                                                  // router_039:src_valid -> rsp_demux_035:sink_valid
	wire  [104:0] router_039_src_data;                                                                   // router_039:src_data -> rsp_demux_035:sink_data
	wire          router_039_src_ready;                                                                  // rsp_demux_035:sink_ready -> router_039:src_ready
	wire   [46:0] router_039_src_channel;                                                                // router_039:src_channel -> rsp_demux_035:sink_channel
	wire          router_039_src_startofpacket;                                                          // router_039:src_startofpacket -> rsp_demux_035:sink_startofpacket
	wire          router_039_src_endofpacket;                                                            // router_039:src_endofpacket -> rsp_demux_035:sink_endofpacket
	wire          nios_cpu_debug_mem_slave_agent_rp_valid;                                               // NIOS_CPU_debug_mem_slave_agent:rp_valid -> router_040:sink_valid
	wire  [104:0] nios_cpu_debug_mem_slave_agent_rp_data;                                                // NIOS_CPU_debug_mem_slave_agent:rp_data -> router_040:sink_data
	wire          nios_cpu_debug_mem_slave_agent_rp_ready;                                               // router_040:sink_ready -> NIOS_CPU_debug_mem_slave_agent:rp_ready
	wire          nios_cpu_debug_mem_slave_agent_rp_startofpacket;                                       // NIOS_CPU_debug_mem_slave_agent:rp_startofpacket -> router_040:sink_startofpacket
	wire          nios_cpu_debug_mem_slave_agent_rp_endofpacket;                                         // NIOS_CPU_debug_mem_slave_agent:rp_endofpacket -> router_040:sink_endofpacket
	wire          router_040_src_valid;                                                                  // router_040:src_valid -> rsp_demux_036:sink_valid
	wire  [104:0] router_040_src_data;                                                                   // router_040:src_data -> rsp_demux_036:sink_data
	wire          router_040_src_ready;                                                                  // rsp_demux_036:sink_ready -> router_040:src_ready
	wire   [46:0] router_040_src_channel;                                                                // router_040:src_channel -> rsp_demux_036:sink_channel
	wire          router_040_src_startofpacket;                                                          // router_040:src_startofpacket -> rsp_demux_036:sink_startofpacket
	wire          router_040_src_endofpacket;                                                            // router_040:src_endofpacket -> rsp_demux_036:sink_endofpacket
	wire          ram_24k_s1_agent_rp_valid;                                                             // RAM_24K_s1_agent:rp_valid -> router_041:sink_valid
	wire  [104:0] ram_24k_s1_agent_rp_data;                                                              // RAM_24K_s1_agent:rp_data -> router_041:sink_data
	wire          ram_24k_s1_agent_rp_ready;                                                             // router_041:sink_ready -> RAM_24K_s1_agent:rp_ready
	wire          ram_24k_s1_agent_rp_startofpacket;                                                     // RAM_24K_s1_agent:rp_startofpacket -> router_041:sink_startofpacket
	wire          ram_24k_s1_agent_rp_endofpacket;                                                       // RAM_24K_s1_agent:rp_endofpacket -> router_041:sink_endofpacket
	wire          router_041_src_valid;                                                                  // router_041:src_valid -> rsp_demux_037:sink_valid
	wire  [104:0] router_041_src_data;                                                                   // router_041:src_data -> rsp_demux_037:sink_data
	wire          router_041_src_ready;                                                                  // rsp_demux_037:sink_ready -> router_041:src_ready
	wire   [46:0] router_041_src_channel;                                                                // router_041:src_channel -> rsp_demux_037:sink_channel
	wire          router_041_src_startofpacket;                                                          // router_041:src_startofpacket -> rsp_demux_037:sink_startofpacket
	wire          router_041_src_endofpacket;                                                            // router_041:src_endofpacket -> rsp_demux_037:sink_endofpacket
	wire          pio_led_debug_s1_agent_rp_valid;                                                       // PIO_LED_DEBUG_s1_agent:rp_valid -> router_042:sink_valid
	wire  [104:0] pio_led_debug_s1_agent_rp_data;                                                        // PIO_LED_DEBUG_s1_agent:rp_data -> router_042:sink_data
	wire          pio_led_debug_s1_agent_rp_ready;                                                       // router_042:sink_ready -> PIO_LED_DEBUG_s1_agent:rp_ready
	wire          pio_led_debug_s1_agent_rp_startofpacket;                                               // PIO_LED_DEBUG_s1_agent:rp_startofpacket -> router_042:sink_startofpacket
	wire          pio_led_debug_s1_agent_rp_endofpacket;                                                 // PIO_LED_DEBUG_s1_agent:rp_endofpacket -> router_042:sink_endofpacket
	wire          router_042_src_valid;                                                                  // router_042:src_valid -> rsp_demux_038:sink_valid
	wire  [104:0] router_042_src_data;                                                                   // router_042:src_data -> rsp_demux_038:sink_data
	wire          router_042_src_ready;                                                                  // rsp_demux_038:sink_ready -> router_042:src_ready
	wire   [46:0] router_042_src_channel;                                                                // router_042:src_channel -> rsp_demux_038:sink_channel
	wire          router_042_src_startofpacket;                                                          // router_042:src_startofpacket -> rsp_demux_038:sink_startofpacket
	wire          router_042_src_endofpacket;                                                            // router_042:src_endofpacket -> rsp_demux_038:sink_endofpacket
	wire          timer_delay_32bit_s1_agent_rp_valid;                                                   // TIMER_DELAY_32bit_s1_agent:rp_valid -> router_043:sink_valid
	wire  [104:0] timer_delay_32bit_s1_agent_rp_data;                                                    // TIMER_DELAY_32bit_s1_agent:rp_data -> router_043:sink_data
	wire          timer_delay_32bit_s1_agent_rp_ready;                                                   // router_043:sink_ready -> TIMER_DELAY_32bit_s1_agent:rp_ready
	wire          timer_delay_32bit_s1_agent_rp_startofpacket;                                           // TIMER_DELAY_32bit_s1_agent:rp_startofpacket -> router_043:sink_startofpacket
	wire          timer_delay_32bit_s1_agent_rp_endofpacket;                                             // TIMER_DELAY_32bit_s1_agent:rp_endofpacket -> router_043:sink_endofpacket
	wire          router_043_src_valid;                                                                  // router_043:src_valid -> rsp_demux_039:sink_valid
	wire  [104:0] router_043_src_data;                                                                   // router_043:src_data -> rsp_demux_039:sink_data
	wire          router_043_src_ready;                                                                  // rsp_demux_039:sink_ready -> router_043:src_ready
	wire   [46:0] router_043_src_channel;                                                                // router_043:src_channel -> rsp_demux_039:sink_channel
	wire          router_043_src_startofpacket;                                                          // router_043:src_startofpacket -> rsp_demux_039:sink_startofpacket
	wire          router_043_src_endofpacket;                                                            // router_043:src_endofpacket -> rsp_demux_039:sink_endofpacket
	wire          keypad_s1_agent_rp_valid;                                                              // KEYPAD_s1_agent:rp_valid -> router_044:sink_valid
	wire  [104:0] keypad_s1_agent_rp_data;                                                               // KEYPAD_s1_agent:rp_data -> router_044:sink_data
	wire          keypad_s1_agent_rp_ready;                                                              // router_044:sink_ready -> KEYPAD_s1_agent:rp_ready
	wire          keypad_s1_agent_rp_startofpacket;                                                      // KEYPAD_s1_agent:rp_startofpacket -> router_044:sink_startofpacket
	wire          keypad_s1_agent_rp_endofpacket;                                                        // KEYPAD_s1_agent:rp_endofpacket -> router_044:sink_endofpacket
	wire          router_044_src_valid;                                                                  // router_044:src_valid -> rsp_demux_040:sink_valid
	wire  [104:0] router_044_src_data;                                                                   // router_044:src_data -> rsp_demux_040:sink_data
	wire          router_044_src_ready;                                                                  // rsp_demux_040:sink_ready -> router_044:src_ready
	wire   [46:0] router_044_src_channel;                                                                // router_044:src_channel -> rsp_demux_040:sink_channel
	wire          router_044_src_startofpacket;                                                          // router_044:src_startofpacket -> rsp_demux_040:sink_startofpacket
	wire          router_044_src_endofpacket;                                                            // router_044:src_endofpacket -> rsp_demux_040:sink_endofpacket
	wire          btn_display_s1_agent_rp_valid;                                                         // BTN_DISPLAY_s1_agent:rp_valid -> router_045:sink_valid
	wire  [104:0] btn_display_s1_agent_rp_data;                                                          // BTN_DISPLAY_s1_agent:rp_data -> router_045:sink_data
	wire          btn_display_s1_agent_rp_ready;                                                         // router_045:sink_ready -> BTN_DISPLAY_s1_agent:rp_ready
	wire          btn_display_s1_agent_rp_startofpacket;                                                 // BTN_DISPLAY_s1_agent:rp_startofpacket -> router_045:sink_startofpacket
	wire          btn_display_s1_agent_rp_endofpacket;                                                   // BTN_DISPLAY_s1_agent:rp_endofpacket -> router_045:sink_endofpacket
	wire          router_045_src_valid;                                                                  // router_045:src_valid -> rsp_demux_041:sink_valid
	wire  [104:0] router_045_src_data;                                                                   // router_045:src_data -> rsp_demux_041:sink_data
	wire          router_045_src_ready;                                                                  // rsp_demux_041:sink_ready -> router_045:src_ready
	wire   [46:0] router_045_src_channel;                                                                // router_045:src_channel -> rsp_demux_041:sink_channel
	wire          router_045_src_startofpacket;                                                          // router_045:src_startofpacket -> rsp_demux_041:sink_startofpacket
	wire          router_045_src_endofpacket;                                                            // router_045:src_endofpacket -> rsp_demux_041:sink_endofpacket
	wire          btn_encoder_s1_agent_rp_valid;                                                         // BTN_ENCODER_s1_agent:rp_valid -> router_046:sink_valid
	wire  [104:0] btn_encoder_s1_agent_rp_data;                                                          // BTN_ENCODER_s1_agent:rp_data -> router_046:sink_data
	wire          btn_encoder_s1_agent_rp_ready;                                                         // router_046:sink_ready -> BTN_ENCODER_s1_agent:rp_ready
	wire          btn_encoder_s1_agent_rp_startofpacket;                                                 // BTN_ENCODER_s1_agent:rp_startofpacket -> router_046:sink_startofpacket
	wire          btn_encoder_s1_agent_rp_endofpacket;                                                   // BTN_ENCODER_s1_agent:rp_endofpacket -> router_046:sink_endofpacket
	wire          router_046_src_valid;                                                                  // router_046:src_valid -> rsp_demux_042:sink_valid
	wire  [104:0] router_046_src_data;                                                                   // router_046:src_data -> rsp_demux_042:sink_data
	wire          router_046_src_ready;                                                                  // rsp_demux_042:sink_ready -> router_046:src_ready
	wire   [46:0] router_046_src_channel;                                                                // router_046:src_channel -> rsp_demux_042:sink_channel
	wire          router_046_src_startofpacket;                                                          // router_046:src_startofpacket -> rsp_demux_042:sink_startofpacket
	wire          router_046_src_endofpacket;                                                            // router_046:src_endofpacket -> rsp_demux_042:sink_endofpacket
	wire          btn_ch_onoff_s1_agent_rp_valid;                                                        // BTN_CH_ONOFF_s1_agent:rp_valid -> router_047:sink_valid
	wire  [104:0] btn_ch_onoff_s1_agent_rp_data;                                                         // BTN_CH_ONOFF_s1_agent:rp_data -> router_047:sink_data
	wire          btn_ch_onoff_s1_agent_rp_ready;                                                        // router_047:sink_ready -> BTN_CH_ONOFF_s1_agent:rp_ready
	wire          btn_ch_onoff_s1_agent_rp_startofpacket;                                                // BTN_CH_ONOFF_s1_agent:rp_startofpacket -> router_047:sink_startofpacket
	wire          btn_ch_onoff_s1_agent_rp_endofpacket;                                                  // BTN_CH_ONOFF_s1_agent:rp_endofpacket -> router_047:sink_endofpacket
	wire          router_047_src_valid;                                                                  // router_047:src_valid -> rsp_demux_043:sink_valid
	wire  [104:0] router_047_src_data;                                                                   // router_047:src_data -> rsp_demux_043:sink_data
	wire          router_047_src_ready;                                                                  // rsp_demux_043:sink_ready -> router_047:src_ready
	wire   [46:0] router_047_src_channel;                                                                // router_047:src_channel -> rsp_demux_043:sink_channel
	wire          router_047_src_startofpacket;                                                          // router_047:src_startofpacket -> rsp_demux_043:sink_startofpacket
	wire          router_047_src_endofpacket;                                                            // router_047:src_endofpacket -> rsp_demux_043:sink_endofpacket
	wire          dds_reset_s1_agent_rp_valid;                                                           // DDS_RESET_s1_agent:rp_valid -> router_048:sink_valid
	wire  [104:0] dds_reset_s1_agent_rp_data;                                                            // DDS_RESET_s1_agent:rp_data -> router_048:sink_data
	wire          dds_reset_s1_agent_rp_ready;                                                           // router_048:sink_ready -> DDS_RESET_s1_agent:rp_ready
	wire          dds_reset_s1_agent_rp_startofpacket;                                                   // DDS_RESET_s1_agent:rp_startofpacket -> router_048:sink_startofpacket
	wire          dds_reset_s1_agent_rp_endofpacket;                                                     // DDS_RESET_s1_agent:rp_endofpacket -> router_048:sink_endofpacket
	wire          router_048_src_valid;                                                                  // router_048:src_valid -> rsp_demux_044:sink_valid
	wire  [104:0] router_048_src_data;                                                                   // router_048:src_data -> rsp_demux_044:sink_data
	wire          router_048_src_ready;                                                                  // rsp_demux_044:sink_ready -> router_048:src_ready
	wire   [46:0] router_048_src_channel;                                                                // router_048:src_channel -> rsp_demux_044:sink_channel
	wire          router_048_src_startofpacket;                                                          // router_048:src_startofpacket -> rsp_demux_044:sink_startofpacket
	wire          router_048_src_endofpacket;                                                            // router_048:src_endofpacket -> rsp_demux_044:sink_endofpacket
	wire          lookup_ram_isr_s1_agent_rp_valid;                                                      // LOOKUP_RAM_ISR_s1_agent:rp_valid -> router_049:sink_valid
	wire  [104:0] lookup_ram_isr_s1_agent_rp_data;                                                       // LOOKUP_RAM_ISR_s1_agent:rp_data -> router_049:sink_data
	wire          lookup_ram_isr_s1_agent_rp_ready;                                                      // router_049:sink_ready -> LOOKUP_RAM_ISR_s1_agent:rp_ready
	wire          lookup_ram_isr_s1_agent_rp_startofpacket;                                              // LOOKUP_RAM_ISR_s1_agent:rp_startofpacket -> router_049:sink_startofpacket
	wire          lookup_ram_isr_s1_agent_rp_endofpacket;                                                // LOOKUP_RAM_ISR_s1_agent:rp_endofpacket -> router_049:sink_endofpacket
	wire          router_049_src_valid;                                                                  // router_049:src_valid -> rsp_demux_045:sink_valid
	wire  [104:0] router_049_src_data;                                                                   // router_049:src_data -> rsp_demux_045:sink_data
	wire          router_049_src_ready;                                                                  // rsp_demux_045:sink_ready -> router_049:src_ready
	wire   [46:0] router_049_src_channel;                                                                // router_049:src_channel -> rsp_demux_045:sink_channel
	wire          router_049_src_startofpacket;                                                          // router_049:src_startofpacket -> rsp_demux_045:sink_startofpacket
	wire          router_049_src_endofpacket;                                                            // router_049:src_endofpacket -> rsp_demux_045:sink_endofpacket
	wire          sd_spi_spi_control_port_agent_rp_valid;                                                // SD_SPI_spi_control_port_agent:rp_valid -> router_050:sink_valid
	wire  [104:0] sd_spi_spi_control_port_agent_rp_data;                                                 // SD_SPI_spi_control_port_agent:rp_data -> router_050:sink_data
	wire          sd_spi_spi_control_port_agent_rp_ready;                                                // router_050:sink_ready -> SD_SPI_spi_control_port_agent:rp_ready
	wire          sd_spi_spi_control_port_agent_rp_startofpacket;                                        // SD_SPI_spi_control_port_agent:rp_startofpacket -> router_050:sink_startofpacket
	wire          sd_spi_spi_control_port_agent_rp_endofpacket;                                          // SD_SPI_spi_control_port_agent:rp_endofpacket -> router_050:sink_endofpacket
	wire          router_050_src_valid;                                                                  // router_050:src_valid -> rsp_demux_046:sink_valid
	wire  [104:0] router_050_src_data;                                                                   // router_050:src_data -> rsp_demux_046:sink_data
	wire          router_050_src_ready;                                                                  // rsp_demux_046:sink_ready -> router_050:src_ready
	wire   [46:0] router_050_src_channel;                                                                // router_050:src_channel -> rsp_demux_046:sink_channel
	wire          router_050_src_startofpacket;                                                          // router_050:src_startofpacket -> rsp_demux_046:sink_startofpacket
	wire          router_050_src_endofpacket;                                                            // router_050:src_endofpacket -> rsp_demux_046:sink_endofpacket
	wire          cmd_mux_025_src_valid;                                                                 // cmd_mux_025:src_valid -> LOOKUP_RAM_RAM_DDS0_AM_s1_burst_adapter:sink0_valid
	wire   [86:0] cmd_mux_025_src_data;                                                                  // cmd_mux_025:src_data -> LOOKUP_RAM_RAM_DDS0_AM_s1_burst_adapter:sink0_data
	wire          cmd_mux_025_src_ready;                                                                 // LOOKUP_RAM_RAM_DDS0_AM_s1_burst_adapter:sink0_ready -> cmd_mux_025:src_ready
	wire   [46:0] cmd_mux_025_src_channel;                                                               // cmd_mux_025:src_channel -> LOOKUP_RAM_RAM_DDS0_AM_s1_burst_adapter:sink0_channel
	wire          cmd_mux_025_src_startofpacket;                                                         // cmd_mux_025:src_startofpacket -> LOOKUP_RAM_RAM_DDS0_AM_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_025_src_endofpacket;                                                           // cmd_mux_025:src_endofpacket -> LOOKUP_RAM_RAM_DDS0_AM_s1_burst_adapter:sink0_endofpacket
	wire          lookup_ram_ram_dds0_am_s1_burst_adapter_source0_valid;                                 // LOOKUP_RAM_RAM_DDS0_AM_s1_burst_adapter:source0_valid -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent:cp_valid
	wire   [86:0] lookup_ram_ram_dds0_am_s1_burst_adapter_source0_data;                                  // LOOKUP_RAM_RAM_DDS0_AM_s1_burst_adapter:source0_data -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent:cp_data
	wire          lookup_ram_ram_dds0_am_s1_burst_adapter_source0_ready;                                 // LOOKUP_RAM_RAM_DDS0_AM_s1_agent:cp_ready -> LOOKUP_RAM_RAM_DDS0_AM_s1_burst_adapter:source0_ready
	wire   [46:0] lookup_ram_ram_dds0_am_s1_burst_adapter_source0_channel;                               // LOOKUP_RAM_RAM_DDS0_AM_s1_burst_adapter:source0_channel -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent:cp_channel
	wire          lookup_ram_ram_dds0_am_s1_burst_adapter_source0_startofpacket;                         // LOOKUP_RAM_RAM_DDS0_AM_s1_burst_adapter:source0_startofpacket -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent:cp_startofpacket
	wire          lookup_ram_ram_dds0_am_s1_burst_adapter_source0_endofpacket;                           // LOOKUP_RAM_RAM_DDS0_AM_s1_burst_adapter:source0_endofpacket -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent:cp_endofpacket
	wire          cmd_mux_026_src_valid;                                                                 // cmd_mux_026:src_valid -> LOOKUP_RAM_RAM_DDS0_FM_s1_burst_adapter:sink0_valid
	wire   [86:0] cmd_mux_026_src_data;                                                                  // cmd_mux_026:src_data -> LOOKUP_RAM_RAM_DDS0_FM_s1_burst_adapter:sink0_data
	wire          cmd_mux_026_src_ready;                                                                 // LOOKUP_RAM_RAM_DDS0_FM_s1_burst_adapter:sink0_ready -> cmd_mux_026:src_ready
	wire   [46:0] cmd_mux_026_src_channel;                                                               // cmd_mux_026:src_channel -> LOOKUP_RAM_RAM_DDS0_FM_s1_burst_adapter:sink0_channel
	wire          cmd_mux_026_src_startofpacket;                                                         // cmd_mux_026:src_startofpacket -> LOOKUP_RAM_RAM_DDS0_FM_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_026_src_endofpacket;                                                           // cmd_mux_026:src_endofpacket -> LOOKUP_RAM_RAM_DDS0_FM_s1_burst_adapter:sink0_endofpacket
	wire          lookup_ram_ram_dds0_fm_s1_burst_adapter_source0_valid;                                 // LOOKUP_RAM_RAM_DDS0_FM_s1_burst_adapter:source0_valid -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent:cp_valid
	wire   [86:0] lookup_ram_ram_dds0_fm_s1_burst_adapter_source0_data;                                  // LOOKUP_RAM_RAM_DDS0_FM_s1_burst_adapter:source0_data -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent:cp_data
	wire          lookup_ram_ram_dds0_fm_s1_burst_adapter_source0_ready;                                 // LOOKUP_RAM_RAM_DDS0_FM_s1_agent:cp_ready -> LOOKUP_RAM_RAM_DDS0_FM_s1_burst_adapter:source0_ready
	wire   [46:0] lookup_ram_ram_dds0_fm_s1_burst_adapter_source0_channel;                               // LOOKUP_RAM_RAM_DDS0_FM_s1_burst_adapter:source0_channel -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent:cp_channel
	wire          lookup_ram_ram_dds0_fm_s1_burst_adapter_source0_startofpacket;                         // LOOKUP_RAM_RAM_DDS0_FM_s1_burst_adapter:source0_startofpacket -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent:cp_startofpacket
	wire          lookup_ram_ram_dds0_fm_s1_burst_adapter_source0_endofpacket;                           // LOOKUP_RAM_RAM_DDS0_FM_s1_burst_adapter:source0_endofpacket -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent:cp_endofpacket
	wire          cmd_mux_027_src_valid;                                                                 // cmd_mux_027:src_valid -> LOOKUP_RAM_RAM_DDS0_s1_burst_adapter:sink0_valid
	wire   [86:0] cmd_mux_027_src_data;                                                                  // cmd_mux_027:src_data -> LOOKUP_RAM_RAM_DDS0_s1_burst_adapter:sink0_data
	wire          cmd_mux_027_src_ready;                                                                 // LOOKUP_RAM_RAM_DDS0_s1_burst_adapter:sink0_ready -> cmd_mux_027:src_ready
	wire   [46:0] cmd_mux_027_src_channel;                                                               // cmd_mux_027:src_channel -> LOOKUP_RAM_RAM_DDS0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_027_src_startofpacket;                                                         // cmd_mux_027:src_startofpacket -> LOOKUP_RAM_RAM_DDS0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_027_src_endofpacket;                                                           // cmd_mux_027:src_endofpacket -> LOOKUP_RAM_RAM_DDS0_s1_burst_adapter:sink0_endofpacket
	wire          lookup_ram_ram_dds0_s1_burst_adapter_source0_valid;                                    // LOOKUP_RAM_RAM_DDS0_s1_burst_adapter:source0_valid -> LOOKUP_RAM_RAM_DDS0_s1_agent:cp_valid
	wire   [86:0] lookup_ram_ram_dds0_s1_burst_adapter_source0_data;                                     // LOOKUP_RAM_RAM_DDS0_s1_burst_adapter:source0_data -> LOOKUP_RAM_RAM_DDS0_s1_agent:cp_data
	wire          lookup_ram_ram_dds0_s1_burst_adapter_source0_ready;                                    // LOOKUP_RAM_RAM_DDS0_s1_agent:cp_ready -> LOOKUP_RAM_RAM_DDS0_s1_burst_adapter:source0_ready
	wire   [46:0] lookup_ram_ram_dds0_s1_burst_adapter_source0_channel;                                  // LOOKUP_RAM_RAM_DDS0_s1_burst_adapter:source0_channel -> LOOKUP_RAM_RAM_DDS0_s1_agent:cp_channel
	wire          lookup_ram_ram_dds0_s1_burst_adapter_source0_startofpacket;                            // LOOKUP_RAM_RAM_DDS0_s1_burst_adapter:source0_startofpacket -> LOOKUP_RAM_RAM_DDS0_s1_agent:cp_startofpacket
	wire          lookup_ram_ram_dds0_s1_burst_adapter_source0_endofpacket;                              // LOOKUP_RAM_RAM_DDS0_s1_burst_adapter:source0_endofpacket -> LOOKUP_RAM_RAM_DDS0_s1_agent:cp_endofpacket
	wire          cmd_mux_028_src_valid;                                                                 // cmd_mux_028:src_valid -> LOOKUP_RAM_RAM_DDS1_AM_s1_burst_adapter:sink0_valid
	wire   [86:0] cmd_mux_028_src_data;                                                                  // cmd_mux_028:src_data -> LOOKUP_RAM_RAM_DDS1_AM_s1_burst_adapter:sink0_data
	wire          cmd_mux_028_src_ready;                                                                 // LOOKUP_RAM_RAM_DDS1_AM_s1_burst_adapter:sink0_ready -> cmd_mux_028:src_ready
	wire   [46:0] cmd_mux_028_src_channel;                                                               // cmd_mux_028:src_channel -> LOOKUP_RAM_RAM_DDS1_AM_s1_burst_adapter:sink0_channel
	wire          cmd_mux_028_src_startofpacket;                                                         // cmd_mux_028:src_startofpacket -> LOOKUP_RAM_RAM_DDS1_AM_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_028_src_endofpacket;                                                           // cmd_mux_028:src_endofpacket -> LOOKUP_RAM_RAM_DDS1_AM_s1_burst_adapter:sink0_endofpacket
	wire          lookup_ram_ram_dds1_am_s1_burst_adapter_source0_valid;                                 // LOOKUP_RAM_RAM_DDS1_AM_s1_burst_adapter:source0_valid -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent:cp_valid
	wire   [86:0] lookup_ram_ram_dds1_am_s1_burst_adapter_source0_data;                                  // LOOKUP_RAM_RAM_DDS1_AM_s1_burst_adapter:source0_data -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent:cp_data
	wire          lookup_ram_ram_dds1_am_s1_burst_adapter_source0_ready;                                 // LOOKUP_RAM_RAM_DDS1_AM_s1_agent:cp_ready -> LOOKUP_RAM_RAM_DDS1_AM_s1_burst_adapter:source0_ready
	wire   [46:0] lookup_ram_ram_dds1_am_s1_burst_adapter_source0_channel;                               // LOOKUP_RAM_RAM_DDS1_AM_s1_burst_adapter:source0_channel -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent:cp_channel
	wire          lookup_ram_ram_dds1_am_s1_burst_adapter_source0_startofpacket;                         // LOOKUP_RAM_RAM_DDS1_AM_s1_burst_adapter:source0_startofpacket -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent:cp_startofpacket
	wire          lookup_ram_ram_dds1_am_s1_burst_adapter_source0_endofpacket;                           // LOOKUP_RAM_RAM_DDS1_AM_s1_burst_adapter:source0_endofpacket -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent:cp_endofpacket
	wire          cmd_mux_029_src_valid;                                                                 // cmd_mux_029:src_valid -> LOOKUP_RAM_RAM_DDS1_FM_s1_burst_adapter:sink0_valid
	wire   [86:0] cmd_mux_029_src_data;                                                                  // cmd_mux_029:src_data -> LOOKUP_RAM_RAM_DDS1_FM_s1_burst_adapter:sink0_data
	wire          cmd_mux_029_src_ready;                                                                 // LOOKUP_RAM_RAM_DDS1_FM_s1_burst_adapter:sink0_ready -> cmd_mux_029:src_ready
	wire   [46:0] cmd_mux_029_src_channel;                                                               // cmd_mux_029:src_channel -> LOOKUP_RAM_RAM_DDS1_FM_s1_burst_adapter:sink0_channel
	wire          cmd_mux_029_src_startofpacket;                                                         // cmd_mux_029:src_startofpacket -> LOOKUP_RAM_RAM_DDS1_FM_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_029_src_endofpacket;                                                           // cmd_mux_029:src_endofpacket -> LOOKUP_RAM_RAM_DDS1_FM_s1_burst_adapter:sink0_endofpacket
	wire          lookup_ram_ram_dds1_fm_s1_burst_adapter_source0_valid;                                 // LOOKUP_RAM_RAM_DDS1_FM_s1_burst_adapter:source0_valid -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent:cp_valid
	wire   [86:0] lookup_ram_ram_dds1_fm_s1_burst_adapter_source0_data;                                  // LOOKUP_RAM_RAM_DDS1_FM_s1_burst_adapter:source0_data -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent:cp_data
	wire          lookup_ram_ram_dds1_fm_s1_burst_adapter_source0_ready;                                 // LOOKUP_RAM_RAM_DDS1_FM_s1_agent:cp_ready -> LOOKUP_RAM_RAM_DDS1_FM_s1_burst_adapter:source0_ready
	wire   [46:0] lookup_ram_ram_dds1_fm_s1_burst_adapter_source0_channel;                               // LOOKUP_RAM_RAM_DDS1_FM_s1_burst_adapter:source0_channel -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent:cp_channel
	wire          lookup_ram_ram_dds1_fm_s1_burst_adapter_source0_startofpacket;                         // LOOKUP_RAM_RAM_DDS1_FM_s1_burst_adapter:source0_startofpacket -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent:cp_startofpacket
	wire          lookup_ram_ram_dds1_fm_s1_burst_adapter_source0_endofpacket;                           // LOOKUP_RAM_RAM_DDS1_FM_s1_burst_adapter:source0_endofpacket -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent:cp_endofpacket
	wire          cmd_mux_030_src_valid;                                                                 // cmd_mux_030:src_valid -> LOOKUP_RAM_RAM_DDS1_s1_burst_adapter:sink0_valid
	wire   [86:0] cmd_mux_030_src_data;                                                                  // cmd_mux_030:src_data -> LOOKUP_RAM_RAM_DDS1_s1_burst_adapter:sink0_data
	wire          cmd_mux_030_src_ready;                                                                 // LOOKUP_RAM_RAM_DDS1_s1_burst_adapter:sink0_ready -> cmd_mux_030:src_ready
	wire   [46:0] cmd_mux_030_src_channel;                                                               // cmd_mux_030:src_channel -> LOOKUP_RAM_RAM_DDS1_s1_burst_adapter:sink0_channel
	wire          cmd_mux_030_src_startofpacket;                                                         // cmd_mux_030:src_startofpacket -> LOOKUP_RAM_RAM_DDS1_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_030_src_endofpacket;                                                           // cmd_mux_030:src_endofpacket -> LOOKUP_RAM_RAM_DDS1_s1_burst_adapter:sink0_endofpacket
	wire          lookup_ram_ram_dds1_s1_burst_adapter_source0_valid;                                    // LOOKUP_RAM_RAM_DDS1_s1_burst_adapter:source0_valid -> LOOKUP_RAM_RAM_DDS1_s1_agent:cp_valid
	wire   [86:0] lookup_ram_ram_dds1_s1_burst_adapter_source0_data;                                     // LOOKUP_RAM_RAM_DDS1_s1_burst_adapter:source0_data -> LOOKUP_RAM_RAM_DDS1_s1_agent:cp_data
	wire          lookup_ram_ram_dds1_s1_burst_adapter_source0_ready;                                    // LOOKUP_RAM_RAM_DDS1_s1_agent:cp_ready -> LOOKUP_RAM_RAM_DDS1_s1_burst_adapter:source0_ready
	wire   [46:0] lookup_ram_ram_dds1_s1_burst_adapter_source0_channel;                                  // LOOKUP_RAM_RAM_DDS1_s1_burst_adapter:source0_channel -> LOOKUP_RAM_RAM_DDS1_s1_agent:cp_channel
	wire          lookup_ram_ram_dds1_s1_burst_adapter_source0_startofpacket;                            // LOOKUP_RAM_RAM_DDS1_s1_burst_adapter:source0_startofpacket -> LOOKUP_RAM_RAM_DDS1_s1_agent:cp_startofpacket
	wire          lookup_ram_ram_dds1_s1_burst_adapter_source0_endofpacket;                              // LOOKUP_RAM_RAM_DDS1_s1_burst_adapter:source0_endofpacket -> LOOKUP_RAM_RAM_DDS1_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                  // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [104:0] cmd_demux_src0_data;                                                                   // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                  // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [46:0] cmd_demux_src0_channel;                                                                // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                          // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                            // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                  // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [104:0] cmd_demux_src1_data;                                                                   // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                  // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [46:0] cmd_demux_src1_channel;                                                                // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                          // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                            // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                  // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [104:0] cmd_demux_src2_data;                                                                   // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                  // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [46:0] cmd_demux_src2_channel;                                                                // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                          // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                            // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                  // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [104:0] cmd_demux_src3_data;                                                                   // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                                  // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [46:0] cmd_demux_src3_channel;                                                                // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                          // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                            // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                  // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [104:0] cmd_demux_src4_data;                                                                   // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                                  // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [46:0] cmd_demux_src4_channel;                                                                // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                          // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                            // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                  // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [104:0] cmd_demux_src5_data;                                                                   // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                                  // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [46:0] cmd_demux_src5_channel;                                                                // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                          // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                            // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                                  // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [104:0] cmd_demux_src6_data;                                                                   // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                                  // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [46:0] cmd_demux_src6_channel;                                                                // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                          // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                            // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                                  // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [104:0] cmd_demux_src7_data;                                                                   // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                                  // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [46:0] cmd_demux_src7_channel;                                                                // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                          // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                            // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                                  // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [104:0] cmd_demux_src8_data;                                                                   // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                                  // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [46:0] cmd_demux_src8_channel;                                                                // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                          // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                            // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                                  // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [104:0] cmd_demux_src9_data;                                                                   // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                                  // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [46:0] cmd_demux_src9_channel;                                                                // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                          // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                            // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                                 // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [104:0] cmd_demux_src10_data;                                                                  // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                                 // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [46:0] cmd_demux_src10_channel;                                                               // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                         // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                           // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                                 // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [104:0] cmd_demux_src11_data;                                                                  // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                                 // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [46:0] cmd_demux_src11_channel;                                                               // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                         // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                           // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                                 // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [104:0] cmd_demux_src12_data;                                                                  // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                                 // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [46:0] cmd_demux_src12_channel;                                                               // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                                         // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                           // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                                 // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [104:0] cmd_demux_src13_data;                                                                  // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                                 // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [46:0] cmd_demux_src13_channel;                                                               // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                                         // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                           // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                                 // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [104:0] cmd_demux_src14_data;                                                                  // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                                 // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [46:0] cmd_demux_src14_channel;                                                               // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                                         // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                           // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                                 // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [104:0] cmd_demux_src15_data;                                                                  // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                                                 // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [46:0] cmd_demux_src15_channel;                                                               // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                                                         // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                           // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                                 // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [104:0] cmd_demux_src16_data;                                                                  // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src16_ready;                                                                 // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire   [46:0] cmd_demux_src16_channel;                                                               // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_startofpacket;                                                         // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src16_endofpacket;                                                           // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                                 // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [104:0] cmd_demux_src17_data;                                                                  // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_src17_ready;                                                                 // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire   [46:0] cmd_demux_src17_channel;                                                               // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src17_startofpacket;                                                         // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_src17_endofpacket;                                                           // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                                 // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [104:0] cmd_demux_src18_data;                                                                  // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_src18_ready;                                                                 // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire   [46:0] cmd_demux_src18_channel;                                                               // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_src18_startofpacket;                                                         // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_src18_endofpacket;                                                           // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                                                 // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire  [104:0] cmd_demux_src19_data;                                                                  // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_src19_ready;                                                                 // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire   [46:0] cmd_demux_src19_channel;                                                               // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_src19_startofpacket;                                                         // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_src19_endofpacket;                                                           // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_src20_valid;                                                                 // cmd_demux:src20_valid -> cmd_mux_020:sink0_valid
	wire  [104:0] cmd_demux_src20_data;                                                                  // cmd_demux:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_src20_ready;                                                                 // cmd_mux_020:sink0_ready -> cmd_demux:src20_ready
	wire   [46:0] cmd_demux_src20_channel;                                                               // cmd_demux:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_src20_startofpacket;                                                         // cmd_demux:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_src20_endofpacket;                                                           // cmd_demux:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_src21_valid;                                                                 // cmd_demux:src21_valid -> cmd_mux_021:sink0_valid
	wire  [104:0] cmd_demux_src21_data;                                                                  // cmd_demux:src21_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_src21_ready;                                                                 // cmd_mux_021:sink0_ready -> cmd_demux:src21_ready
	wire   [46:0] cmd_demux_src21_channel;                                                               // cmd_demux:src21_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_src21_startofpacket;                                                         // cmd_demux:src21_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_src21_endofpacket;                                                           // cmd_demux:src21_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_src22_valid;                                                                 // cmd_demux:src22_valid -> cmd_mux_022:sink0_valid
	wire  [104:0] cmd_demux_src22_data;                                                                  // cmd_demux:src22_data -> cmd_mux_022:sink0_data
	wire          cmd_demux_src22_ready;                                                                 // cmd_mux_022:sink0_ready -> cmd_demux:src22_ready
	wire   [46:0] cmd_demux_src22_channel;                                                               // cmd_demux:src22_channel -> cmd_mux_022:sink0_channel
	wire          cmd_demux_src22_startofpacket;                                                         // cmd_demux:src22_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          cmd_demux_src22_endofpacket;                                                           // cmd_demux:src22_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_src23_valid;                                                                 // cmd_demux:src23_valid -> cmd_mux_023:sink0_valid
	wire  [104:0] cmd_demux_src23_data;                                                                  // cmd_demux:src23_data -> cmd_mux_023:sink0_data
	wire          cmd_demux_src23_ready;                                                                 // cmd_mux_023:sink0_ready -> cmd_demux:src23_ready
	wire   [46:0] cmd_demux_src23_channel;                                                               // cmd_demux:src23_channel -> cmd_mux_023:sink0_channel
	wire          cmd_demux_src23_startofpacket;                                                         // cmd_demux:src23_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          cmd_demux_src23_endofpacket;                                                           // cmd_demux:src23_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_src24_valid;                                                                 // cmd_demux:src24_valid -> cmd_mux_024:sink0_valid
	wire  [104:0] cmd_demux_src24_data;                                                                  // cmd_demux:src24_data -> cmd_mux_024:sink0_data
	wire          cmd_demux_src24_ready;                                                                 // cmd_mux_024:sink0_ready -> cmd_demux:src24_ready
	wire   [46:0] cmd_demux_src24_channel;                                                               // cmd_demux:src24_channel -> cmd_mux_024:sink0_channel
	wire          cmd_demux_src24_startofpacket;                                                         // cmd_demux:src24_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire          cmd_demux_src24_endofpacket;                                                           // cmd_demux:src24_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_src31_valid;                                                                 // cmd_demux:src31_valid -> cmd_mux_031:sink0_valid
	wire  [104:0] cmd_demux_src31_data;                                                                  // cmd_demux:src31_data -> cmd_mux_031:sink0_data
	wire          cmd_demux_src31_ready;                                                                 // cmd_mux_031:sink0_ready -> cmd_demux:src31_ready
	wire   [46:0] cmd_demux_src31_channel;                                                               // cmd_demux:src31_channel -> cmd_mux_031:sink0_channel
	wire          cmd_demux_src31_startofpacket;                                                         // cmd_demux:src31_startofpacket -> cmd_mux_031:sink0_startofpacket
	wire          cmd_demux_src31_endofpacket;                                                           // cmd_demux:src31_endofpacket -> cmd_mux_031:sink0_endofpacket
	wire          cmd_demux_src32_valid;                                                                 // cmd_demux:src32_valid -> cmd_mux_032:sink0_valid
	wire  [104:0] cmd_demux_src32_data;                                                                  // cmd_demux:src32_data -> cmd_mux_032:sink0_data
	wire          cmd_demux_src32_ready;                                                                 // cmd_mux_032:sink0_ready -> cmd_demux:src32_ready
	wire   [46:0] cmd_demux_src32_channel;                                                               // cmd_demux:src32_channel -> cmd_mux_032:sink0_channel
	wire          cmd_demux_src32_startofpacket;                                                         // cmd_demux:src32_startofpacket -> cmd_mux_032:sink0_startofpacket
	wire          cmd_demux_src32_endofpacket;                                                           // cmd_demux:src32_endofpacket -> cmd_mux_032:sink0_endofpacket
	wire          cmd_demux_src33_valid;                                                                 // cmd_demux:src33_valid -> cmd_mux_033:sink0_valid
	wire  [104:0] cmd_demux_src33_data;                                                                  // cmd_demux:src33_data -> cmd_mux_033:sink0_data
	wire          cmd_demux_src33_ready;                                                                 // cmd_mux_033:sink0_ready -> cmd_demux:src33_ready
	wire   [46:0] cmd_demux_src33_channel;                                                               // cmd_demux:src33_channel -> cmd_mux_033:sink0_channel
	wire          cmd_demux_src33_startofpacket;                                                         // cmd_demux:src33_startofpacket -> cmd_mux_033:sink0_startofpacket
	wire          cmd_demux_src33_endofpacket;                                                           // cmd_demux:src33_endofpacket -> cmd_mux_033:sink0_endofpacket
	wire          cmd_demux_src34_valid;                                                                 // cmd_demux:src34_valid -> cmd_mux_034:sink0_valid
	wire  [104:0] cmd_demux_src34_data;                                                                  // cmd_demux:src34_data -> cmd_mux_034:sink0_data
	wire          cmd_demux_src34_ready;                                                                 // cmd_mux_034:sink0_ready -> cmd_demux:src34_ready
	wire   [46:0] cmd_demux_src34_channel;                                                               // cmd_demux:src34_channel -> cmd_mux_034:sink0_channel
	wire          cmd_demux_src34_startofpacket;                                                         // cmd_demux:src34_startofpacket -> cmd_mux_034:sink0_startofpacket
	wire          cmd_demux_src34_endofpacket;                                                           // cmd_demux:src34_endofpacket -> cmd_mux_034:sink0_endofpacket
	wire          cmd_demux_src35_valid;                                                                 // cmd_demux:src35_valid -> cmd_mux_035:sink0_valid
	wire  [104:0] cmd_demux_src35_data;                                                                  // cmd_demux:src35_data -> cmd_mux_035:sink0_data
	wire          cmd_demux_src35_ready;                                                                 // cmd_mux_035:sink0_ready -> cmd_demux:src35_ready
	wire   [46:0] cmd_demux_src35_channel;                                                               // cmd_demux:src35_channel -> cmd_mux_035:sink0_channel
	wire          cmd_demux_src35_startofpacket;                                                         // cmd_demux:src35_startofpacket -> cmd_mux_035:sink0_startofpacket
	wire          cmd_demux_src35_endofpacket;                                                           // cmd_demux:src35_endofpacket -> cmd_mux_035:sink0_endofpacket
	wire          cmd_demux_src36_valid;                                                                 // cmd_demux:src36_valid -> cmd_mux_036:sink0_valid
	wire  [104:0] cmd_demux_src36_data;                                                                  // cmd_demux:src36_data -> cmd_mux_036:sink0_data
	wire          cmd_demux_src36_ready;                                                                 // cmd_mux_036:sink0_ready -> cmd_demux:src36_ready
	wire   [46:0] cmd_demux_src36_channel;                                                               // cmd_demux:src36_channel -> cmd_mux_036:sink0_channel
	wire          cmd_demux_src36_startofpacket;                                                         // cmd_demux:src36_startofpacket -> cmd_mux_036:sink0_startofpacket
	wire          cmd_demux_src36_endofpacket;                                                           // cmd_demux:src36_endofpacket -> cmd_mux_036:sink0_endofpacket
	wire          cmd_demux_src37_valid;                                                                 // cmd_demux:src37_valid -> cmd_mux_037:sink0_valid
	wire  [104:0] cmd_demux_src37_data;                                                                  // cmd_demux:src37_data -> cmd_mux_037:sink0_data
	wire          cmd_demux_src37_ready;                                                                 // cmd_mux_037:sink0_ready -> cmd_demux:src37_ready
	wire   [46:0] cmd_demux_src37_channel;                                                               // cmd_demux:src37_channel -> cmd_mux_037:sink0_channel
	wire          cmd_demux_src37_startofpacket;                                                         // cmd_demux:src37_startofpacket -> cmd_mux_037:sink0_startofpacket
	wire          cmd_demux_src37_endofpacket;                                                           // cmd_demux:src37_endofpacket -> cmd_mux_037:sink0_endofpacket
	wire          cmd_demux_src38_valid;                                                                 // cmd_demux:src38_valid -> cmd_mux_038:sink0_valid
	wire  [104:0] cmd_demux_src38_data;                                                                  // cmd_demux:src38_data -> cmd_mux_038:sink0_data
	wire          cmd_demux_src38_ready;                                                                 // cmd_mux_038:sink0_ready -> cmd_demux:src38_ready
	wire   [46:0] cmd_demux_src38_channel;                                                               // cmd_demux:src38_channel -> cmd_mux_038:sink0_channel
	wire          cmd_demux_src38_startofpacket;                                                         // cmd_demux:src38_startofpacket -> cmd_mux_038:sink0_startofpacket
	wire          cmd_demux_src38_endofpacket;                                                           // cmd_demux:src38_endofpacket -> cmd_mux_038:sink0_endofpacket
	wire          cmd_demux_src39_valid;                                                                 // cmd_demux:src39_valid -> cmd_mux_039:sink0_valid
	wire  [104:0] cmd_demux_src39_data;                                                                  // cmd_demux:src39_data -> cmd_mux_039:sink0_data
	wire          cmd_demux_src39_ready;                                                                 // cmd_mux_039:sink0_ready -> cmd_demux:src39_ready
	wire   [46:0] cmd_demux_src39_channel;                                                               // cmd_demux:src39_channel -> cmd_mux_039:sink0_channel
	wire          cmd_demux_src39_startofpacket;                                                         // cmd_demux:src39_startofpacket -> cmd_mux_039:sink0_startofpacket
	wire          cmd_demux_src39_endofpacket;                                                           // cmd_demux:src39_endofpacket -> cmd_mux_039:sink0_endofpacket
	wire          cmd_demux_src40_valid;                                                                 // cmd_demux:src40_valid -> cmd_mux_040:sink0_valid
	wire  [104:0] cmd_demux_src40_data;                                                                  // cmd_demux:src40_data -> cmd_mux_040:sink0_data
	wire          cmd_demux_src40_ready;                                                                 // cmd_mux_040:sink0_ready -> cmd_demux:src40_ready
	wire   [46:0] cmd_demux_src40_channel;                                                               // cmd_demux:src40_channel -> cmd_mux_040:sink0_channel
	wire          cmd_demux_src40_startofpacket;                                                         // cmd_demux:src40_startofpacket -> cmd_mux_040:sink0_startofpacket
	wire          cmd_demux_src40_endofpacket;                                                           // cmd_demux:src40_endofpacket -> cmd_mux_040:sink0_endofpacket
	wire          cmd_demux_src41_valid;                                                                 // cmd_demux:src41_valid -> cmd_mux_041:sink0_valid
	wire  [104:0] cmd_demux_src41_data;                                                                  // cmd_demux:src41_data -> cmd_mux_041:sink0_data
	wire          cmd_demux_src41_ready;                                                                 // cmd_mux_041:sink0_ready -> cmd_demux:src41_ready
	wire   [46:0] cmd_demux_src41_channel;                                                               // cmd_demux:src41_channel -> cmd_mux_041:sink0_channel
	wire          cmd_demux_src41_startofpacket;                                                         // cmd_demux:src41_startofpacket -> cmd_mux_041:sink0_startofpacket
	wire          cmd_demux_src41_endofpacket;                                                           // cmd_demux:src41_endofpacket -> cmd_mux_041:sink0_endofpacket
	wire          cmd_demux_src42_valid;                                                                 // cmd_demux:src42_valid -> cmd_mux_042:sink0_valid
	wire  [104:0] cmd_demux_src42_data;                                                                  // cmd_demux:src42_data -> cmd_mux_042:sink0_data
	wire          cmd_demux_src42_ready;                                                                 // cmd_mux_042:sink0_ready -> cmd_demux:src42_ready
	wire   [46:0] cmd_demux_src42_channel;                                                               // cmd_demux:src42_channel -> cmd_mux_042:sink0_channel
	wire          cmd_demux_src42_startofpacket;                                                         // cmd_demux:src42_startofpacket -> cmd_mux_042:sink0_startofpacket
	wire          cmd_demux_src42_endofpacket;                                                           // cmd_demux:src42_endofpacket -> cmd_mux_042:sink0_endofpacket
	wire          cmd_demux_src43_valid;                                                                 // cmd_demux:src43_valid -> cmd_mux_043:sink0_valid
	wire  [104:0] cmd_demux_src43_data;                                                                  // cmd_demux:src43_data -> cmd_mux_043:sink0_data
	wire          cmd_demux_src43_ready;                                                                 // cmd_mux_043:sink0_ready -> cmd_demux:src43_ready
	wire   [46:0] cmd_demux_src43_channel;                                                               // cmd_demux:src43_channel -> cmd_mux_043:sink0_channel
	wire          cmd_demux_src43_startofpacket;                                                         // cmd_demux:src43_startofpacket -> cmd_mux_043:sink0_startofpacket
	wire          cmd_demux_src43_endofpacket;                                                           // cmd_demux:src43_endofpacket -> cmd_mux_043:sink0_endofpacket
	wire          cmd_demux_src44_valid;                                                                 // cmd_demux:src44_valid -> cmd_mux_044:sink0_valid
	wire  [104:0] cmd_demux_src44_data;                                                                  // cmd_demux:src44_data -> cmd_mux_044:sink0_data
	wire          cmd_demux_src44_ready;                                                                 // cmd_mux_044:sink0_ready -> cmd_demux:src44_ready
	wire   [46:0] cmd_demux_src44_channel;                                                               // cmd_demux:src44_channel -> cmd_mux_044:sink0_channel
	wire          cmd_demux_src44_startofpacket;                                                         // cmd_demux:src44_startofpacket -> cmd_mux_044:sink0_startofpacket
	wire          cmd_demux_src44_endofpacket;                                                           // cmd_demux:src44_endofpacket -> cmd_mux_044:sink0_endofpacket
	wire          cmd_demux_src45_valid;                                                                 // cmd_demux:src45_valid -> cmd_mux_045:sink0_valid
	wire  [104:0] cmd_demux_src45_data;                                                                  // cmd_demux:src45_data -> cmd_mux_045:sink0_data
	wire          cmd_demux_src45_ready;                                                                 // cmd_mux_045:sink0_ready -> cmd_demux:src45_ready
	wire   [46:0] cmd_demux_src45_channel;                                                               // cmd_demux:src45_channel -> cmd_mux_045:sink0_channel
	wire          cmd_demux_src45_startofpacket;                                                         // cmd_demux:src45_startofpacket -> cmd_mux_045:sink0_startofpacket
	wire          cmd_demux_src45_endofpacket;                                                           // cmd_demux:src45_endofpacket -> cmd_mux_045:sink0_endofpacket
	wire          cmd_demux_src46_valid;                                                                 // cmd_demux:src46_valid -> cmd_mux_046:sink0_valid
	wire  [104:0] cmd_demux_src46_data;                                                                  // cmd_demux:src46_data -> cmd_mux_046:sink0_data
	wire          cmd_demux_src46_ready;                                                                 // cmd_mux_046:sink0_ready -> cmd_demux:src46_ready
	wire   [46:0] cmd_demux_src46_channel;                                                               // cmd_demux:src46_channel -> cmd_mux_046:sink0_channel
	wire          cmd_demux_src46_startofpacket;                                                         // cmd_demux:src46_startofpacket -> cmd_mux_046:sink0_startofpacket
	wire          cmd_demux_src46_endofpacket;                                                           // cmd_demux:src46_endofpacket -> cmd_mux_046:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                              // cmd_demux_003:src0_valid -> cmd_mux_035:sink1_valid
	wire  [104:0] cmd_demux_003_src0_data;                                                               // cmd_demux_003:src0_data -> cmd_mux_035:sink1_data
	wire          cmd_demux_003_src0_ready;                                                              // cmd_mux_035:sink1_ready -> cmd_demux_003:src0_ready
	wire   [46:0] cmd_demux_003_src0_channel;                                                            // cmd_demux_003:src0_channel -> cmd_mux_035:sink1_channel
	wire          cmd_demux_003_src0_startofpacket;                                                      // cmd_demux_003:src0_startofpacket -> cmd_mux_035:sink1_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                        // cmd_demux_003:src0_endofpacket -> cmd_mux_035:sink1_endofpacket
	wire          cmd_demux_003_src1_valid;                                                              // cmd_demux_003:src1_valid -> cmd_mux_036:sink1_valid
	wire  [104:0] cmd_demux_003_src1_data;                                                               // cmd_demux_003:src1_data -> cmd_mux_036:sink1_data
	wire          cmd_demux_003_src1_ready;                                                              // cmd_mux_036:sink1_ready -> cmd_demux_003:src1_ready
	wire   [46:0] cmd_demux_003_src1_channel;                                                            // cmd_demux_003:src1_channel -> cmd_mux_036:sink1_channel
	wire          cmd_demux_003_src1_startofpacket;                                                      // cmd_demux_003:src1_startofpacket -> cmd_mux_036:sink1_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                        // cmd_demux_003:src1_endofpacket -> cmd_mux_036:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                  // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [104:0] rsp_demux_src0_data;                                                                   // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                  // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [46:0] rsp_demux_src0_channel;                                                                // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                          // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                            // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                              // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [104:0] rsp_demux_001_src0_data;                                                               // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                              // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [46:0] rsp_demux_001_src0_channel;                                                            // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                      // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                        // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                              // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [104:0] rsp_demux_002_src0_data;                                                               // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                              // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [46:0] rsp_demux_002_src0_channel;                                                            // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                      // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                        // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                              // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [104:0] rsp_demux_003_src0_data;                                                               // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                              // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [46:0] rsp_demux_003_src0_channel;                                                            // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                      // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                        // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                              // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [104:0] rsp_demux_004_src0_data;                                                               // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                              // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [46:0] rsp_demux_004_src0_channel;                                                            // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                      // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                        // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                              // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [104:0] rsp_demux_005_src0_data;                                                               // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                              // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [46:0] rsp_demux_005_src0_channel;                                                            // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                      // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                        // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                              // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [104:0] rsp_demux_006_src0_data;                                                               // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                              // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [46:0] rsp_demux_006_src0_channel;                                                            // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                      // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                        // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                              // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [104:0] rsp_demux_007_src0_data;                                                               // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                              // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [46:0] rsp_demux_007_src0_channel;                                                            // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                      // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                        // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                              // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [104:0] rsp_demux_008_src0_data;                                                               // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                              // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [46:0] rsp_demux_008_src0_channel;                                                            // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                      // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                        // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                              // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [104:0] rsp_demux_009_src0_data;                                                               // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                              // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [46:0] rsp_demux_009_src0_channel;                                                            // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                      // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                        // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                              // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [104:0] rsp_demux_010_src0_data;                                                               // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                              // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [46:0] rsp_demux_010_src0_channel;                                                            // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                      // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                        // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                              // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [104:0] rsp_demux_011_src0_data;                                                               // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                              // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [46:0] rsp_demux_011_src0_channel;                                                            // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                      // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                        // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                              // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [104:0] rsp_demux_012_src0_data;                                                               // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                              // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [46:0] rsp_demux_012_src0_channel;                                                            // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                      // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                        // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                              // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [104:0] rsp_demux_013_src0_data;                                                               // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                              // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [46:0] rsp_demux_013_src0_channel;                                                            // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                      // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                        // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                              // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [104:0] rsp_demux_014_src0_data;                                                               // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                              // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [46:0] rsp_demux_014_src0_channel;                                                            // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                      // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                        // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                              // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [104:0] rsp_demux_015_src0_data;                                                               // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                                              // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [46:0] rsp_demux_015_src0_channel;                                                            // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                                      // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                        // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                              // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [104:0] rsp_demux_016_src0_data;                                                               // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire          rsp_demux_016_src0_ready;                                                              // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire   [46:0] rsp_demux_016_src0_channel;                                                            // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                                      // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                        // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                                              // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [104:0] rsp_demux_017_src0_data;                                                               // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire          rsp_demux_017_src0_ready;                                                              // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire   [46:0] rsp_demux_017_src0_channel;                                                            // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                                      // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                        // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                              // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [104:0] rsp_demux_018_src0_data;                                                               // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire          rsp_demux_018_src0_ready;                                                              // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire   [46:0] rsp_demux_018_src0_channel;                                                            // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                                      // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                        // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                                              // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire  [104:0] rsp_demux_019_src0_data;                                                               // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire          rsp_demux_019_src0_ready;                                                              // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire   [46:0] rsp_demux_019_src0_channel;                                                            // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                                      // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                        // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_020_src0_valid;                                                              // rsp_demux_020:src0_valid -> rsp_mux:sink20_valid
	wire  [104:0] rsp_demux_020_src0_data;                                                               // rsp_demux_020:src0_data -> rsp_mux:sink20_data
	wire          rsp_demux_020_src0_ready;                                                              // rsp_mux:sink20_ready -> rsp_demux_020:src0_ready
	wire   [46:0] rsp_demux_020_src0_channel;                                                            // rsp_demux_020:src0_channel -> rsp_mux:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                                      // rsp_demux_020:src0_startofpacket -> rsp_mux:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                        // rsp_demux_020:src0_endofpacket -> rsp_mux:sink20_endofpacket
	wire          rsp_demux_021_src0_valid;                                                              // rsp_demux_021:src0_valid -> rsp_mux:sink21_valid
	wire  [104:0] rsp_demux_021_src0_data;                                                               // rsp_demux_021:src0_data -> rsp_mux:sink21_data
	wire          rsp_demux_021_src0_ready;                                                              // rsp_mux:sink21_ready -> rsp_demux_021:src0_ready
	wire   [46:0] rsp_demux_021_src0_channel;                                                            // rsp_demux_021:src0_channel -> rsp_mux:sink21_channel
	wire          rsp_demux_021_src0_startofpacket;                                                      // rsp_demux_021:src0_startofpacket -> rsp_mux:sink21_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                        // rsp_demux_021:src0_endofpacket -> rsp_mux:sink21_endofpacket
	wire          rsp_demux_022_src0_valid;                                                              // rsp_demux_022:src0_valid -> rsp_mux:sink22_valid
	wire  [104:0] rsp_demux_022_src0_data;                                                               // rsp_demux_022:src0_data -> rsp_mux:sink22_data
	wire          rsp_demux_022_src0_ready;                                                              // rsp_mux:sink22_ready -> rsp_demux_022:src0_ready
	wire   [46:0] rsp_demux_022_src0_channel;                                                            // rsp_demux_022:src0_channel -> rsp_mux:sink22_channel
	wire          rsp_demux_022_src0_startofpacket;                                                      // rsp_demux_022:src0_startofpacket -> rsp_mux:sink22_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                                        // rsp_demux_022:src0_endofpacket -> rsp_mux:sink22_endofpacket
	wire          rsp_demux_023_src0_valid;                                                              // rsp_demux_023:src0_valid -> rsp_mux:sink23_valid
	wire  [104:0] rsp_demux_023_src0_data;                                                               // rsp_demux_023:src0_data -> rsp_mux:sink23_data
	wire          rsp_demux_023_src0_ready;                                                              // rsp_mux:sink23_ready -> rsp_demux_023:src0_ready
	wire   [46:0] rsp_demux_023_src0_channel;                                                            // rsp_demux_023:src0_channel -> rsp_mux:sink23_channel
	wire          rsp_demux_023_src0_startofpacket;                                                      // rsp_demux_023:src0_startofpacket -> rsp_mux:sink23_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                                        // rsp_demux_023:src0_endofpacket -> rsp_mux:sink23_endofpacket
	wire          rsp_demux_024_src0_valid;                                                              // rsp_demux_024:src0_valid -> rsp_mux:sink24_valid
	wire  [104:0] rsp_demux_024_src0_data;                                                               // rsp_demux_024:src0_data -> rsp_mux:sink24_data
	wire          rsp_demux_024_src0_ready;                                                              // rsp_mux:sink24_ready -> rsp_demux_024:src0_ready
	wire   [46:0] rsp_demux_024_src0_channel;                                                            // rsp_demux_024:src0_channel -> rsp_mux:sink24_channel
	wire          rsp_demux_024_src0_startofpacket;                                                      // rsp_demux_024:src0_startofpacket -> rsp_mux:sink24_startofpacket
	wire          rsp_demux_024_src0_endofpacket;                                                        // rsp_demux_024:src0_endofpacket -> rsp_mux:sink24_endofpacket
	wire          rsp_demux_031_src0_valid;                                                              // rsp_demux_031:src0_valid -> rsp_mux:sink31_valid
	wire  [104:0] rsp_demux_031_src0_data;                                                               // rsp_demux_031:src0_data -> rsp_mux:sink31_data
	wire          rsp_demux_031_src0_ready;                                                              // rsp_mux:sink31_ready -> rsp_demux_031:src0_ready
	wire   [46:0] rsp_demux_031_src0_channel;                                                            // rsp_demux_031:src0_channel -> rsp_mux:sink31_channel
	wire          rsp_demux_031_src0_startofpacket;                                                      // rsp_demux_031:src0_startofpacket -> rsp_mux:sink31_startofpacket
	wire          rsp_demux_031_src0_endofpacket;                                                        // rsp_demux_031:src0_endofpacket -> rsp_mux:sink31_endofpacket
	wire          rsp_demux_032_src0_valid;                                                              // rsp_demux_032:src0_valid -> rsp_mux:sink32_valid
	wire  [104:0] rsp_demux_032_src0_data;                                                               // rsp_demux_032:src0_data -> rsp_mux:sink32_data
	wire          rsp_demux_032_src0_ready;                                                              // rsp_mux:sink32_ready -> rsp_demux_032:src0_ready
	wire   [46:0] rsp_demux_032_src0_channel;                                                            // rsp_demux_032:src0_channel -> rsp_mux:sink32_channel
	wire          rsp_demux_032_src0_startofpacket;                                                      // rsp_demux_032:src0_startofpacket -> rsp_mux:sink32_startofpacket
	wire          rsp_demux_032_src0_endofpacket;                                                        // rsp_demux_032:src0_endofpacket -> rsp_mux:sink32_endofpacket
	wire          rsp_demux_033_src0_valid;                                                              // rsp_demux_033:src0_valid -> rsp_mux:sink33_valid
	wire  [104:0] rsp_demux_033_src0_data;                                                               // rsp_demux_033:src0_data -> rsp_mux:sink33_data
	wire          rsp_demux_033_src0_ready;                                                              // rsp_mux:sink33_ready -> rsp_demux_033:src0_ready
	wire   [46:0] rsp_demux_033_src0_channel;                                                            // rsp_demux_033:src0_channel -> rsp_mux:sink33_channel
	wire          rsp_demux_033_src0_startofpacket;                                                      // rsp_demux_033:src0_startofpacket -> rsp_mux:sink33_startofpacket
	wire          rsp_demux_033_src0_endofpacket;                                                        // rsp_demux_033:src0_endofpacket -> rsp_mux:sink33_endofpacket
	wire          rsp_demux_034_src0_valid;                                                              // rsp_demux_034:src0_valid -> rsp_mux:sink34_valid
	wire  [104:0] rsp_demux_034_src0_data;                                                               // rsp_demux_034:src0_data -> rsp_mux:sink34_data
	wire          rsp_demux_034_src0_ready;                                                              // rsp_mux:sink34_ready -> rsp_demux_034:src0_ready
	wire   [46:0] rsp_demux_034_src0_channel;                                                            // rsp_demux_034:src0_channel -> rsp_mux:sink34_channel
	wire          rsp_demux_034_src0_startofpacket;                                                      // rsp_demux_034:src0_startofpacket -> rsp_mux:sink34_startofpacket
	wire          rsp_demux_034_src0_endofpacket;                                                        // rsp_demux_034:src0_endofpacket -> rsp_mux:sink34_endofpacket
	wire          rsp_demux_035_src0_valid;                                                              // rsp_demux_035:src0_valid -> rsp_mux:sink35_valid
	wire  [104:0] rsp_demux_035_src0_data;                                                               // rsp_demux_035:src0_data -> rsp_mux:sink35_data
	wire          rsp_demux_035_src0_ready;                                                              // rsp_mux:sink35_ready -> rsp_demux_035:src0_ready
	wire   [46:0] rsp_demux_035_src0_channel;                                                            // rsp_demux_035:src0_channel -> rsp_mux:sink35_channel
	wire          rsp_demux_035_src0_startofpacket;                                                      // rsp_demux_035:src0_startofpacket -> rsp_mux:sink35_startofpacket
	wire          rsp_demux_035_src0_endofpacket;                                                        // rsp_demux_035:src0_endofpacket -> rsp_mux:sink35_endofpacket
	wire          rsp_demux_035_src1_valid;                                                              // rsp_demux_035:src1_valid -> rsp_mux_003:sink0_valid
	wire  [104:0] rsp_demux_035_src1_data;                                                               // rsp_demux_035:src1_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_035_src1_ready;                                                              // rsp_mux_003:sink0_ready -> rsp_demux_035:src1_ready
	wire   [46:0] rsp_demux_035_src1_channel;                                                            // rsp_demux_035:src1_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_035_src1_startofpacket;                                                      // rsp_demux_035:src1_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_035_src1_endofpacket;                                                        // rsp_demux_035:src1_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_036_src0_valid;                                                              // rsp_demux_036:src0_valid -> rsp_mux:sink36_valid
	wire  [104:0] rsp_demux_036_src0_data;                                                               // rsp_demux_036:src0_data -> rsp_mux:sink36_data
	wire          rsp_demux_036_src0_ready;                                                              // rsp_mux:sink36_ready -> rsp_demux_036:src0_ready
	wire   [46:0] rsp_demux_036_src0_channel;                                                            // rsp_demux_036:src0_channel -> rsp_mux:sink36_channel
	wire          rsp_demux_036_src0_startofpacket;                                                      // rsp_demux_036:src0_startofpacket -> rsp_mux:sink36_startofpacket
	wire          rsp_demux_036_src0_endofpacket;                                                        // rsp_demux_036:src0_endofpacket -> rsp_mux:sink36_endofpacket
	wire          rsp_demux_036_src1_valid;                                                              // rsp_demux_036:src1_valid -> rsp_mux_003:sink1_valid
	wire  [104:0] rsp_demux_036_src1_data;                                                               // rsp_demux_036:src1_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_036_src1_ready;                                                              // rsp_mux_003:sink1_ready -> rsp_demux_036:src1_ready
	wire   [46:0] rsp_demux_036_src1_channel;                                                            // rsp_demux_036:src1_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_036_src1_startofpacket;                                                      // rsp_demux_036:src1_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_036_src1_endofpacket;                                                        // rsp_demux_036:src1_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_037_src0_valid;                                                              // rsp_demux_037:src0_valid -> rsp_mux:sink37_valid
	wire  [104:0] rsp_demux_037_src0_data;                                                               // rsp_demux_037:src0_data -> rsp_mux:sink37_data
	wire          rsp_demux_037_src0_ready;                                                              // rsp_mux:sink37_ready -> rsp_demux_037:src0_ready
	wire   [46:0] rsp_demux_037_src0_channel;                                                            // rsp_demux_037:src0_channel -> rsp_mux:sink37_channel
	wire          rsp_demux_037_src0_startofpacket;                                                      // rsp_demux_037:src0_startofpacket -> rsp_mux:sink37_startofpacket
	wire          rsp_demux_037_src0_endofpacket;                                                        // rsp_demux_037:src0_endofpacket -> rsp_mux:sink37_endofpacket
	wire          rsp_demux_038_src0_valid;                                                              // rsp_demux_038:src0_valid -> rsp_mux:sink38_valid
	wire  [104:0] rsp_demux_038_src0_data;                                                               // rsp_demux_038:src0_data -> rsp_mux:sink38_data
	wire          rsp_demux_038_src0_ready;                                                              // rsp_mux:sink38_ready -> rsp_demux_038:src0_ready
	wire   [46:0] rsp_demux_038_src0_channel;                                                            // rsp_demux_038:src0_channel -> rsp_mux:sink38_channel
	wire          rsp_demux_038_src0_startofpacket;                                                      // rsp_demux_038:src0_startofpacket -> rsp_mux:sink38_startofpacket
	wire          rsp_demux_038_src0_endofpacket;                                                        // rsp_demux_038:src0_endofpacket -> rsp_mux:sink38_endofpacket
	wire          rsp_demux_039_src0_valid;                                                              // rsp_demux_039:src0_valid -> rsp_mux:sink39_valid
	wire  [104:0] rsp_demux_039_src0_data;                                                               // rsp_demux_039:src0_data -> rsp_mux:sink39_data
	wire          rsp_demux_039_src0_ready;                                                              // rsp_mux:sink39_ready -> rsp_demux_039:src0_ready
	wire   [46:0] rsp_demux_039_src0_channel;                                                            // rsp_demux_039:src0_channel -> rsp_mux:sink39_channel
	wire          rsp_demux_039_src0_startofpacket;                                                      // rsp_demux_039:src0_startofpacket -> rsp_mux:sink39_startofpacket
	wire          rsp_demux_039_src0_endofpacket;                                                        // rsp_demux_039:src0_endofpacket -> rsp_mux:sink39_endofpacket
	wire          rsp_demux_040_src0_valid;                                                              // rsp_demux_040:src0_valid -> rsp_mux:sink40_valid
	wire  [104:0] rsp_demux_040_src0_data;                                                               // rsp_demux_040:src0_data -> rsp_mux:sink40_data
	wire          rsp_demux_040_src0_ready;                                                              // rsp_mux:sink40_ready -> rsp_demux_040:src0_ready
	wire   [46:0] rsp_demux_040_src0_channel;                                                            // rsp_demux_040:src0_channel -> rsp_mux:sink40_channel
	wire          rsp_demux_040_src0_startofpacket;                                                      // rsp_demux_040:src0_startofpacket -> rsp_mux:sink40_startofpacket
	wire          rsp_demux_040_src0_endofpacket;                                                        // rsp_demux_040:src0_endofpacket -> rsp_mux:sink40_endofpacket
	wire          rsp_demux_041_src0_valid;                                                              // rsp_demux_041:src0_valid -> rsp_mux:sink41_valid
	wire  [104:0] rsp_demux_041_src0_data;                                                               // rsp_demux_041:src0_data -> rsp_mux:sink41_data
	wire          rsp_demux_041_src0_ready;                                                              // rsp_mux:sink41_ready -> rsp_demux_041:src0_ready
	wire   [46:0] rsp_demux_041_src0_channel;                                                            // rsp_demux_041:src0_channel -> rsp_mux:sink41_channel
	wire          rsp_demux_041_src0_startofpacket;                                                      // rsp_demux_041:src0_startofpacket -> rsp_mux:sink41_startofpacket
	wire          rsp_demux_041_src0_endofpacket;                                                        // rsp_demux_041:src0_endofpacket -> rsp_mux:sink41_endofpacket
	wire          rsp_demux_042_src0_valid;                                                              // rsp_demux_042:src0_valid -> rsp_mux:sink42_valid
	wire  [104:0] rsp_demux_042_src0_data;                                                               // rsp_demux_042:src0_data -> rsp_mux:sink42_data
	wire          rsp_demux_042_src0_ready;                                                              // rsp_mux:sink42_ready -> rsp_demux_042:src0_ready
	wire   [46:0] rsp_demux_042_src0_channel;                                                            // rsp_demux_042:src0_channel -> rsp_mux:sink42_channel
	wire          rsp_demux_042_src0_startofpacket;                                                      // rsp_demux_042:src0_startofpacket -> rsp_mux:sink42_startofpacket
	wire          rsp_demux_042_src0_endofpacket;                                                        // rsp_demux_042:src0_endofpacket -> rsp_mux:sink42_endofpacket
	wire          rsp_demux_043_src0_valid;                                                              // rsp_demux_043:src0_valid -> rsp_mux:sink43_valid
	wire  [104:0] rsp_demux_043_src0_data;                                                               // rsp_demux_043:src0_data -> rsp_mux:sink43_data
	wire          rsp_demux_043_src0_ready;                                                              // rsp_mux:sink43_ready -> rsp_demux_043:src0_ready
	wire   [46:0] rsp_demux_043_src0_channel;                                                            // rsp_demux_043:src0_channel -> rsp_mux:sink43_channel
	wire          rsp_demux_043_src0_startofpacket;                                                      // rsp_demux_043:src0_startofpacket -> rsp_mux:sink43_startofpacket
	wire          rsp_demux_043_src0_endofpacket;                                                        // rsp_demux_043:src0_endofpacket -> rsp_mux:sink43_endofpacket
	wire          rsp_demux_044_src0_valid;                                                              // rsp_demux_044:src0_valid -> rsp_mux:sink44_valid
	wire  [104:0] rsp_demux_044_src0_data;                                                               // rsp_demux_044:src0_data -> rsp_mux:sink44_data
	wire          rsp_demux_044_src0_ready;                                                              // rsp_mux:sink44_ready -> rsp_demux_044:src0_ready
	wire   [46:0] rsp_demux_044_src0_channel;                                                            // rsp_demux_044:src0_channel -> rsp_mux:sink44_channel
	wire          rsp_demux_044_src0_startofpacket;                                                      // rsp_demux_044:src0_startofpacket -> rsp_mux:sink44_startofpacket
	wire          rsp_demux_044_src0_endofpacket;                                                        // rsp_demux_044:src0_endofpacket -> rsp_mux:sink44_endofpacket
	wire          rsp_demux_045_src0_valid;                                                              // rsp_demux_045:src0_valid -> rsp_mux:sink45_valid
	wire  [104:0] rsp_demux_045_src0_data;                                                               // rsp_demux_045:src0_data -> rsp_mux:sink45_data
	wire          rsp_demux_045_src0_ready;                                                              // rsp_mux:sink45_ready -> rsp_demux_045:src0_ready
	wire   [46:0] rsp_demux_045_src0_channel;                                                            // rsp_demux_045:src0_channel -> rsp_mux:sink45_channel
	wire          rsp_demux_045_src0_startofpacket;                                                      // rsp_demux_045:src0_startofpacket -> rsp_mux:sink45_startofpacket
	wire          rsp_demux_045_src0_endofpacket;                                                        // rsp_demux_045:src0_endofpacket -> rsp_mux:sink45_endofpacket
	wire          rsp_demux_046_src0_valid;                                                              // rsp_demux_046:src0_valid -> rsp_mux:sink46_valid
	wire  [104:0] rsp_demux_046_src0_data;                                                               // rsp_demux_046:src0_data -> rsp_mux:sink46_data
	wire          rsp_demux_046_src0_ready;                                                              // rsp_mux:sink46_ready -> rsp_demux_046:src0_ready
	wire   [46:0] rsp_demux_046_src0_channel;                                                            // rsp_demux_046:src0_channel -> rsp_mux:sink46_channel
	wire          rsp_demux_046_src0_startofpacket;                                                      // rsp_demux_046:src0_startofpacket -> rsp_mux:sink46_startofpacket
	wire          rsp_demux_046_src0_endofpacket;                                                        // rsp_demux_046:src0_endofpacket -> rsp_mux:sink46_endofpacket
	wire          cmd_demux_src25_valid;                                                                 // cmd_demux:src25_valid -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_AM_s1_cmd_width_adapter:in_valid
	wire  [104:0] cmd_demux_src25_data;                                                                  // cmd_demux:src25_data -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_AM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src25_ready;                                                                 // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_AM_s1_cmd_width_adapter:in_ready -> cmd_demux:src25_ready
	wire   [46:0] cmd_demux_src25_channel;                                                               // cmd_demux:src25_channel -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_AM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src25_startofpacket;                                                         // cmd_demux:src25_startofpacket -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_AM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src25_endofpacket;                                                           // cmd_demux:src25_endofpacket -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_AM_s1_cmd_width_adapter:in_endofpacket
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds0_am_s1_cmd_width_adapter_src_valid;         // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_AM_s1_cmd_width_adapter:out_valid -> cmd_mux_025:sink0_valid
	wire   [86:0] nios_cpu_data_master_to_lookup_ram_ram_dds0_am_s1_cmd_width_adapter_src_data;          // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_AM_s1_cmd_width_adapter:out_data -> cmd_mux_025:sink0_data
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds0_am_s1_cmd_width_adapter_src_ready;         // cmd_mux_025:sink0_ready -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_AM_s1_cmd_width_adapter:out_ready
	wire   [46:0] nios_cpu_data_master_to_lookup_ram_ram_dds0_am_s1_cmd_width_adapter_src_channel;       // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_AM_s1_cmd_width_adapter:out_channel -> cmd_mux_025:sink0_channel
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds0_am_s1_cmd_width_adapter_src_startofpacket; // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_AM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_025:sink0_startofpacket
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds0_am_s1_cmd_width_adapter_src_endofpacket;   // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_AM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_025:sink0_endofpacket
	wire          cmd_demux_src26_valid;                                                                 // cmd_demux:src26_valid -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_FM_s1_cmd_width_adapter:in_valid
	wire  [104:0] cmd_demux_src26_data;                                                                  // cmd_demux:src26_data -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_FM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src26_ready;                                                                 // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_FM_s1_cmd_width_adapter:in_ready -> cmd_demux:src26_ready
	wire   [46:0] cmd_demux_src26_channel;                                                               // cmd_demux:src26_channel -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_FM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src26_startofpacket;                                                         // cmd_demux:src26_startofpacket -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_FM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src26_endofpacket;                                                           // cmd_demux:src26_endofpacket -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_FM_s1_cmd_width_adapter:in_endofpacket
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds0_fm_s1_cmd_width_adapter_src_valid;         // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_FM_s1_cmd_width_adapter:out_valid -> cmd_mux_026:sink0_valid
	wire   [86:0] nios_cpu_data_master_to_lookup_ram_ram_dds0_fm_s1_cmd_width_adapter_src_data;          // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_FM_s1_cmd_width_adapter:out_data -> cmd_mux_026:sink0_data
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds0_fm_s1_cmd_width_adapter_src_ready;         // cmd_mux_026:sink0_ready -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_FM_s1_cmd_width_adapter:out_ready
	wire   [46:0] nios_cpu_data_master_to_lookup_ram_ram_dds0_fm_s1_cmd_width_adapter_src_channel;       // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_FM_s1_cmd_width_adapter:out_channel -> cmd_mux_026:sink0_channel
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds0_fm_s1_cmd_width_adapter_src_startofpacket; // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_FM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_026:sink0_startofpacket
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds0_fm_s1_cmd_width_adapter_src_endofpacket;   // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_FM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_026:sink0_endofpacket
	wire          cmd_demux_src27_valid;                                                                 // cmd_demux:src27_valid -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_s1_cmd_width_adapter:in_valid
	wire  [104:0] cmd_demux_src27_data;                                                                  // cmd_demux:src27_data -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src27_ready;                                                                 // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_s1_cmd_width_adapter:in_ready -> cmd_demux:src27_ready
	wire   [46:0] cmd_demux_src27_channel;                                                               // cmd_demux:src27_channel -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src27_startofpacket;                                                         // cmd_demux:src27_startofpacket -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src27_endofpacket;                                                           // cmd_demux:src27_endofpacket -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_s1_cmd_width_adapter:in_endofpacket
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds0_s1_cmd_width_adapter_src_valid;            // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_s1_cmd_width_adapter:out_valid -> cmd_mux_027:sink0_valid
	wire   [86:0] nios_cpu_data_master_to_lookup_ram_ram_dds0_s1_cmd_width_adapter_src_data;             // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_s1_cmd_width_adapter:out_data -> cmd_mux_027:sink0_data
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds0_s1_cmd_width_adapter_src_ready;            // cmd_mux_027:sink0_ready -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_s1_cmd_width_adapter:out_ready
	wire   [46:0] nios_cpu_data_master_to_lookup_ram_ram_dds0_s1_cmd_width_adapter_src_channel;          // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_s1_cmd_width_adapter:out_channel -> cmd_mux_027:sink0_channel
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds0_s1_cmd_width_adapter_src_startofpacket;    // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_027:sink0_startofpacket
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds0_s1_cmd_width_adapter_src_endofpacket;      // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS0_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_027:sink0_endofpacket
	wire          cmd_demux_src28_valid;                                                                 // cmd_demux:src28_valid -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_AM_s1_cmd_width_adapter:in_valid
	wire  [104:0] cmd_demux_src28_data;                                                                  // cmd_demux:src28_data -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_AM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src28_ready;                                                                 // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_AM_s1_cmd_width_adapter:in_ready -> cmd_demux:src28_ready
	wire   [46:0] cmd_demux_src28_channel;                                                               // cmd_demux:src28_channel -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_AM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src28_startofpacket;                                                         // cmd_demux:src28_startofpacket -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_AM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src28_endofpacket;                                                           // cmd_demux:src28_endofpacket -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_AM_s1_cmd_width_adapter:in_endofpacket
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds1_am_s1_cmd_width_adapter_src_valid;         // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_AM_s1_cmd_width_adapter:out_valid -> cmd_mux_028:sink0_valid
	wire   [86:0] nios_cpu_data_master_to_lookup_ram_ram_dds1_am_s1_cmd_width_adapter_src_data;          // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_AM_s1_cmd_width_adapter:out_data -> cmd_mux_028:sink0_data
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds1_am_s1_cmd_width_adapter_src_ready;         // cmd_mux_028:sink0_ready -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_AM_s1_cmd_width_adapter:out_ready
	wire   [46:0] nios_cpu_data_master_to_lookup_ram_ram_dds1_am_s1_cmd_width_adapter_src_channel;       // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_AM_s1_cmd_width_adapter:out_channel -> cmd_mux_028:sink0_channel
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds1_am_s1_cmd_width_adapter_src_startofpacket; // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_AM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_028:sink0_startofpacket
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds1_am_s1_cmd_width_adapter_src_endofpacket;   // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_AM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_028:sink0_endofpacket
	wire          cmd_demux_src29_valid;                                                                 // cmd_demux:src29_valid -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_FM_s1_cmd_width_adapter:in_valid
	wire  [104:0] cmd_demux_src29_data;                                                                  // cmd_demux:src29_data -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_FM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src29_ready;                                                                 // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_FM_s1_cmd_width_adapter:in_ready -> cmd_demux:src29_ready
	wire   [46:0] cmd_demux_src29_channel;                                                               // cmd_demux:src29_channel -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_FM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src29_startofpacket;                                                         // cmd_demux:src29_startofpacket -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_FM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src29_endofpacket;                                                           // cmd_demux:src29_endofpacket -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_FM_s1_cmd_width_adapter:in_endofpacket
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds1_fm_s1_cmd_width_adapter_src_valid;         // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_FM_s1_cmd_width_adapter:out_valid -> cmd_mux_029:sink0_valid
	wire   [86:0] nios_cpu_data_master_to_lookup_ram_ram_dds1_fm_s1_cmd_width_adapter_src_data;          // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_FM_s1_cmd_width_adapter:out_data -> cmd_mux_029:sink0_data
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds1_fm_s1_cmd_width_adapter_src_ready;         // cmd_mux_029:sink0_ready -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_FM_s1_cmd_width_adapter:out_ready
	wire   [46:0] nios_cpu_data_master_to_lookup_ram_ram_dds1_fm_s1_cmd_width_adapter_src_channel;       // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_FM_s1_cmd_width_adapter:out_channel -> cmd_mux_029:sink0_channel
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds1_fm_s1_cmd_width_adapter_src_startofpacket; // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_FM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_029:sink0_startofpacket
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds1_fm_s1_cmd_width_adapter_src_endofpacket;   // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_FM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_029:sink0_endofpacket
	wire          cmd_demux_src30_valid;                                                                 // cmd_demux:src30_valid -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_s1_cmd_width_adapter:in_valid
	wire  [104:0] cmd_demux_src30_data;                                                                  // cmd_demux:src30_data -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src30_ready;                                                                 // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_s1_cmd_width_adapter:in_ready -> cmd_demux:src30_ready
	wire   [46:0] cmd_demux_src30_channel;                                                               // cmd_demux:src30_channel -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src30_startofpacket;                                                         // cmd_demux:src30_startofpacket -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src30_endofpacket;                                                           // cmd_demux:src30_endofpacket -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_s1_cmd_width_adapter:in_endofpacket
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds1_s1_cmd_width_adapter_src_valid;            // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_s1_cmd_width_adapter:out_valid -> cmd_mux_030:sink0_valid
	wire   [86:0] nios_cpu_data_master_to_lookup_ram_ram_dds1_s1_cmd_width_adapter_src_data;             // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_s1_cmd_width_adapter:out_data -> cmd_mux_030:sink0_data
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds1_s1_cmd_width_adapter_src_ready;            // cmd_mux_030:sink0_ready -> NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_s1_cmd_width_adapter:out_ready
	wire   [46:0] nios_cpu_data_master_to_lookup_ram_ram_dds1_s1_cmd_width_adapter_src_channel;          // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_s1_cmd_width_adapter:out_channel -> cmd_mux_030:sink0_channel
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds1_s1_cmd_width_adapter_src_startofpacket;    // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_030:sink0_startofpacket
	wire          nios_cpu_data_master_to_lookup_ram_ram_dds1_s1_cmd_width_adapter_src_endofpacket;      // NIOS_CPU_data_master_to_LOOKUP_RAM_RAM_DDS1_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_030:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                              // cmd_demux_001:src0_valid -> LCD_DMA_read_master_to_RAM_24K_s1_cmd_width_adapter:in_valid
	wire   [77:0] cmd_demux_001_src0_data;                                                               // cmd_demux_001:src0_data -> LCD_DMA_read_master_to_RAM_24K_s1_cmd_width_adapter:in_data
	wire          cmd_demux_001_src0_ready;                                                              // LCD_DMA_read_master_to_RAM_24K_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire   [46:0] cmd_demux_001_src0_channel;                                                            // cmd_demux_001:src0_channel -> LCD_DMA_read_master_to_RAM_24K_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                      // cmd_demux_001:src0_startofpacket -> LCD_DMA_read_master_to_RAM_24K_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                        // cmd_demux_001:src0_endofpacket -> LCD_DMA_read_master_to_RAM_24K_s1_cmd_width_adapter:in_endofpacket
	wire          lcd_dma_read_master_to_ram_24k_s1_cmd_width_adapter_src_valid;                         // LCD_DMA_read_master_to_RAM_24K_s1_cmd_width_adapter:out_valid -> cmd_mux_037:sink1_valid
	wire  [104:0] lcd_dma_read_master_to_ram_24k_s1_cmd_width_adapter_src_data;                          // LCD_DMA_read_master_to_RAM_24K_s1_cmd_width_adapter:out_data -> cmd_mux_037:sink1_data
	wire          lcd_dma_read_master_to_ram_24k_s1_cmd_width_adapter_src_ready;                         // cmd_mux_037:sink1_ready -> LCD_DMA_read_master_to_RAM_24K_s1_cmd_width_adapter:out_ready
	wire   [46:0] lcd_dma_read_master_to_ram_24k_s1_cmd_width_adapter_src_channel;                       // LCD_DMA_read_master_to_RAM_24K_s1_cmd_width_adapter:out_channel -> cmd_mux_037:sink1_channel
	wire          lcd_dma_read_master_to_ram_24k_s1_cmd_width_adapter_src_startofpacket;                 // LCD_DMA_read_master_to_RAM_24K_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_037:sink1_startofpacket
	wire          lcd_dma_read_master_to_ram_24k_s1_cmd_width_adapter_src_endofpacket;                   // LCD_DMA_read_master_to_RAM_24K_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_037:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                              // cmd_demux_002:src0_valid -> SPI_DMA_write_master_to_RAM_24K_s1_cmd_width_adapter:in_valid
	wire   [77:0] cmd_demux_002_src0_data;                                                               // cmd_demux_002:src0_data -> SPI_DMA_write_master_to_RAM_24K_s1_cmd_width_adapter:in_data
	wire          cmd_demux_002_src0_ready;                                                              // SPI_DMA_write_master_to_RAM_24K_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src0_ready
	wire   [46:0] cmd_demux_002_src0_channel;                                                            // cmd_demux_002:src0_channel -> SPI_DMA_write_master_to_RAM_24K_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                      // cmd_demux_002:src0_startofpacket -> SPI_DMA_write_master_to_RAM_24K_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                        // cmd_demux_002:src0_endofpacket -> SPI_DMA_write_master_to_RAM_24K_s1_cmd_width_adapter:in_endofpacket
	wire          spi_dma_write_master_to_ram_24k_s1_cmd_width_adapter_src_valid;                        // SPI_DMA_write_master_to_RAM_24K_s1_cmd_width_adapter:out_valid -> cmd_mux_037:sink2_valid
	wire  [104:0] spi_dma_write_master_to_ram_24k_s1_cmd_width_adapter_src_data;                         // SPI_DMA_write_master_to_RAM_24K_s1_cmd_width_adapter:out_data -> cmd_mux_037:sink2_data
	wire          spi_dma_write_master_to_ram_24k_s1_cmd_width_adapter_src_ready;                        // cmd_mux_037:sink2_ready -> SPI_DMA_write_master_to_RAM_24K_s1_cmd_width_adapter:out_ready
	wire   [46:0] spi_dma_write_master_to_ram_24k_s1_cmd_width_adapter_src_channel;                      // SPI_DMA_write_master_to_RAM_24K_s1_cmd_width_adapter:out_channel -> cmd_mux_037:sink2_channel
	wire          spi_dma_write_master_to_ram_24k_s1_cmd_width_adapter_src_startofpacket;                // SPI_DMA_write_master_to_RAM_24K_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_037:sink2_startofpacket
	wire          spi_dma_write_master_to_ram_24k_s1_cmd_width_adapter_src_endofpacket;                  // SPI_DMA_write_master_to_RAM_24K_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_037:sink2_endofpacket
	wire          rsp_demux_025_src0_valid;                                                              // rsp_demux_025:src0_valid -> LOOKUP_RAM_RAM_DDS0_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_valid
	wire   [86:0] rsp_demux_025_src0_data;                                                               // rsp_demux_025:src0_data -> LOOKUP_RAM_RAM_DDS0_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_025_src0_ready;                                                              // LOOKUP_RAM_RAM_DDS0_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_ready -> rsp_demux_025:src0_ready
	wire   [46:0] rsp_demux_025_src0_channel;                                                            // rsp_demux_025:src0_channel -> LOOKUP_RAM_RAM_DDS0_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_025_src0_startofpacket;                                                      // rsp_demux_025:src0_startofpacket -> LOOKUP_RAM_RAM_DDS0_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_025_src0_endofpacket;                                                        // rsp_demux_025:src0_endofpacket -> LOOKUP_RAM_RAM_DDS0_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_endofpacket
	wire          lookup_ram_ram_dds0_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_valid;         // LOOKUP_RAM_RAM_DDS0_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_valid -> rsp_mux:sink25_valid
	wire  [104:0] lookup_ram_ram_dds0_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_data;          // LOOKUP_RAM_RAM_DDS0_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_data -> rsp_mux:sink25_data
	wire          lookup_ram_ram_dds0_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_ready;         // rsp_mux:sink25_ready -> LOOKUP_RAM_RAM_DDS0_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_ready
	wire   [46:0] lookup_ram_ram_dds0_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_channel;       // LOOKUP_RAM_RAM_DDS0_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_channel -> rsp_mux:sink25_channel
	wire          lookup_ram_ram_dds0_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket; // LOOKUP_RAM_RAM_DDS0_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink25_startofpacket
	wire          lookup_ram_ram_dds0_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket;   // LOOKUP_RAM_RAM_DDS0_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink25_endofpacket
	wire          rsp_demux_026_src0_valid;                                                              // rsp_demux_026:src0_valid -> LOOKUP_RAM_RAM_DDS0_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_valid
	wire   [86:0] rsp_demux_026_src0_data;                                                               // rsp_demux_026:src0_data -> LOOKUP_RAM_RAM_DDS0_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_026_src0_ready;                                                              // LOOKUP_RAM_RAM_DDS0_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_ready -> rsp_demux_026:src0_ready
	wire   [46:0] rsp_demux_026_src0_channel;                                                            // rsp_demux_026:src0_channel -> LOOKUP_RAM_RAM_DDS0_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_026_src0_startofpacket;                                                      // rsp_demux_026:src0_startofpacket -> LOOKUP_RAM_RAM_DDS0_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_026_src0_endofpacket;                                                        // rsp_demux_026:src0_endofpacket -> LOOKUP_RAM_RAM_DDS0_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_endofpacket
	wire          lookup_ram_ram_dds0_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_valid;         // LOOKUP_RAM_RAM_DDS0_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_valid -> rsp_mux:sink26_valid
	wire  [104:0] lookup_ram_ram_dds0_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_data;          // LOOKUP_RAM_RAM_DDS0_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_data -> rsp_mux:sink26_data
	wire          lookup_ram_ram_dds0_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_ready;         // rsp_mux:sink26_ready -> LOOKUP_RAM_RAM_DDS0_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_ready
	wire   [46:0] lookup_ram_ram_dds0_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_channel;       // LOOKUP_RAM_RAM_DDS0_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_channel -> rsp_mux:sink26_channel
	wire          lookup_ram_ram_dds0_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket; // LOOKUP_RAM_RAM_DDS0_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink26_startofpacket
	wire          lookup_ram_ram_dds0_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket;   // LOOKUP_RAM_RAM_DDS0_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink26_endofpacket
	wire          rsp_demux_027_src0_valid;                                                              // rsp_demux_027:src0_valid -> LOOKUP_RAM_RAM_DDS0_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_valid
	wire   [86:0] rsp_demux_027_src0_data;                                                               // rsp_demux_027:src0_data -> LOOKUP_RAM_RAM_DDS0_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_027_src0_ready;                                                              // LOOKUP_RAM_RAM_DDS0_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_ready -> rsp_demux_027:src0_ready
	wire   [46:0] rsp_demux_027_src0_channel;                                                            // rsp_demux_027:src0_channel -> LOOKUP_RAM_RAM_DDS0_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_027_src0_startofpacket;                                                      // rsp_demux_027:src0_startofpacket -> LOOKUP_RAM_RAM_DDS0_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_027_src0_endofpacket;                                                        // rsp_demux_027:src0_endofpacket -> LOOKUP_RAM_RAM_DDS0_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_endofpacket
	wire          lookup_ram_ram_dds0_s1_to_nios_cpu_data_master_rsp_width_adapter_src_valid;            // LOOKUP_RAM_RAM_DDS0_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_valid -> rsp_mux:sink27_valid
	wire  [104:0] lookup_ram_ram_dds0_s1_to_nios_cpu_data_master_rsp_width_adapter_src_data;             // LOOKUP_RAM_RAM_DDS0_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_data -> rsp_mux:sink27_data
	wire          lookup_ram_ram_dds0_s1_to_nios_cpu_data_master_rsp_width_adapter_src_ready;            // rsp_mux:sink27_ready -> LOOKUP_RAM_RAM_DDS0_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_ready
	wire   [46:0] lookup_ram_ram_dds0_s1_to_nios_cpu_data_master_rsp_width_adapter_src_channel;          // LOOKUP_RAM_RAM_DDS0_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_channel -> rsp_mux:sink27_channel
	wire          lookup_ram_ram_dds0_s1_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket;    // LOOKUP_RAM_RAM_DDS0_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink27_startofpacket
	wire          lookup_ram_ram_dds0_s1_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket;      // LOOKUP_RAM_RAM_DDS0_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink27_endofpacket
	wire          rsp_demux_028_src0_valid;                                                              // rsp_demux_028:src0_valid -> LOOKUP_RAM_RAM_DDS1_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_valid
	wire   [86:0] rsp_demux_028_src0_data;                                                               // rsp_demux_028:src0_data -> LOOKUP_RAM_RAM_DDS1_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_028_src0_ready;                                                              // LOOKUP_RAM_RAM_DDS1_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_ready -> rsp_demux_028:src0_ready
	wire   [46:0] rsp_demux_028_src0_channel;                                                            // rsp_demux_028:src0_channel -> LOOKUP_RAM_RAM_DDS1_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_028_src0_startofpacket;                                                      // rsp_demux_028:src0_startofpacket -> LOOKUP_RAM_RAM_DDS1_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_028_src0_endofpacket;                                                        // rsp_demux_028:src0_endofpacket -> LOOKUP_RAM_RAM_DDS1_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_endofpacket
	wire          lookup_ram_ram_dds1_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_valid;         // LOOKUP_RAM_RAM_DDS1_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_valid -> rsp_mux:sink28_valid
	wire  [104:0] lookup_ram_ram_dds1_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_data;          // LOOKUP_RAM_RAM_DDS1_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_data -> rsp_mux:sink28_data
	wire          lookup_ram_ram_dds1_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_ready;         // rsp_mux:sink28_ready -> LOOKUP_RAM_RAM_DDS1_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_ready
	wire   [46:0] lookup_ram_ram_dds1_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_channel;       // LOOKUP_RAM_RAM_DDS1_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_channel -> rsp_mux:sink28_channel
	wire          lookup_ram_ram_dds1_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket; // LOOKUP_RAM_RAM_DDS1_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink28_startofpacket
	wire          lookup_ram_ram_dds1_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket;   // LOOKUP_RAM_RAM_DDS1_AM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink28_endofpacket
	wire          rsp_demux_029_src0_valid;                                                              // rsp_demux_029:src0_valid -> LOOKUP_RAM_RAM_DDS1_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_valid
	wire   [86:0] rsp_demux_029_src0_data;                                                               // rsp_demux_029:src0_data -> LOOKUP_RAM_RAM_DDS1_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_029_src0_ready;                                                              // LOOKUP_RAM_RAM_DDS1_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_ready -> rsp_demux_029:src0_ready
	wire   [46:0] rsp_demux_029_src0_channel;                                                            // rsp_demux_029:src0_channel -> LOOKUP_RAM_RAM_DDS1_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_029_src0_startofpacket;                                                      // rsp_demux_029:src0_startofpacket -> LOOKUP_RAM_RAM_DDS1_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_029_src0_endofpacket;                                                        // rsp_demux_029:src0_endofpacket -> LOOKUP_RAM_RAM_DDS1_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_endofpacket
	wire          lookup_ram_ram_dds1_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_valid;         // LOOKUP_RAM_RAM_DDS1_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_valid -> rsp_mux:sink29_valid
	wire  [104:0] lookup_ram_ram_dds1_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_data;          // LOOKUP_RAM_RAM_DDS1_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_data -> rsp_mux:sink29_data
	wire          lookup_ram_ram_dds1_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_ready;         // rsp_mux:sink29_ready -> LOOKUP_RAM_RAM_DDS1_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_ready
	wire   [46:0] lookup_ram_ram_dds1_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_channel;       // LOOKUP_RAM_RAM_DDS1_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_channel -> rsp_mux:sink29_channel
	wire          lookup_ram_ram_dds1_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket; // LOOKUP_RAM_RAM_DDS1_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink29_startofpacket
	wire          lookup_ram_ram_dds1_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket;   // LOOKUP_RAM_RAM_DDS1_FM_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink29_endofpacket
	wire          rsp_demux_030_src0_valid;                                                              // rsp_demux_030:src0_valid -> LOOKUP_RAM_RAM_DDS1_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_valid
	wire   [86:0] rsp_demux_030_src0_data;                                                               // rsp_demux_030:src0_data -> LOOKUP_RAM_RAM_DDS1_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_030_src0_ready;                                                              // LOOKUP_RAM_RAM_DDS1_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_ready -> rsp_demux_030:src0_ready
	wire   [46:0] rsp_demux_030_src0_channel;                                                            // rsp_demux_030:src0_channel -> LOOKUP_RAM_RAM_DDS1_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_030_src0_startofpacket;                                                      // rsp_demux_030:src0_startofpacket -> LOOKUP_RAM_RAM_DDS1_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_030_src0_endofpacket;                                                        // rsp_demux_030:src0_endofpacket -> LOOKUP_RAM_RAM_DDS1_s1_to_NIOS_CPU_data_master_rsp_width_adapter:in_endofpacket
	wire          lookup_ram_ram_dds1_s1_to_nios_cpu_data_master_rsp_width_adapter_src_valid;            // LOOKUP_RAM_RAM_DDS1_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_valid -> rsp_mux:sink30_valid
	wire  [104:0] lookup_ram_ram_dds1_s1_to_nios_cpu_data_master_rsp_width_adapter_src_data;             // LOOKUP_RAM_RAM_DDS1_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_data -> rsp_mux:sink30_data
	wire          lookup_ram_ram_dds1_s1_to_nios_cpu_data_master_rsp_width_adapter_src_ready;            // rsp_mux:sink30_ready -> LOOKUP_RAM_RAM_DDS1_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_ready
	wire   [46:0] lookup_ram_ram_dds1_s1_to_nios_cpu_data_master_rsp_width_adapter_src_channel;          // LOOKUP_RAM_RAM_DDS1_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_channel -> rsp_mux:sink30_channel
	wire          lookup_ram_ram_dds1_s1_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket;    // LOOKUP_RAM_RAM_DDS1_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink30_startofpacket
	wire          lookup_ram_ram_dds1_s1_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket;      // LOOKUP_RAM_RAM_DDS1_s1_to_NIOS_CPU_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink30_endofpacket
	wire          rsp_demux_037_src1_valid;                                                              // rsp_demux_037:src1_valid -> RAM_24K_s1_to_LCD_DMA_read_master_rsp_width_adapter:in_valid
	wire  [104:0] rsp_demux_037_src1_data;                                                               // rsp_demux_037:src1_data -> RAM_24K_s1_to_LCD_DMA_read_master_rsp_width_adapter:in_data
	wire          rsp_demux_037_src1_ready;                                                              // RAM_24K_s1_to_LCD_DMA_read_master_rsp_width_adapter:in_ready -> rsp_demux_037:src1_ready
	wire   [46:0] rsp_demux_037_src1_channel;                                                            // rsp_demux_037:src1_channel -> RAM_24K_s1_to_LCD_DMA_read_master_rsp_width_adapter:in_channel
	wire          rsp_demux_037_src1_startofpacket;                                                      // rsp_demux_037:src1_startofpacket -> RAM_24K_s1_to_LCD_DMA_read_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_037_src1_endofpacket;                                                        // rsp_demux_037:src1_endofpacket -> RAM_24K_s1_to_LCD_DMA_read_master_rsp_width_adapter:in_endofpacket
	wire          ram_24k_s1_to_lcd_dma_read_master_rsp_width_adapter_src_valid;                         // RAM_24K_s1_to_LCD_DMA_read_master_rsp_width_adapter:out_valid -> rsp_mux_001:sink0_valid
	wire   [77:0] ram_24k_s1_to_lcd_dma_read_master_rsp_width_adapter_src_data;                          // RAM_24K_s1_to_LCD_DMA_read_master_rsp_width_adapter:out_data -> rsp_mux_001:sink0_data
	wire          ram_24k_s1_to_lcd_dma_read_master_rsp_width_adapter_src_ready;                         // rsp_mux_001:sink0_ready -> RAM_24K_s1_to_LCD_DMA_read_master_rsp_width_adapter:out_ready
	wire   [46:0] ram_24k_s1_to_lcd_dma_read_master_rsp_width_adapter_src_channel;                       // RAM_24K_s1_to_LCD_DMA_read_master_rsp_width_adapter:out_channel -> rsp_mux_001:sink0_channel
	wire          ram_24k_s1_to_lcd_dma_read_master_rsp_width_adapter_src_startofpacket;                 // RAM_24K_s1_to_LCD_DMA_read_master_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          ram_24k_s1_to_lcd_dma_read_master_rsp_width_adapter_src_endofpacket;                   // RAM_24K_s1_to_LCD_DMA_read_master_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_037_src2_valid;                                                              // rsp_demux_037:src2_valid -> RAM_24K_s1_to_SPI_DMA_write_master_rsp_width_adapter:in_valid
	wire  [104:0] rsp_demux_037_src2_data;                                                               // rsp_demux_037:src2_data -> RAM_24K_s1_to_SPI_DMA_write_master_rsp_width_adapter:in_data
	wire          rsp_demux_037_src2_ready;                                                              // RAM_24K_s1_to_SPI_DMA_write_master_rsp_width_adapter:in_ready -> rsp_demux_037:src2_ready
	wire   [46:0] rsp_demux_037_src2_channel;                                                            // rsp_demux_037:src2_channel -> RAM_24K_s1_to_SPI_DMA_write_master_rsp_width_adapter:in_channel
	wire          rsp_demux_037_src2_startofpacket;                                                      // rsp_demux_037:src2_startofpacket -> RAM_24K_s1_to_SPI_DMA_write_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_037_src2_endofpacket;                                                        // rsp_demux_037:src2_endofpacket -> RAM_24K_s1_to_SPI_DMA_write_master_rsp_width_adapter:in_endofpacket
	wire          ram_24k_s1_to_spi_dma_write_master_rsp_width_adapter_src_valid;                        // RAM_24K_s1_to_SPI_DMA_write_master_rsp_width_adapter:out_valid -> rsp_mux_002:sink0_valid
	wire   [77:0] ram_24k_s1_to_spi_dma_write_master_rsp_width_adapter_src_data;                         // RAM_24K_s1_to_SPI_DMA_write_master_rsp_width_adapter:out_data -> rsp_mux_002:sink0_data
	wire          ram_24k_s1_to_spi_dma_write_master_rsp_width_adapter_src_ready;                        // rsp_mux_002:sink0_ready -> RAM_24K_s1_to_SPI_DMA_write_master_rsp_width_adapter:out_ready
	wire   [46:0] ram_24k_s1_to_spi_dma_write_master_rsp_width_adapter_src_channel;                      // RAM_24K_s1_to_SPI_DMA_write_master_rsp_width_adapter:out_channel -> rsp_mux_002:sink0_channel
	wire          ram_24k_s1_to_spi_dma_write_master_rsp_width_adapter_src_startofpacket;                // RAM_24K_s1_to_SPI_DMA_write_master_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          ram_24k_s1_to_spi_dma_write_master_rsp_width_adapter_src_endofpacket;                  // RAM_24K_s1_to_SPI_DMA_write_master_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          dds0_am_modindex_s1_agent_rdata_fifo_src_valid;                                        // DDS0_AM_ModIndex_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] dds0_am_modindex_s1_agent_rdata_fifo_src_data;                                         // DDS0_AM_ModIndex_s1_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          dds0_am_modindex_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter:in_0_ready -> DDS0_AM_ModIndex_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                         // avalon_st_adapter:out_0_valid -> DDS0_AM_ModIndex_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                          // avalon_st_adapter:out_0_data -> DDS0_AM_ModIndex_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                         // DDS0_AM_ModIndex_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                         // avalon_st_adapter:out_0_error -> DDS0_AM_ModIndex_s1_agent:rdata_fifo_sink_error
	wire          dds1_am_modindex_s1_agent_rdata_fifo_src_valid;                                        // DDS1_AM_ModIndex_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] dds1_am_modindex_s1_agent_rdata_fifo_src_data;                                         // DDS1_AM_ModIndex_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          dds1_am_modindex_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_001:in_0_ready -> DDS1_AM_ModIndex_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                     // avalon_st_adapter_001:out_0_valid -> DDS1_AM_ModIndex_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                      // avalon_st_adapter_001:out_0_data -> DDS1_AM_ModIndex_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                     // DDS1_AM_ModIndex_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                     // avalon_st_adapter_001:out_0_error -> DDS1_AM_ModIndex_s1_agent:rdata_fifo_sink_error
	wire          dds0_am_modphasestep_s1_agent_rdata_fifo_src_valid;                                    // DDS0_AM_ModPhaseStep_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] dds0_am_modphasestep_s1_agent_rdata_fifo_src_data;                                     // DDS0_AM_ModPhaseStep_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          dds0_am_modphasestep_s1_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_002:in_0_ready -> DDS0_AM_ModPhaseStep_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                     // avalon_st_adapter_002:out_0_valid -> DDS0_AM_ModPhaseStep_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                      // avalon_st_adapter_002:out_0_data -> DDS0_AM_ModPhaseStep_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                     // DDS0_AM_ModPhaseStep_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                     // avalon_st_adapter_002:out_0_error -> DDS0_AM_ModPhaseStep_s1_agent:rdata_fifo_sink_error
	wire          dds1_am_modphasestep_s1_agent_rdata_fifo_src_valid;                                    // DDS1_AM_ModPhaseStep_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] dds1_am_modphasestep_s1_agent_rdata_fifo_src_data;                                     // DDS1_AM_ModPhaseStep_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          dds1_am_modphasestep_s1_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_003:in_0_ready -> DDS1_AM_ModPhaseStep_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                     // avalon_st_adapter_003:out_0_valid -> DDS1_AM_ModPhaseStep_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                      // avalon_st_adapter_003:out_0_data -> DDS1_AM_ModPhaseStep_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                     // DDS1_AM_ModPhaseStep_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                     // avalon_st_adapter_003:out_0_error -> DDS1_AM_ModPhaseStep_s1_agent:rdata_fifo_sink_error
	wire          lcd_backlight_pwm_s1_agent_rdata_fifo_src_valid;                                       // LCD_BackLight_PWM_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] lcd_backlight_pwm_s1_agent_rdata_fifo_src_data;                                        // LCD_BackLight_PWM_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          lcd_backlight_pwm_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_004:in_0_ready -> LCD_BackLight_PWM_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                     // avalon_st_adapter_004:out_0_valid -> LCD_BackLight_PWM_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                      // avalon_st_adapter_004:out_0_data -> LCD_BackLight_PWM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                     // LCD_BackLight_PWM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                     // avalon_st_adapter_004:out_0_error -> LCD_BackLight_PWM_s1_agent:rdata_fifo_sink_error
	wire          lcd_control_s1_agent_rdata_fifo_src_valid;                                             // LCD_Control_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] lcd_control_s1_agent_rdata_fifo_src_data;                                              // LCD_Control_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          lcd_control_s1_agent_rdata_fifo_src_ready;                                             // avalon_st_adapter_005:in_0_ready -> LCD_Control_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                     // avalon_st_adapter_005:out_0_valid -> LCD_Control_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                      // avalon_st_adapter_005:out_0_data -> LCD_Control_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                     // LCD_Control_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                     // avalon_st_adapter_005:out_0_error -> LCD_Control_s1_agent:rdata_fifo_sink_error
	wire          lcd_data_s1_agent_rdata_fifo_src_valid;                                                // LCD_Data_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] lcd_data_s1_agent_rdata_fifo_src_data;                                                 // LCD_Data_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          lcd_data_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_006:in_0_ready -> LCD_Data_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                     // avalon_st_adapter_006:out_0_valid -> LCD_Data_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                      // avalon_st_adapter_006:out_0_data -> LCD_Data_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                     // LCD_Data_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                     // avalon_st_adapter_006:out_0_error -> LCD_Data_s1_agent:rdata_fifo_sink_error
	wire          dds0_fm_moddeviationphase_s1_agent_rdata_fifo_src_valid;                               // DDS0_FM_ModDeviationPhase_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] dds0_fm_moddeviationphase_s1_agent_rdata_fifo_src_data;                                // DDS0_FM_ModDeviationPhase_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          dds0_fm_moddeviationphase_s1_agent_rdata_fifo_src_ready;                               // avalon_st_adapter_007:in_0_ready -> DDS0_FM_ModDeviationPhase_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                     // avalon_st_adapter_007:out_0_valid -> DDS0_FM_ModDeviationPhase_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                      // avalon_st_adapter_007:out_0_data -> DDS0_FM_ModDeviationPhase_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                     // DDS0_FM_ModDeviationPhase_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                     // avalon_st_adapter_007:out_0_error -> DDS0_FM_ModDeviationPhase_s1_agent:rdata_fifo_sink_error
	wire          dds1_fm_moddeviationphase_s1_agent_rdata_fifo_src_valid;                               // DDS1_FM_ModDeviationPhase_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] dds1_fm_moddeviationphase_s1_agent_rdata_fifo_src_data;                                // DDS1_FM_ModDeviationPhase_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          dds1_fm_moddeviationphase_s1_agent_rdata_fifo_src_ready;                               // avalon_st_adapter_008:in_0_ready -> DDS1_FM_ModDeviationPhase_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                     // avalon_st_adapter_008:out_0_valid -> DDS1_FM_ModDeviationPhase_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                      // avalon_st_adapter_008:out_0_data -> DDS1_FM_ModDeviationPhase_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                     // DDS1_FM_ModDeviationPhase_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                     // avalon_st_adapter_008:out_0_error -> DDS1_FM_ModDeviationPhase_s1_agent:rdata_fifo_sink_error
	wire          dds0_fm_modphasestep_s1_agent_rdata_fifo_src_valid;                                    // DDS0_FM_ModPhaseStep_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] dds0_fm_modphasestep_s1_agent_rdata_fifo_src_data;                                     // DDS0_FM_ModPhaseStep_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          dds0_fm_modphasestep_s1_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_009:in_0_ready -> DDS0_FM_ModPhaseStep_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                     // avalon_st_adapter_009:out_0_valid -> DDS0_FM_ModPhaseStep_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                      // avalon_st_adapter_009:out_0_data -> DDS0_FM_ModPhaseStep_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                     // DDS0_FM_ModPhaseStep_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                     // avalon_st_adapter_009:out_0_error -> DDS0_FM_ModPhaseStep_s1_agent:rdata_fifo_sink_error
	wire          dds1_fm_modphasestep_s1_agent_rdata_fifo_src_valid;                                    // DDS1_FM_ModPhaseStep_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] dds1_fm_modphasestep_s1_agent_rdata_fifo_src_data;                                     // DDS1_FM_ModPhaseStep_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          dds1_fm_modphasestep_s1_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_010:in_0_ready -> DDS1_FM_ModPhaseStep_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                     // avalon_st_adapter_010:out_0_valid -> DDS1_FM_ModPhaseStep_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                      // avalon_st_adapter_010:out_0_data -> DDS1_FM_ModPhaseStep_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                     // DDS1_FM_ModPhaseStep_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                     // avalon_st_adapter_010:out_0_error -> DDS1_FM_ModPhaseStep_s1_agent:rdata_fifo_sink_error
	wire          dds0_outputrelay_s1_agent_rdata_fifo_src_valid;                                        // DDS0_OutputRelay_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] dds0_outputrelay_s1_agent_rdata_fifo_src_data;                                         // DDS0_OutputRelay_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          dds0_outputrelay_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_011:in_0_ready -> DDS0_OutputRelay_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                     // avalon_st_adapter_011:out_0_valid -> DDS0_OutputRelay_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                      // avalon_st_adapter_011:out_0_data -> DDS0_OutputRelay_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                     // DDS0_OutputRelay_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                     // avalon_st_adapter_011:out_0_error -> DDS0_OutputRelay_s1_agent:rdata_fifo_sink_error
	wire          dds1_outputrelay_s1_agent_rdata_fifo_src_valid;                                        // DDS1_OutputRelay_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] dds1_outputrelay_s1_agent_rdata_fifo_src_data;                                         // DDS1_OutputRelay_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          dds1_outputrelay_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_012:in_0_ready -> DDS1_OutputRelay_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                     // avalon_st_adapter_012:out_0_valid -> DDS1_OutputRelay_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                      // avalon_st_adapter_012:out_0_data -> DDS1_OutputRelay_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                     // DDS1_OutputRelay_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                     // avalon_st_adapter_012:out_0_error -> DDS1_OutputRelay_s1_agent:rdata_fifo_sink_error
	wire          dds0_pm_modindex_s1_agent_rdata_fifo_src_valid;                                        // DDS0_PM_ModIndex_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] dds0_pm_modindex_s1_agent_rdata_fifo_src_data;                                         // DDS0_PM_ModIndex_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          dds0_pm_modindex_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_013:in_0_ready -> DDS0_PM_ModIndex_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                     // avalon_st_adapter_013:out_0_valid -> DDS0_PM_ModIndex_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                      // avalon_st_adapter_013:out_0_data -> DDS0_PM_ModIndex_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                     // DDS0_PM_ModIndex_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                     // avalon_st_adapter_013:out_0_error -> DDS0_PM_ModIndex_s1_agent:rdata_fifo_sink_error
	wire          dds1_pm_modindex_s1_agent_rdata_fifo_src_valid;                                        // DDS1_PM_ModIndex_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] dds1_pm_modindex_s1_agent_rdata_fifo_src_data;                                         // DDS1_PM_ModIndex_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          dds1_pm_modindex_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_014:in_0_ready -> DDS1_PM_ModIndex_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                     // avalon_st_adapter_014:out_0_valid -> DDS1_PM_ModIndex_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                      // avalon_st_adapter_014:out_0_data -> DDS1_PM_ModIndex_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                     // DDS1_PM_ModIndex_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                     // avalon_st_adapter_014:out_0_error -> DDS1_PM_ModIndex_s1_agent:rdata_fifo_sink_error
	wire          dds0_pm_modphasestep_s1_agent_rdata_fifo_src_valid;                                    // DDS0_PM_ModPhaseStep_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] dds0_pm_modphasestep_s1_agent_rdata_fifo_src_data;                                     // DDS0_PM_ModPhaseStep_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          dds0_pm_modphasestep_s1_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_015:in_0_ready -> DDS0_PM_ModPhaseStep_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                     // avalon_st_adapter_015:out_0_valid -> DDS0_PM_ModPhaseStep_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                      // avalon_st_adapter_015:out_0_data -> DDS0_PM_ModPhaseStep_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                     // DDS0_PM_ModPhaseStep_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                     // avalon_st_adapter_015:out_0_error -> DDS0_PM_ModPhaseStep_s1_agent:rdata_fifo_sink_error
	wire          dds1_pm_modphasestep_s1_agent_rdata_fifo_src_valid;                                    // DDS1_PM_ModPhaseStep_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] dds1_pm_modphasestep_s1_agent_rdata_fifo_src_data;                                     // DDS1_PM_ModPhaseStep_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          dds1_pm_modphasestep_s1_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_016:in_0_ready -> DDS1_PM_ModPhaseStep_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                     // avalon_st_adapter_016:out_0_valid -> DDS1_PM_ModPhaseStep_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                      // avalon_st_adapter_016:out_0_data -> DDS1_PM_ModPhaseStep_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                     // DDS1_PM_ModPhaseStep_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                     // avalon_st_adapter_016:out_0_error -> DDS1_PM_ModPhaseStep_s1_agent:rdata_fifo_sink_error
	wire          dds0_pwm_amplitude_s1_agent_rdata_fifo_src_valid;                                      // DDS0_PWM_Amplitude_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] dds0_pwm_amplitude_s1_agent_rdata_fifo_src_data;                                       // DDS0_PWM_Amplitude_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire          dds0_pwm_amplitude_s1_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_017:in_0_ready -> DDS0_PWM_Amplitude_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                     // avalon_st_adapter_017:out_0_valid -> DDS0_PWM_Amplitude_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                      // avalon_st_adapter_017:out_0_data -> DDS0_PWM_Amplitude_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                     // DDS0_PWM_Amplitude_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                     // avalon_st_adapter_017:out_0_error -> DDS0_PWM_Amplitude_s1_agent:rdata_fifo_sink_error
	wire          dds1_pwm_amplitude_s1_agent_rdata_fifo_src_valid;                                      // DDS1_PWM_Amplitude_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] dds1_pwm_amplitude_s1_agent_rdata_fifo_src_data;                                       // DDS1_PWM_Amplitude_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_018:in_0_data
	wire          dds1_pwm_amplitude_s1_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_018:in_0_ready -> DDS1_PWM_Amplitude_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_018_out_0_valid;                                                     // avalon_st_adapter_018:out_0_valid -> DDS1_PWM_Amplitude_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                      // avalon_st_adapter_018:out_0_data -> DDS1_PWM_Amplitude_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                                     // DDS1_PWM_Amplitude_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                                     // avalon_st_adapter_018:out_0_error -> DDS1_PWM_Amplitude_s1_agent:rdata_fifo_sink_error
	wire          dds0_pwm_offset_s1_agent_rdata_fifo_src_valid;                                         // DDS0_PWM_Offset_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] dds0_pwm_offset_s1_agent_rdata_fifo_src_data;                                          // DDS0_PWM_Offset_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_019:in_0_data
	wire          dds0_pwm_offset_s1_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_019:in_0_ready -> DDS0_PWM_Offset_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_019_out_0_valid;                                                     // avalon_st_adapter_019:out_0_valid -> DDS0_PWM_Offset_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                                      // avalon_st_adapter_019:out_0_data -> DDS0_PWM_Offset_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                                     // DDS0_PWM_Offset_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                                     // avalon_st_adapter_019:out_0_error -> DDS0_PWM_Offset_s1_agent:rdata_fifo_sink_error
	wire          dds1_pwm_offset_s1_agent_rdata_fifo_src_valid;                                         // DDS1_PWM_Offset_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] dds1_pwm_offset_s1_agent_rdata_fifo_src_data;                                          // DDS1_PWM_Offset_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_020:in_0_data
	wire          dds1_pwm_offset_s1_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_020:in_0_ready -> DDS1_PWM_Offset_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_020_out_0_valid;                                                     // avalon_st_adapter_020:out_0_valid -> DDS1_PWM_Offset_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                                      // avalon_st_adapter_020:out_0_data -> DDS1_PWM_Offset_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                                     // DDS1_PWM_Offset_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                                     // avalon_st_adapter_020:out_0_error -> DDS1_PWM_Offset_s1_agent:rdata_fifo_sink_error
	wire          dds0_phaseoffset_s1_agent_rdata_fifo_src_valid;                                        // DDS0_PhaseOffset_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_021:in_0_valid
	wire   [33:0] dds0_phaseoffset_s1_agent_rdata_fifo_src_data;                                         // DDS0_PhaseOffset_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_021:in_0_data
	wire          dds0_phaseoffset_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_021:in_0_ready -> DDS0_PhaseOffset_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_021_out_0_valid;                                                     // avalon_st_adapter_021:out_0_valid -> DDS0_PhaseOffset_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_021_out_0_data;                                                      // avalon_st_adapter_021:out_0_data -> DDS0_PhaseOffset_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_021_out_0_ready;                                                     // DDS0_PhaseOffset_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire    [0:0] avalon_st_adapter_021_out_0_error;                                                     // avalon_st_adapter_021:out_0_error -> DDS0_PhaseOffset_s1_agent:rdata_fifo_sink_error
	wire          dds1_phaseoffset_s1_agent_rdata_fifo_src_valid;                                        // DDS1_PhaseOffset_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_022:in_0_valid
	wire   [33:0] dds1_phaseoffset_s1_agent_rdata_fifo_src_data;                                         // DDS1_PhaseOffset_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_022:in_0_data
	wire          dds1_phaseoffset_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_022:in_0_ready -> DDS1_PhaseOffset_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_022_out_0_valid;                                                     // avalon_st_adapter_022:out_0_valid -> DDS1_PhaseOffset_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_022_out_0_data;                                                      // avalon_st_adapter_022:out_0_data -> DDS1_PhaseOffset_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_022_out_0_ready;                                                     // DDS1_PhaseOffset_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_022:out_0_ready
	wire    [0:0] avalon_st_adapter_022_out_0_error;                                                     // avalon_st_adapter_022:out_0_error -> DDS1_PhaseOffset_s1_agent:rdata_fifo_sink_error
	wire          dds0_phasestep_s1_agent_rdata_fifo_src_valid;                                          // DDS0_PhaseStep_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_023:in_0_valid
	wire   [33:0] dds0_phasestep_s1_agent_rdata_fifo_src_data;                                           // DDS0_PhaseStep_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_023:in_0_data
	wire          dds0_phasestep_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_023:in_0_ready -> DDS0_PhaseStep_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_023_out_0_valid;                                                     // avalon_st_adapter_023:out_0_valid -> DDS0_PhaseStep_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_023_out_0_data;                                                      // avalon_st_adapter_023:out_0_data -> DDS0_PhaseStep_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_023_out_0_ready;                                                     // DDS0_PhaseStep_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_023:out_0_ready
	wire    [0:0] avalon_st_adapter_023_out_0_error;                                                     // avalon_st_adapter_023:out_0_error -> DDS0_PhaseStep_s1_agent:rdata_fifo_sink_error
	wire          dds1_phasestep_s1_agent_rdata_fifo_src_valid;                                          // DDS1_PhaseStep_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_024:in_0_valid
	wire   [33:0] dds1_phasestep_s1_agent_rdata_fifo_src_data;                                           // DDS1_PhaseStep_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_024:in_0_data
	wire          dds1_phasestep_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_024:in_0_ready -> DDS1_PhaseStep_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_024_out_0_valid;                                                     // avalon_st_adapter_024:out_0_valid -> DDS1_PhaseStep_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_024_out_0_data;                                                      // avalon_st_adapter_024:out_0_data -> DDS1_PhaseStep_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_024_out_0_ready;                                                     // DDS1_PhaseStep_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_024:out_0_ready
	wire    [0:0] avalon_st_adapter_024_out_0_error;                                                     // avalon_st_adapter_024:out_0_error -> DDS1_PhaseStep_s1_agent:rdata_fifo_sink_error
	wire          lookup_ram_ram_dds0_am_s1_agent_rdata_fifo_src_valid;                                  // LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_025:in_0_valid
	wire   [17:0] lookup_ram_ram_dds0_am_s1_agent_rdata_fifo_src_data;                                   // LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_025:in_0_data
	wire          lookup_ram_ram_dds0_am_s1_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_025:in_0_ready -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_025_out_0_valid;                                                     // avalon_st_adapter_025:out_0_valid -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_025_out_0_data;                                                      // avalon_st_adapter_025:out_0_data -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_025_out_0_ready;                                                     // LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_025:out_0_ready
	wire    [0:0] avalon_st_adapter_025_out_0_error;                                                     // avalon_st_adapter_025:out_0_error -> LOOKUP_RAM_RAM_DDS0_AM_s1_agent:rdata_fifo_sink_error
	wire          lookup_ram_ram_dds0_fm_s1_agent_rdata_fifo_src_valid;                                  // LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_026:in_0_valid
	wire   [17:0] lookup_ram_ram_dds0_fm_s1_agent_rdata_fifo_src_data;                                   // LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_026:in_0_data
	wire          lookup_ram_ram_dds0_fm_s1_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_026:in_0_ready -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_026_out_0_valid;                                                     // avalon_st_adapter_026:out_0_valid -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_026_out_0_data;                                                      // avalon_st_adapter_026:out_0_data -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_026_out_0_ready;                                                     // LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_026:out_0_ready
	wire    [0:0] avalon_st_adapter_026_out_0_error;                                                     // avalon_st_adapter_026:out_0_error -> LOOKUP_RAM_RAM_DDS0_FM_s1_agent:rdata_fifo_sink_error
	wire          lookup_ram_ram_dds0_s1_agent_rdata_fifo_src_valid;                                     // LOOKUP_RAM_RAM_DDS0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_027:in_0_valid
	wire   [17:0] lookup_ram_ram_dds0_s1_agent_rdata_fifo_src_data;                                      // LOOKUP_RAM_RAM_DDS0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_027:in_0_data
	wire          lookup_ram_ram_dds0_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_027:in_0_ready -> LOOKUP_RAM_RAM_DDS0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_027_out_0_valid;                                                     // avalon_st_adapter_027:out_0_valid -> LOOKUP_RAM_RAM_DDS0_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_027_out_0_data;                                                      // avalon_st_adapter_027:out_0_data -> LOOKUP_RAM_RAM_DDS0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_027_out_0_ready;                                                     // LOOKUP_RAM_RAM_DDS0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_027:out_0_ready
	wire    [0:0] avalon_st_adapter_027_out_0_error;                                                     // avalon_st_adapter_027:out_0_error -> LOOKUP_RAM_RAM_DDS0_s1_agent:rdata_fifo_sink_error
	wire          lookup_ram_ram_dds1_am_s1_agent_rdata_fifo_src_valid;                                  // LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_028:in_0_valid
	wire   [17:0] lookup_ram_ram_dds1_am_s1_agent_rdata_fifo_src_data;                                   // LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_028:in_0_data
	wire          lookup_ram_ram_dds1_am_s1_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_028:in_0_ready -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_028_out_0_valid;                                                     // avalon_st_adapter_028:out_0_valid -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_028_out_0_data;                                                      // avalon_st_adapter_028:out_0_data -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_028_out_0_ready;                                                     // LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_028:out_0_ready
	wire    [0:0] avalon_st_adapter_028_out_0_error;                                                     // avalon_st_adapter_028:out_0_error -> LOOKUP_RAM_RAM_DDS1_AM_s1_agent:rdata_fifo_sink_error
	wire          lookup_ram_ram_dds1_fm_s1_agent_rdata_fifo_src_valid;                                  // LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_029:in_0_valid
	wire   [17:0] lookup_ram_ram_dds1_fm_s1_agent_rdata_fifo_src_data;                                   // LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_029:in_0_data
	wire          lookup_ram_ram_dds1_fm_s1_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_029:in_0_ready -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_029_out_0_valid;                                                     // avalon_st_adapter_029:out_0_valid -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_029_out_0_data;                                                      // avalon_st_adapter_029:out_0_data -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_029_out_0_ready;                                                     // LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_029:out_0_ready
	wire    [0:0] avalon_st_adapter_029_out_0_error;                                                     // avalon_st_adapter_029:out_0_error -> LOOKUP_RAM_RAM_DDS1_FM_s1_agent:rdata_fifo_sink_error
	wire          lookup_ram_ram_dds1_s1_agent_rdata_fifo_src_valid;                                     // LOOKUP_RAM_RAM_DDS1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_030:in_0_valid
	wire   [17:0] lookup_ram_ram_dds1_s1_agent_rdata_fifo_src_data;                                      // LOOKUP_RAM_RAM_DDS1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_030:in_0_data
	wire          lookup_ram_ram_dds1_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_030:in_0_ready -> LOOKUP_RAM_RAM_DDS1_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_030_out_0_valid;                                                     // avalon_st_adapter_030:out_0_valid -> LOOKUP_RAM_RAM_DDS1_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_030_out_0_data;                                                      // avalon_st_adapter_030:out_0_data -> LOOKUP_RAM_RAM_DDS1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_030_out_0_ready;                                                     // LOOKUP_RAM_RAM_DDS1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_030:out_0_ready
	wire    [0:0] avalon_st_adapter_030_out_0_error;                                                     // avalon_st_adapter_030:out_0_error -> LOOKUP_RAM_RAM_DDS1_s1_agent:rdata_fifo_sink_error
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_031:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                                 // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_031:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                // avalon_st_adapter_031:in_0_ready -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_031_out_0_valid;                                                     // avalon_st_adapter_031:out_0_valid -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_031_out_0_data;                                                      // avalon_st_adapter_031:out_0_data -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_031_out_0_ready;                                                     // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_031:out_0_ready
	wire    [0:0] avalon_st_adapter_031_out_0_error;                                                     // avalon_st_adapter_031:out_0_error -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          lcd_dma_control_port_slave_agent_rdata_fifo_src_valid;                                 // LCD_DMA_control_port_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_032:in_0_valid
	wire   [33:0] lcd_dma_control_port_slave_agent_rdata_fifo_src_data;                                  // LCD_DMA_control_port_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_032:in_0_data
	wire          lcd_dma_control_port_slave_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_032:in_0_ready -> LCD_DMA_control_port_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_032_out_0_valid;                                                     // avalon_st_adapter_032:out_0_valid -> LCD_DMA_control_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_032_out_0_data;                                                      // avalon_st_adapter_032:out_0_data -> LCD_DMA_control_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_032_out_0_ready;                                                     // LCD_DMA_control_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_032:out_0_ready
	wire    [0:0] avalon_st_adapter_032_out_0_error;                                                     // avalon_st_adapter_032:out_0_error -> LCD_DMA_control_port_slave_agent:rdata_fifo_sink_error
	wire          spi_dma_control_port_slave_agent_rdata_fifo_src_valid;                                 // SPI_DMA_control_port_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_033:in_0_valid
	wire   [33:0] spi_dma_control_port_slave_agent_rdata_fifo_src_data;                                  // SPI_DMA_control_port_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_033:in_0_data
	wire          spi_dma_control_port_slave_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_033:in_0_ready -> SPI_DMA_control_port_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_033_out_0_valid;                                                     // avalon_st_adapter_033:out_0_valid -> SPI_DMA_control_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_033_out_0_data;                                                      // avalon_st_adapter_033:out_0_data -> SPI_DMA_control_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_033_out_0_ready;                                                     // SPI_DMA_control_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_033:out_0_ready
	wire    [0:0] avalon_st_adapter_033_out_0_error;                                                     // avalon_st_adapter_033:out_0_error -> SPI_DMA_control_port_slave_agent:rdata_fifo_sink_error
	wire          flash_csr_agent_rdata_fifo_src_valid;                                                  // FLASH_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_034:in_0_valid
	wire   [33:0] flash_csr_agent_rdata_fifo_src_data;                                                   // FLASH_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_034:in_0_data
	wire          flash_csr_agent_rdata_fifo_src_ready;                                                  // avalon_st_adapter_034:in_0_ready -> FLASH_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_034_out_0_valid;                                                     // avalon_st_adapter_034:out_0_valid -> FLASH_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_034_out_0_data;                                                      // avalon_st_adapter_034:out_0_data -> FLASH_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_034_out_0_ready;                                                     // FLASH_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_034:out_0_ready
	wire    [0:0] avalon_st_adapter_034_out_0_error;                                                     // avalon_st_adapter_034:out_0_error -> FLASH_csr_agent:rdata_fifo_sink_error
	wire          flash_data_agent_rdata_fifo_src_valid;                                                 // FLASH_data_agent:rdata_fifo_src_valid -> avalon_st_adapter_035:in_0_valid
	wire   [33:0] flash_data_agent_rdata_fifo_src_data;                                                  // FLASH_data_agent:rdata_fifo_src_data -> avalon_st_adapter_035:in_0_data
	wire          flash_data_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_035:in_0_ready -> FLASH_data_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_035_out_0_valid;                                                     // avalon_st_adapter_035:out_0_valid -> FLASH_data_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_035_out_0_data;                                                      // avalon_st_adapter_035:out_0_data -> FLASH_data_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_035_out_0_ready;                                                     // FLASH_data_agent:rdata_fifo_sink_ready -> avalon_st_adapter_035:out_0_ready
	wire    [0:0] avalon_st_adapter_035_out_0_error;                                                     // avalon_st_adapter_035:out_0_error -> FLASH_data_agent:rdata_fifo_sink_error
	wire          nios_cpu_debug_mem_slave_agent_rdata_fifo_src_valid;                                   // NIOS_CPU_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_036:in_0_valid
	wire   [33:0] nios_cpu_debug_mem_slave_agent_rdata_fifo_src_data;                                    // NIOS_CPU_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_036:in_0_data
	wire          nios_cpu_debug_mem_slave_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_036:in_0_ready -> NIOS_CPU_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_036_out_0_valid;                                                     // avalon_st_adapter_036:out_0_valid -> NIOS_CPU_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_036_out_0_data;                                                      // avalon_st_adapter_036:out_0_data -> NIOS_CPU_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_036_out_0_ready;                                                     // NIOS_CPU_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_036:out_0_ready
	wire    [0:0] avalon_st_adapter_036_out_0_error;                                                     // avalon_st_adapter_036:out_0_error -> NIOS_CPU_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          ram_24k_s1_agent_rdata_fifo_src_valid;                                                 // RAM_24K_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_037:in_0_valid
	wire   [33:0] ram_24k_s1_agent_rdata_fifo_src_data;                                                  // RAM_24K_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_037:in_0_data
	wire          ram_24k_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_037:in_0_ready -> RAM_24K_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_037_out_0_valid;                                                     // avalon_st_adapter_037:out_0_valid -> RAM_24K_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_037_out_0_data;                                                      // avalon_st_adapter_037:out_0_data -> RAM_24K_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_037_out_0_ready;                                                     // RAM_24K_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_037:out_0_ready
	wire    [0:0] avalon_st_adapter_037_out_0_error;                                                     // avalon_st_adapter_037:out_0_error -> RAM_24K_s1_agent:rdata_fifo_sink_error
	wire          pio_led_debug_s1_agent_rdata_fifo_src_valid;                                           // PIO_LED_DEBUG_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_038:in_0_valid
	wire   [33:0] pio_led_debug_s1_agent_rdata_fifo_src_data;                                            // PIO_LED_DEBUG_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_038:in_0_data
	wire          pio_led_debug_s1_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_038:in_0_ready -> PIO_LED_DEBUG_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_038_out_0_valid;                                                     // avalon_st_adapter_038:out_0_valid -> PIO_LED_DEBUG_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_038_out_0_data;                                                      // avalon_st_adapter_038:out_0_data -> PIO_LED_DEBUG_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_038_out_0_ready;                                                     // PIO_LED_DEBUG_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_038:out_0_ready
	wire    [0:0] avalon_st_adapter_038_out_0_error;                                                     // avalon_st_adapter_038:out_0_error -> PIO_LED_DEBUG_s1_agent:rdata_fifo_sink_error
	wire          timer_delay_32bit_s1_agent_rdata_fifo_src_valid;                                       // TIMER_DELAY_32bit_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_039:in_0_valid
	wire   [33:0] timer_delay_32bit_s1_agent_rdata_fifo_src_data;                                        // TIMER_DELAY_32bit_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_039:in_0_data
	wire          timer_delay_32bit_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_039:in_0_ready -> TIMER_DELAY_32bit_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_039_out_0_valid;                                                     // avalon_st_adapter_039:out_0_valid -> TIMER_DELAY_32bit_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_039_out_0_data;                                                      // avalon_st_adapter_039:out_0_data -> TIMER_DELAY_32bit_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_039_out_0_ready;                                                     // TIMER_DELAY_32bit_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_039:out_0_ready
	wire    [0:0] avalon_st_adapter_039_out_0_error;                                                     // avalon_st_adapter_039:out_0_error -> TIMER_DELAY_32bit_s1_agent:rdata_fifo_sink_error
	wire          keypad_s1_agent_rdata_fifo_src_valid;                                                  // KEYPAD_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_040:in_0_valid
	wire   [33:0] keypad_s1_agent_rdata_fifo_src_data;                                                   // KEYPAD_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_040:in_0_data
	wire          keypad_s1_agent_rdata_fifo_src_ready;                                                  // avalon_st_adapter_040:in_0_ready -> KEYPAD_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_040_out_0_valid;                                                     // avalon_st_adapter_040:out_0_valid -> KEYPAD_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_040_out_0_data;                                                      // avalon_st_adapter_040:out_0_data -> KEYPAD_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_040_out_0_ready;                                                     // KEYPAD_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_040:out_0_ready
	wire    [0:0] avalon_st_adapter_040_out_0_error;                                                     // avalon_st_adapter_040:out_0_error -> KEYPAD_s1_agent:rdata_fifo_sink_error
	wire          btn_display_s1_agent_rdata_fifo_src_valid;                                             // BTN_DISPLAY_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_041:in_0_valid
	wire   [33:0] btn_display_s1_agent_rdata_fifo_src_data;                                              // BTN_DISPLAY_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_041:in_0_data
	wire          btn_display_s1_agent_rdata_fifo_src_ready;                                             // avalon_st_adapter_041:in_0_ready -> BTN_DISPLAY_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_041_out_0_valid;                                                     // avalon_st_adapter_041:out_0_valid -> BTN_DISPLAY_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_041_out_0_data;                                                      // avalon_st_adapter_041:out_0_data -> BTN_DISPLAY_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_041_out_0_ready;                                                     // BTN_DISPLAY_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_041:out_0_ready
	wire    [0:0] avalon_st_adapter_041_out_0_error;                                                     // avalon_st_adapter_041:out_0_error -> BTN_DISPLAY_s1_agent:rdata_fifo_sink_error
	wire          btn_encoder_s1_agent_rdata_fifo_src_valid;                                             // BTN_ENCODER_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_042:in_0_valid
	wire   [33:0] btn_encoder_s1_agent_rdata_fifo_src_data;                                              // BTN_ENCODER_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_042:in_0_data
	wire          btn_encoder_s1_agent_rdata_fifo_src_ready;                                             // avalon_st_adapter_042:in_0_ready -> BTN_ENCODER_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_042_out_0_valid;                                                     // avalon_st_adapter_042:out_0_valid -> BTN_ENCODER_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_042_out_0_data;                                                      // avalon_st_adapter_042:out_0_data -> BTN_ENCODER_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_042_out_0_ready;                                                     // BTN_ENCODER_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_042:out_0_ready
	wire    [0:0] avalon_st_adapter_042_out_0_error;                                                     // avalon_st_adapter_042:out_0_error -> BTN_ENCODER_s1_agent:rdata_fifo_sink_error
	wire          btn_ch_onoff_s1_agent_rdata_fifo_src_valid;                                            // BTN_CH_ONOFF_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_043:in_0_valid
	wire   [33:0] btn_ch_onoff_s1_agent_rdata_fifo_src_data;                                             // BTN_CH_ONOFF_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_043:in_0_data
	wire          btn_ch_onoff_s1_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_043:in_0_ready -> BTN_CH_ONOFF_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_043_out_0_valid;                                                     // avalon_st_adapter_043:out_0_valid -> BTN_CH_ONOFF_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_043_out_0_data;                                                      // avalon_st_adapter_043:out_0_data -> BTN_CH_ONOFF_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_043_out_0_ready;                                                     // BTN_CH_ONOFF_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_043:out_0_ready
	wire    [0:0] avalon_st_adapter_043_out_0_error;                                                     // avalon_st_adapter_043:out_0_error -> BTN_CH_ONOFF_s1_agent:rdata_fifo_sink_error
	wire          dds_reset_s1_agent_rdata_fifo_src_valid;                                               // DDS_RESET_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_044:in_0_valid
	wire   [33:0] dds_reset_s1_agent_rdata_fifo_src_data;                                                // DDS_RESET_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_044:in_0_data
	wire          dds_reset_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_044:in_0_ready -> DDS_RESET_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_044_out_0_valid;                                                     // avalon_st_adapter_044:out_0_valid -> DDS_RESET_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_044_out_0_data;                                                      // avalon_st_adapter_044:out_0_data -> DDS_RESET_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_044_out_0_ready;                                                     // DDS_RESET_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_044:out_0_ready
	wire    [0:0] avalon_st_adapter_044_out_0_error;                                                     // avalon_st_adapter_044:out_0_error -> DDS_RESET_s1_agent:rdata_fifo_sink_error
	wire          lookup_ram_isr_s1_agent_rdata_fifo_src_valid;                                          // LOOKUP_RAM_ISR_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_045:in_0_valid
	wire   [33:0] lookup_ram_isr_s1_agent_rdata_fifo_src_data;                                           // LOOKUP_RAM_ISR_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_045:in_0_data
	wire          lookup_ram_isr_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_045:in_0_ready -> LOOKUP_RAM_ISR_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_045_out_0_valid;                                                     // avalon_st_adapter_045:out_0_valid -> LOOKUP_RAM_ISR_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_045_out_0_data;                                                      // avalon_st_adapter_045:out_0_data -> LOOKUP_RAM_ISR_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_045_out_0_ready;                                                     // LOOKUP_RAM_ISR_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_045:out_0_ready
	wire    [0:0] avalon_st_adapter_045_out_0_error;                                                     // avalon_st_adapter_045:out_0_error -> LOOKUP_RAM_ISR_s1_agent:rdata_fifo_sink_error
	wire          sd_spi_spi_control_port_agent_rdata_fifo_src_valid;                                    // SD_SPI_spi_control_port_agent:rdata_fifo_src_valid -> avalon_st_adapter_046:in_0_valid
	wire   [33:0] sd_spi_spi_control_port_agent_rdata_fifo_src_data;                                     // SD_SPI_spi_control_port_agent:rdata_fifo_src_data -> avalon_st_adapter_046:in_0_data
	wire          sd_spi_spi_control_port_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_046:in_0_ready -> SD_SPI_spi_control_port_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_046_out_0_valid;                                                     // avalon_st_adapter_046:out_0_valid -> SD_SPI_spi_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_046_out_0_data;                                                      // avalon_st_adapter_046:out_0_data -> SD_SPI_spi_control_port_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_046_out_0_ready;                                                     // SD_SPI_spi_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_046:out_0_ready
	wire    [0:0] avalon_st_adapter_046_out_0_error;                                                     // avalon_st_adapter_046:out_0_error -> SD_SPI_spi_control_port_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (20),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (20),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios_cpu_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                           //                       clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios_cpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios_cpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios_cpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios_cpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios_cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios_cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios_cpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios_cpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios_cpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios_cpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios_cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (NIOS_CPU_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (NIOS_CPU_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (NIOS_CPU_data_master_byteenable),                                         //                          .byteenable
		.av_read                (NIOS_CPU_data_master_read),                                               //                          .read
		.av_readdata            (NIOS_CPU_data_master_readdata),                                           //                          .readdata
		.av_write               (NIOS_CPU_data_master_write),                                              //                          .write
		.av_writedata           (NIOS_CPU_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (NIOS_CPU_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                    //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                    //               (terminated)
		.av_chipselect          (1'b0),                                                                    //               (terminated)
		.av_readdatavalid       (),                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                    //               (terminated)
		.uav_clken              (),                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                   //               (terminated)
		.av_response            (),                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                         //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (15),
		.AV_DATA_W                   (8),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (1),
		.UAV_ADDRESS_W               (20),
		.UAV_BURSTCOUNT_W            (1),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (1),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) lcd_dma_read_master_translator (
		.clk                    (clk_0_clk_clk),                                                          //                       clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),                             //                     reset.reset
		.uav_address            (lcd_dma_read_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (lcd_dma_read_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (lcd_dma_read_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (lcd_dma_read_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (lcd_dma_read_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (lcd_dma_read_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (lcd_dma_read_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (lcd_dma_read_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (lcd_dma_read_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (lcd_dma_read_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (lcd_dma_read_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (LCD_DMA_read_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (LCD_DMA_read_master_waitrequest),                                        //                          .waitrequest
		.av_chipselect          (LCD_DMA_read_master_chipselect),                                         //                          .chipselect
		.av_read                (LCD_DMA_read_master_read),                                               //                          .read
		.av_readdata            (LCD_DMA_read_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (LCD_DMA_read_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                   //               (terminated)
		.av_byteenable          (1'b1),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                   //               (terminated)
		.av_begintransfer       (1'b0),                                                                   //               (terminated)
		.av_write               (1'b0),                                                                   //               (terminated)
		.av_writedata           (8'b00000000),                                                            //               (terminated)
		.av_lock                (1'b0),                                                                   //               (terminated)
		.av_debugaccess         (1'b0),                                                                   //               (terminated)
		.uav_clken              (),                                                                       //               (terminated)
		.av_clken               (1'b1),                                                                   //               (terminated)
		.uav_response           (2'b00),                                                                  //               (terminated)
		.av_response            (),                                                                       //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                   //               (terminated)
		.av_writeresponsevalid  ()                                                                        //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (15),
		.AV_DATA_W                   (8),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (1),
		.UAV_ADDRESS_W               (20),
		.UAV_BURSTCOUNT_W            (1),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (1),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) spi_dma_write_master_translator (
		.clk                    (clk_0_clk_clk),                                                           //                       clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (spi_dma_write_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (spi_dma_write_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (spi_dma_write_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (spi_dma_write_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (spi_dma_write_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (spi_dma_write_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (spi_dma_write_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (spi_dma_write_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (spi_dma_write_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (spi_dma_write_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (spi_dma_write_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (SPI_DMA_write_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (SPI_DMA_write_master_waitrequest),                                        //                          .waitrequest
		.av_chipselect          (SPI_DMA_write_master_chipselect),                                         //                          .chipselect
		.av_write               (SPI_DMA_write_master_write),                                              //                          .write
		.av_writedata           (SPI_DMA_write_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                    //               (terminated)
		.av_byteenable          (1'b1),                                                                    //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                    //               (terminated)
		.av_read                (1'b0),                                                                    //               (terminated)
		.av_readdata            (),                                                                        //               (terminated)
		.av_readdatavalid       (),                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                    //               (terminated)
		.av_debugaccess         (1'b0),                                                                    //               (terminated)
		.uav_clken              (),                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                   //               (terminated)
		.av_response            (),                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                         //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (20),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (20),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios_cpu_instruction_master_translator (
		.clk                    (clk_0_clk_clk),                                                                  //                       clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios_cpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios_cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios_cpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios_cpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios_cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios_cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios_cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios_cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios_cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios_cpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios_cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (NIOS_CPU_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (NIOS_CPU_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (NIOS_CPU_instruction_master_read),                                               //                          .read
		.av_readdata            (NIOS_CPU_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                           //               (terminated)
		.av_byteenable          (4'b1111),                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                           //               (terminated)
		.av_begintransfer       (1'b0),                                                                           //               (terminated)
		.av_chipselect          (1'b0),                                                                           //               (terminated)
		.av_readdatavalid       (),                                                                               //               (terminated)
		.av_write               (1'b0),                                                                           //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                           //               (terminated)
		.av_lock                (1'b0),                                                                           //               (terminated)
		.av_debugaccess         (1'b0),                                                                           //               (terminated)
		.uav_clken              (),                                                                               //               (terminated)
		.av_clken               (1'b1),                                                                           //               (terminated)
		.uav_response           (2'b00),                                                                          //               (terminated)
		.av_response            (),                                                                               //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                           //               (terminated)
		.av_writeresponsevalid  ()                                                                                //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds0_am_modindex_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dds0_am_modindex_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dds0_am_modindex_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dds0_am_modindex_s1_agent_m0_read),          //                         .read
		.uav_write              (dds0_am_modindex_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (dds0_am_modindex_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dds0_am_modindex_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dds0_am_modindex_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dds0_am_modindex_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dds0_am_modindex_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dds0_am_modindex_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dds0_am_modindex_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (DDS0_AM_ModIndex_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (DDS0_AM_ModIndex_s1_write),                  //                         .write
		.av_readdata            (DDS0_AM_ModIndex_s1_readdata),               //                         .readdata
		.av_writedata           (DDS0_AM_ModIndex_s1_writedata),              //                         .writedata
		.av_chipselect          (DDS0_AM_ModIndex_s1_chipselect),             //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds1_am_modindex_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dds1_am_modindex_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dds1_am_modindex_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dds1_am_modindex_s1_agent_m0_read),          //                         .read
		.uav_write              (dds1_am_modindex_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (dds1_am_modindex_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dds1_am_modindex_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dds1_am_modindex_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dds1_am_modindex_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dds1_am_modindex_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dds1_am_modindex_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dds1_am_modindex_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (DDS1_AM_ModIndex_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (DDS1_AM_ModIndex_s1_write),                  //                         .write
		.av_readdata            (DDS1_AM_ModIndex_s1_readdata),               //                         .readdata
		.av_writedata           (DDS1_AM_ModIndex_s1_writedata),              //                         .writedata
		.av_chipselect          (DDS1_AM_ModIndex_s1_chipselect),             //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds0_am_modphasestep_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (dds0_am_modphasestep_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dds0_am_modphasestep_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dds0_am_modphasestep_s1_agent_m0_read),          //                         .read
		.uav_write              (dds0_am_modphasestep_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (dds0_am_modphasestep_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dds0_am_modphasestep_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dds0_am_modphasestep_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dds0_am_modphasestep_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dds0_am_modphasestep_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dds0_am_modphasestep_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dds0_am_modphasestep_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (DDS0_AM_ModPhaseStep_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (DDS0_AM_ModPhaseStep_s1_write),                  //                         .write
		.av_readdata            (DDS0_AM_ModPhaseStep_s1_readdata),               //                         .readdata
		.av_writedata           (DDS0_AM_ModPhaseStep_s1_writedata),              //                         .writedata
		.av_chipselect          (DDS0_AM_ModPhaseStep_s1_chipselect),             //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds1_am_modphasestep_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (dds1_am_modphasestep_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dds1_am_modphasestep_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dds1_am_modphasestep_s1_agent_m0_read),          //                         .read
		.uav_write              (dds1_am_modphasestep_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (dds1_am_modphasestep_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dds1_am_modphasestep_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dds1_am_modphasestep_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dds1_am_modphasestep_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dds1_am_modphasestep_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dds1_am_modphasestep_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dds1_am_modphasestep_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (DDS1_AM_ModPhaseStep_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (DDS1_AM_ModPhaseStep_s1_write),                  //                         .write
		.av_readdata            (DDS1_AM_ModPhaseStep_s1_readdata),               //                         .readdata
		.av_writedata           (DDS1_AM_ModPhaseStep_s1_writedata),              //                         .writedata
		.av_chipselect          (DDS1_AM_ModPhaseStep_s1_chipselect),             //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lcd_backlight_pwm_s1_translator (
		.clk                    (clk_0_clk_clk),                               //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (lcd_backlight_pwm_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (lcd_backlight_pwm_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (lcd_backlight_pwm_s1_agent_m0_read),          //                         .read
		.uav_write              (lcd_backlight_pwm_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (lcd_backlight_pwm_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (lcd_backlight_pwm_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (lcd_backlight_pwm_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (lcd_backlight_pwm_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (lcd_backlight_pwm_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (lcd_backlight_pwm_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (lcd_backlight_pwm_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (LCD_BackLight_PWM_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (LCD_BackLight_PWM_s1_write),                  //                         .write
		.av_readdata            (LCD_BackLight_PWM_s1_readdata),               //                         .readdata
		.av_writedata           (LCD_BackLight_PWM_s1_writedata),              //                         .writedata
		.av_chipselect          (LCD_BackLight_PWM_s1_chipselect),             //                         .chipselect
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lcd_control_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (lcd_control_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (lcd_control_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (lcd_control_s1_agent_m0_read),               //                         .read
		.uav_write              (lcd_control_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (lcd_control_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (lcd_control_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (lcd_control_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (lcd_control_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (lcd_control_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (lcd_control_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (lcd_control_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (LCD_Control_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (LCD_Control_s1_write),                       //                         .write
		.av_readdata            (LCD_Control_s1_readdata),                    //                         .readdata
		.av_writedata           (LCD_Control_s1_writedata),                   //                         .writedata
		.av_chipselect          (LCD_Control_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lcd_data_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (lcd_data_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (lcd_data_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (lcd_data_s1_agent_m0_read),                  //                         .read
		.uav_write              (lcd_data_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (lcd_data_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (lcd_data_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (lcd_data_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (lcd_data_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (lcd_data_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (lcd_data_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (lcd_data_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (LCD_Data_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (LCD_Data_s1_write),                          //                         .write
		.av_readdata            (LCD_Data_s1_readdata),                       //                         .readdata
		.av_writedata           (LCD_Data_s1_writedata),                      //                         .writedata
		.av_chipselect          (LCD_Data_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds0_fm_moddeviationphase_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address            (dds0_fm_moddeviationphase_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dds0_fm_moddeviationphase_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dds0_fm_moddeviationphase_s1_agent_m0_read),          //                         .read
		.uav_write              (dds0_fm_moddeviationphase_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (dds0_fm_moddeviationphase_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dds0_fm_moddeviationphase_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dds0_fm_moddeviationphase_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dds0_fm_moddeviationphase_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dds0_fm_moddeviationphase_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dds0_fm_moddeviationphase_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dds0_fm_moddeviationphase_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (DDS0_FM_ModDeviationPhase_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (DDS0_FM_ModDeviationPhase_s1_write),                  //                         .write
		.av_readdata            (DDS0_FM_ModDeviationPhase_s1_readdata),               //                         .readdata
		.av_writedata           (DDS0_FM_ModDeviationPhase_s1_writedata),              //                         .writedata
		.av_chipselect          (DDS0_FM_ModDeviationPhase_s1_chipselect),             //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds1_fm_moddeviationphase_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address            (dds1_fm_moddeviationphase_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dds1_fm_moddeviationphase_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dds1_fm_moddeviationphase_s1_agent_m0_read),          //                         .read
		.uav_write              (dds1_fm_moddeviationphase_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (dds1_fm_moddeviationphase_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dds1_fm_moddeviationphase_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dds1_fm_moddeviationphase_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dds1_fm_moddeviationphase_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dds1_fm_moddeviationphase_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dds1_fm_moddeviationphase_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dds1_fm_moddeviationphase_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (DDS1_FM_ModDeviationPhase_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (DDS1_FM_ModDeviationPhase_s1_write),                  //                         .write
		.av_readdata            (DDS1_FM_ModDeviationPhase_s1_readdata),               //                         .readdata
		.av_writedata           (DDS1_FM_ModDeviationPhase_s1_writedata),              //                         .writedata
		.av_chipselect          (DDS1_FM_ModDeviationPhase_s1_chipselect),             //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds0_fm_modphasestep_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (dds0_fm_modphasestep_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dds0_fm_modphasestep_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dds0_fm_modphasestep_s1_agent_m0_read),          //                         .read
		.uav_write              (dds0_fm_modphasestep_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (dds0_fm_modphasestep_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dds0_fm_modphasestep_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dds0_fm_modphasestep_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dds0_fm_modphasestep_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dds0_fm_modphasestep_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dds0_fm_modphasestep_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dds0_fm_modphasestep_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (DDS0_FM_ModPhaseStep_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (DDS0_FM_ModPhaseStep_s1_write),                  //                         .write
		.av_readdata            (DDS0_FM_ModPhaseStep_s1_readdata),               //                         .readdata
		.av_writedata           (DDS0_FM_ModPhaseStep_s1_writedata),              //                         .writedata
		.av_chipselect          (DDS0_FM_ModPhaseStep_s1_chipselect),             //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds1_fm_modphasestep_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (dds1_fm_modphasestep_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dds1_fm_modphasestep_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dds1_fm_modphasestep_s1_agent_m0_read),          //                         .read
		.uav_write              (dds1_fm_modphasestep_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (dds1_fm_modphasestep_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dds1_fm_modphasestep_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dds1_fm_modphasestep_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dds1_fm_modphasestep_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dds1_fm_modphasestep_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dds1_fm_modphasestep_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dds1_fm_modphasestep_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (DDS1_FM_ModPhaseStep_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (DDS1_FM_ModPhaseStep_s1_write),                  //                         .write
		.av_readdata            (DDS1_FM_ModPhaseStep_s1_readdata),               //                         .readdata
		.av_writedata           (DDS1_FM_ModPhaseStep_s1_writedata),              //                         .writedata
		.av_chipselect          (DDS1_FM_ModPhaseStep_s1_chipselect),             //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds0_outputrelay_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dds0_outputrelay_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dds0_outputrelay_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dds0_outputrelay_s1_agent_m0_read),          //                         .read
		.uav_write              (dds0_outputrelay_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (dds0_outputrelay_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dds0_outputrelay_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dds0_outputrelay_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dds0_outputrelay_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dds0_outputrelay_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dds0_outputrelay_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dds0_outputrelay_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (DDS0_OutputRelay_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (DDS0_OutputRelay_s1_write),                  //                         .write
		.av_readdata            (DDS0_OutputRelay_s1_readdata),               //                         .readdata
		.av_writedata           (DDS0_OutputRelay_s1_writedata),              //                         .writedata
		.av_chipselect          (DDS0_OutputRelay_s1_chipselect),             //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds1_outputrelay_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dds1_outputrelay_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dds1_outputrelay_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dds1_outputrelay_s1_agent_m0_read),          //                         .read
		.uav_write              (dds1_outputrelay_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (dds1_outputrelay_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dds1_outputrelay_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dds1_outputrelay_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dds1_outputrelay_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dds1_outputrelay_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dds1_outputrelay_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dds1_outputrelay_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (DDS1_OutputRelay_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (DDS1_OutputRelay_s1_write),                  //                         .write
		.av_readdata            (DDS1_OutputRelay_s1_readdata),               //                         .readdata
		.av_writedata           (DDS1_OutputRelay_s1_writedata),              //                         .writedata
		.av_chipselect          (DDS1_OutputRelay_s1_chipselect),             //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds0_pm_modindex_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dds0_pm_modindex_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dds0_pm_modindex_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dds0_pm_modindex_s1_agent_m0_read),          //                         .read
		.uav_write              (dds0_pm_modindex_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (dds0_pm_modindex_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dds0_pm_modindex_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dds0_pm_modindex_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dds0_pm_modindex_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dds0_pm_modindex_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dds0_pm_modindex_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dds0_pm_modindex_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (DDS0_PM_ModIndex_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (DDS0_PM_ModIndex_s1_write),                  //                         .write
		.av_readdata            (DDS0_PM_ModIndex_s1_readdata),               //                         .readdata
		.av_writedata           (DDS0_PM_ModIndex_s1_writedata),              //                         .writedata
		.av_chipselect          (DDS0_PM_ModIndex_s1_chipselect),             //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds1_pm_modindex_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dds1_pm_modindex_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dds1_pm_modindex_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dds1_pm_modindex_s1_agent_m0_read),          //                         .read
		.uav_write              (dds1_pm_modindex_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (dds1_pm_modindex_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dds1_pm_modindex_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dds1_pm_modindex_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dds1_pm_modindex_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dds1_pm_modindex_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dds1_pm_modindex_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dds1_pm_modindex_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (DDS1_PM_ModIndex_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (DDS1_PM_ModIndex_s1_write),                  //                         .write
		.av_readdata            (DDS1_PM_ModIndex_s1_readdata),               //                         .readdata
		.av_writedata           (DDS1_PM_ModIndex_s1_writedata),              //                         .writedata
		.av_chipselect          (DDS1_PM_ModIndex_s1_chipselect),             //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds0_pm_modphasestep_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (dds0_pm_modphasestep_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dds0_pm_modphasestep_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dds0_pm_modphasestep_s1_agent_m0_read),          //                         .read
		.uav_write              (dds0_pm_modphasestep_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (dds0_pm_modphasestep_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dds0_pm_modphasestep_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dds0_pm_modphasestep_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dds0_pm_modphasestep_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dds0_pm_modphasestep_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dds0_pm_modphasestep_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dds0_pm_modphasestep_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (DDS0_PM_ModPhaseStep_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (DDS0_PM_ModPhaseStep_s1_write),                  //                         .write
		.av_readdata            (DDS0_PM_ModPhaseStep_s1_readdata),               //                         .readdata
		.av_writedata           (DDS0_PM_ModPhaseStep_s1_writedata),              //                         .writedata
		.av_chipselect          (DDS0_PM_ModPhaseStep_s1_chipselect),             //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds1_pm_modphasestep_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (dds1_pm_modphasestep_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dds1_pm_modphasestep_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dds1_pm_modphasestep_s1_agent_m0_read),          //                         .read
		.uav_write              (dds1_pm_modphasestep_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (dds1_pm_modphasestep_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dds1_pm_modphasestep_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dds1_pm_modphasestep_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dds1_pm_modphasestep_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dds1_pm_modphasestep_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dds1_pm_modphasestep_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dds1_pm_modphasestep_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (DDS1_PM_ModPhaseStep_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (DDS1_PM_ModPhaseStep_s1_write),                  //                         .write
		.av_readdata            (DDS1_PM_ModPhaseStep_s1_readdata),               //                         .readdata
		.av_writedata           (DDS1_PM_ModPhaseStep_s1_writedata),              //                         .writedata
		.av_chipselect          (DDS1_PM_ModPhaseStep_s1_chipselect),             //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds0_pwm_amplitude_s1_translator (
		.clk                    (clk_0_clk_clk),                                //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (dds0_pwm_amplitude_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dds0_pwm_amplitude_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dds0_pwm_amplitude_s1_agent_m0_read),          //                         .read
		.uav_write              (dds0_pwm_amplitude_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (dds0_pwm_amplitude_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dds0_pwm_amplitude_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dds0_pwm_amplitude_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dds0_pwm_amplitude_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dds0_pwm_amplitude_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dds0_pwm_amplitude_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dds0_pwm_amplitude_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (DDS0_PWM_Amplitude_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (DDS0_PWM_Amplitude_s1_write),                  //                         .write
		.av_readdata            (DDS0_PWM_Amplitude_s1_readdata),               //                         .readdata
		.av_writedata           (DDS0_PWM_Amplitude_s1_writedata),              //                         .writedata
		.av_chipselect          (DDS0_PWM_Amplitude_s1_chipselect),             //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds1_pwm_amplitude_s1_translator (
		.clk                    (clk_0_clk_clk),                                //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (dds1_pwm_amplitude_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dds1_pwm_amplitude_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dds1_pwm_amplitude_s1_agent_m0_read),          //                         .read
		.uav_write              (dds1_pwm_amplitude_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (dds1_pwm_amplitude_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dds1_pwm_amplitude_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dds1_pwm_amplitude_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dds1_pwm_amplitude_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dds1_pwm_amplitude_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dds1_pwm_amplitude_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dds1_pwm_amplitude_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (DDS1_PWM_Amplitude_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (DDS1_PWM_Amplitude_s1_write),                  //                         .write
		.av_readdata            (DDS1_PWM_Amplitude_s1_readdata),               //                         .readdata
		.av_writedata           (DDS1_PWM_Amplitude_s1_writedata),              //                         .writedata
		.av_chipselect          (DDS1_PWM_Amplitude_s1_chipselect),             //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds0_pwm_offset_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dds0_pwm_offset_s1_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (dds0_pwm_offset_s1_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (dds0_pwm_offset_s1_agent_m0_read),           //                         .read
		.uav_write              (dds0_pwm_offset_s1_agent_m0_write),          //                         .write
		.uav_waitrequest        (dds0_pwm_offset_s1_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (dds0_pwm_offset_s1_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (dds0_pwm_offset_s1_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (dds0_pwm_offset_s1_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (dds0_pwm_offset_s1_agent_m0_writedata),      //                         .writedata
		.uav_lock               (dds0_pwm_offset_s1_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (dds0_pwm_offset_s1_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (DDS0_PWM_Offset_s1_address),                 //      avalon_anti_slave_0.address
		.av_write               (DDS0_PWM_Offset_s1_write),                   //                         .write
		.av_readdata            (DDS0_PWM_Offset_s1_readdata),                //                         .readdata
		.av_writedata           (DDS0_PWM_Offset_s1_writedata),               //                         .writedata
		.av_chipselect          (DDS0_PWM_Offset_s1_chipselect),              //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds1_pwm_offset_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dds1_pwm_offset_s1_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (dds1_pwm_offset_s1_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (dds1_pwm_offset_s1_agent_m0_read),           //                         .read
		.uav_write              (dds1_pwm_offset_s1_agent_m0_write),          //                         .write
		.uav_waitrequest        (dds1_pwm_offset_s1_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (dds1_pwm_offset_s1_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (dds1_pwm_offset_s1_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (dds1_pwm_offset_s1_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (dds1_pwm_offset_s1_agent_m0_writedata),      //                         .writedata
		.uav_lock               (dds1_pwm_offset_s1_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (dds1_pwm_offset_s1_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (DDS1_PWM_Offset_s1_address),                 //      avalon_anti_slave_0.address
		.av_write               (DDS1_PWM_Offset_s1_write),                   //                         .write
		.av_readdata            (DDS1_PWM_Offset_s1_readdata),                //                         .readdata
		.av_writedata           (DDS1_PWM_Offset_s1_writedata),               //                         .writedata
		.av_chipselect          (DDS1_PWM_Offset_s1_chipselect),              //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds0_phaseoffset_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dds0_phaseoffset_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dds0_phaseoffset_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dds0_phaseoffset_s1_agent_m0_read),          //                         .read
		.uav_write              (dds0_phaseoffset_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (dds0_phaseoffset_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dds0_phaseoffset_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dds0_phaseoffset_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dds0_phaseoffset_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dds0_phaseoffset_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dds0_phaseoffset_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dds0_phaseoffset_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (DDS0_PhaseOffset_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (DDS0_PhaseOffset_s1_write),                  //                         .write
		.av_readdata            (DDS0_PhaseOffset_s1_readdata),               //                         .readdata
		.av_writedata           (DDS0_PhaseOffset_s1_writedata),              //                         .writedata
		.av_chipselect          (DDS0_PhaseOffset_s1_chipselect),             //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds1_phaseoffset_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dds1_phaseoffset_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dds1_phaseoffset_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dds1_phaseoffset_s1_agent_m0_read),          //                         .read
		.uav_write              (dds1_phaseoffset_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (dds1_phaseoffset_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dds1_phaseoffset_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dds1_phaseoffset_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dds1_phaseoffset_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dds1_phaseoffset_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dds1_phaseoffset_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dds1_phaseoffset_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (DDS1_PhaseOffset_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (DDS1_PhaseOffset_s1_write),                  //                         .write
		.av_readdata            (DDS1_PhaseOffset_s1_readdata),               //                         .readdata
		.av_writedata           (DDS1_PhaseOffset_s1_writedata),              //                         .writedata
		.av_chipselect          (DDS1_PhaseOffset_s1_chipselect),             //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds0_phasestep_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dds0_phasestep_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (dds0_phasestep_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (dds0_phasestep_s1_agent_m0_read),            //                         .read
		.uav_write              (dds0_phasestep_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (dds0_phasestep_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (dds0_phasestep_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (dds0_phasestep_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (dds0_phasestep_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (dds0_phasestep_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (dds0_phasestep_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (dds0_phasestep_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (DDS0_PhaseStep_s1_address),                  //      avalon_anti_slave_0.address
		.av_write               (DDS0_PhaseStep_s1_write),                    //                         .write
		.av_readdata            (DDS0_PhaseStep_s1_readdata),                 //                         .readdata
		.av_writedata           (DDS0_PhaseStep_s1_writedata),                //                         .writedata
		.av_chipselect          (DDS0_PhaseStep_s1_chipselect),               //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds1_phasestep_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dds1_phasestep_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (dds1_phasestep_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (dds1_phasestep_s1_agent_m0_read),            //                         .read
		.uav_write              (dds1_phasestep_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (dds1_phasestep_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (dds1_phasestep_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (dds1_phasestep_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (dds1_phasestep_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (dds1_phasestep_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (dds1_phasestep_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (dds1_phasestep_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (DDS1_PhaseStep_s1_address),                  //      avalon_anti_slave_0.address
		.av_write               (DDS1_PhaseStep_s1_write),                    //                         .write
		.av_readdata            (DDS1_PhaseStep_s1_readdata),                 //                         .readdata
		.av_writedata           (DDS1_PhaseStep_s1_writedata),                //                         .writedata
		.av_chipselect          (DDS1_PhaseStep_s1_chipselect),               //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lookup_ram_ram_dds0_am_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (lookup_ram_ram_dds0_am_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (lookup_ram_ram_dds0_am_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (lookup_ram_ram_dds0_am_s1_agent_m0_read),          //                         .read
		.uav_write              (lookup_ram_ram_dds0_am_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (lookup_ram_ram_dds0_am_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (lookup_ram_ram_dds0_am_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (lookup_ram_ram_dds0_am_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (lookup_ram_ram_dds0_am_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (lookup_ram_ram_dds0_am_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (lookup_ram_ram_dds0_am_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (lookup_ram_ram_dds0_am_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (LOOKUP_RAM_RAM_DDS0_AM_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (LOOKUP_RAM_RAM_DDS0_AM_s1_write),                  //                         .write
		.av_readdata            (LOOKUP_RAM_RAM_DDS0_AM_s1_readdata),               //                         .readdata
		.av_writedata           (LOOKUP_RAM_RAM_DDS0_AM_s1_writedata),              //                         .writedata
		.av_byteenable          (LOOKUP_RAM_RAM_DDS0_AM_s1_byteenable),             //                         .byteenable
		.av_chipselect          (LOOKUP_RAM_RAM_DDS0_AM_s1_chipselect),             //                         .chipselect
		.av_clken               (LOOKUP_RAM_RAM_DDS0_AM_s1_clken),                  //                         .clken
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lookup_ram_ram_dds0_fm_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (lookup_ram_ram_dds0_fm_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (lookup_ram_ram_dds0_fm_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (lookup_ram_ram_dds0_fm_s1_agent_m0_read),          //                         .read
		.uav_write              (lookup_ram_ram_dds0_fm_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (lookup_ram_ram_dds0_fm_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (lookup_ram_ram_dds0_fm_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (lookup_ram_ram_dds0_fm_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (lookup_ram_ram_dds0_fm_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (lookup_ram_ram_dds0_fm_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (lookup_ram_ram_dds0_fm_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (lookup_ram_ram_dds0_fm_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (LOOKUP_RAM_RAM_DDS0_FM_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (LOOKUP_RAM_RAM_DDS0_FM_s1_write),                  //                         .write
		.av_readdata            (LOOKUP_RAM_RAM_DDS0_FM_s1_readdata),               //                         .readdata
		.av_writedata           (LOOKUP_RAM_RAM_DDS0_FM_s1_writedata),              //                         .writedata
		.av_byteenable          (LOOKUP_RAM_RAM_DDS0_FM_s1_byteenable),             //                         .byteenable
		.av_chipselect          (LOOKUP_RAM_RAM_DDS0_FM_s1_chipselect),             //                         .chipselect
		.av_clken               (LOOKUP_RAM_RAM_DDS0_FM_s1_clken),                  //                         .clken
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lookup_ram_ram_dds0_s1_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (lookup_ram_ram_dds0_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (lookup_ram_ram_dds0_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (lookup_ram_ram_dds0_s1_agent_m0_read),          //                         .read
		.uav_write              (lookup_ram_ram_dds0_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (lookup_ram_ram_dds0_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (lookup_ram_ram_dds0_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (lookup_ram_ram_dds0_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (lookup_ram_ram_dds0_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (lookup_ram_ram_dds0_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (lookup_ram_ram_dds0_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (lookup_ram_ram_dds0_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (LOOKUP_RAM_RAM_DDS0_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (LOOKUP_RAM_RAM_DDS0_s1_write),                  //                         .write
		.av_readdata            (LOOKUP_RAM_RAM_DDS0_s1_readdata),               //                         .readdata
		.av_writedata           (LOOKUP_RAM_RAM_DDS0_s1_writedata),              //                         .writedata
		.av_byteenable          (LOOKUP_RAM_RAM_DDS0_s1_byteenable),             //                         .byteenable
		.av_chipselect          (LOOKUP_RAM_RAM_DDS0_s1_chipselect),             //                         .chipselect
		.av_clken               (LOOKUP_RAM_RAM_DDS0_s1_clken),                  //                         .clken
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lookup_ram_ram_dds1_am_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (lookup_ram_ram_dds1_am_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (lookup_ram_ram_dds1_am_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (lookup_ram_ram_dds1_am_s1_agent_m0_read),          //                         .read
		.uav_write              (lookup_ram_ram_dds1_am_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (lookup_ram_ram_dds1_am_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (lookup_ram_ram_dds1_am_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (lookup_ram_ram_dds1_am_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (lookup_ram_ram_dds1_am_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (lookup_ram_ram_dds1_am_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (lookup_ram_ram_dds1_am_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (lookup_ram_ram_dds1_am_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (LOOKUP_RAM_RAM_DDS1_AM_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (LOOKUP_RAM_RAM_DDS1_AM_s1_write),                  //                         .write
		.av_readdata            (LOOKUP_RAM_RAM_DDS1_AM_s1_readdata),               //                         .readdata
		.av_writedata           (LOOKUP_RAM_RAM_DDS1_AM_s1_writedata),              //                         .writedata
		.av_byteenable          (LOOKUP_RAM_RAM_DDS1_AM_s1_byteenable),             //                         .byteenable
		.av_chipselect          (LOOKUP_RAM_RAM_DDS1_AM_s1_chipselect),             //                         .chipselect
		.av_clken               (LOOKUP_RAM_RAM_DDS1_AM_s1_clken),                  //                         .clken
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lookup_ram_ram_dds1_fm_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (lookup_ram_ram_dds1_fm_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (lookup_ram_ram_dds1_fm_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (lookup_ram_ram_dds1_fm_s1_agent_m0_read),          //                         .read
		.uav_write              (lookup_ram_ram_dds1_fm_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (lookup_ram_ram_dds1_fm_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (lookup_ram_ram_dds1_fm_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (lookup_ram_ram_dds1_fm_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (lookup_ram_ram_dds1_fm_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (lookup_ram_ram_dds1_fm_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (lookup_ram_ram_dds1_fm_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (lookup_ram_ram_dds1_fm_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (LOOKUP_RAM_RAM_DDS1_FM_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (LOOKUP_RAM_RAM_DDS1_FM_s1_write),                  //                         .write
		.av_readdata            (LOOKUP_RAM_RAM_DDS1_FM_s1_readdata),               //                         .readdata
		.av_writedata           (LOOKUP_RAM_RAM_DDS1_FM_s1_writedata),              //                         .writedata
		.av_byteenable          (LOOKUP_RAM_RAM_DDS1_FM_s1_byteenable),             //                         .byteenable
		.av_chipselect          (LOOKUP_RAM_RAM_DDS1_FM_s1_chipselect),             //                         .chipselect
		.av_clken               (LOOKUP_RAM_RAM_DDS1_FM_s1_clken),                  //                         .clken
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lookup_ram_ram_dds1_s1_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (lookup_ram_ram_dds1_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (lookup_ram_ram_dds1_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (lookup_ram_ram_dds1_s1_agent_m0_read),          //                         .read
		.uav_write              (lookup_ram_ram_dds1_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (lookup_ram_ram_dds1_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (lookup_ram_ram_dds1_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (lookup_ram_ram_dds1_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (lookup_ram_ram_dds1_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (lookup_ram_ram_dds1_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (lookup_ram_ram_dds1_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (lookup_ram_ram_dds1_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (LOOKUP_RAM_RAM_DDS1_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (LOOKUP_RAM_RAM_DDS1_s1_write),                  //                         .write
		.av_readdata            (LOOKUP_RAM_RAM_DDS1_s1_readdata),               //                         .readdata
		.av_writedata           (LOOKUP_RAM_RAM_DDS1_s1_writedata),              //                         .writedata
		.av_byteenable          (LOOKUP_RAM_RAM_DDS1_s1_byteenable),             //                         .byteenable
		.av_chipselect          (LOOKUP_RAM_RAM_DDS1_s1_chipselect),             //                         .chipselect
		.av_clken               (LOOKUP_RAM_RAM_DDS1_s1_clken),                  //                         .clken
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (JTAG_UART_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (JTAG_UART_avalon_jtag_slave_write),                  //                         .write
		.av_read                (JTAG_UART_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (JTAG_UART_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (JTAG_UART_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (JTAG_UART_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (JTAG_UART_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (15),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lcd_dma_control_port_slave_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (lcd_dma_control_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (lcd_dma_control_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (lcd_dma_control_port_slave_agent_m0_read),          //                         .read
		.uav_write              (lcd_dma_control_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (lcd_dma_control_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (lcd_dma_control_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (lcd_dma_control_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (lcd_dma_control_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (lcd_dma_control_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (lcd_dma_control_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (lcd_dma_control_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (LCD_DMA_control_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (LCD_DMA_control_port_slave_write),                  //                         .write
		.av_readdata            (LCD_DMA_control_port_slave_readdata),               //                         .readdata
		.av_writedata           (LCD_DMA_control_port_slave_writedata),              //                         .writedata
		.av_chipselect          (LCD_DMA_control_port_slave_chipselect),             //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (15),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) spi_dma_control_port_slave_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (spi_dma_control_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (spi_dma_control_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (spi_dma_control_port_slave_agent_m0_read),          //                         .read
		.uav_write              (spi_dma_control_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (spi_dma_control_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (spi_dma_control_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (spi_dma_control_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (spi_dma_control_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (spi_dma_control_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (spi_dma_control_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (spi_dma_control_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (SPI_DMA_control_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (SPI_DMA_control_port_slave_write),                  //                         .write
		.av_readdata            (SPI_DMA_control_port_slave_readdata),               //                         .readdata
		.av_writedata           (SPI_DMA_control_port_slave_writedata),              //                         .writedata
		.av_chipselect          (SPI_DMA_control_port_slave_chipselect),             //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) flash_csr_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (flash_csr_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (flash_csr_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (flash_csr_agent_m0_read),                    //                         .read
		.uav_write              (flash_csr_agent_m0_write),                   //                         .write
		.uav_waitrequest        (flash_csr_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (flash_csr_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (flash_csr_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (flash_csr_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (flash_csr_agent_m0_writedata),               //                         .writedata
		.uav_lock               (flash_csr_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (flash_csr_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (FLASH_csr_address),                          //      avalon_anti_slave_0.address
		.av_write               (FLASH_csr_write),                            //                         .write
		.av_read                (FLASH_csr_read),                             //                         .read
		.av_readdata            (FLASH_csr_readdata),                         //                         .readdata
		.av_writedata           (FLASH_csr_writedata),                        //                         .writedata
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) flash_data_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (flash_data_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (flash_data_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (flash_data_agent_m0_read),                   //                         .read
		.uav_write              (flash_data_agent_m0_write),                  //                         .write
		.uav_waitrequest        (flash_data_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (flash_data_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (flash_data_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (flash_data_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (flash_data_agent_m0_writedata),              //                         .writedata
		.uav_lock               (flash_data_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (flash_data_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (FLASH_data_address),                         //      avalon_anti_slave_0.address
		.av_write               (FLASH_data_write),                           //                         .write
		.av_read                (FLASH_data_read),                            //                         .read
		.av_readdata            (FLASH_data_readdata),                        //                         .readdata
		.av_writedata           (FLASH_data_writedata),                       //                         .writedata
		.av_burstcount          (FLASH_data_burstcount),                      //                         .burstcount
		.av_readdatavalid       (FLASH_data_readdatavalid),                   //                         .readdatavalid
		.av_waitrequest         (FLASH_data_waitrequest),                     //                         .waitrequest
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios_cpu_debug_mem_slave_translator (
		.clk                    (clk_0_clk_clk),                                   //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios_cpu_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios_cpu_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios_cpu_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios_cpu_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios_cpu_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios_cpu_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios_cpu_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios_cpu_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios_cpu_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios_cpu_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios_cpu_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (NIOS_CPU_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (NIOS_CPU_debug_mem_slave_write),                  //                         .write
		.av_read                (NIOS_CPU_debug_mem_slave_read),                   //                         .read
		.av_readdata            (NIOS_CPU_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (NIOS_CPU_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (NIOS_CPU_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (NIOS_CPU_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (NIOS_CPU_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ram_24k_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ram_24k_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (ram_24k_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (ram_24k_s1_agent_m0_read),                   //                         .read
		.uav_write              (ram_24k_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (ram_24k_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (ram_24k_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (ram_24k_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (ram_24k_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (ram_24k_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (ram_24k_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (ram_24k_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (RAM_24K_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (RAM_24K_s1_write),                           //                         .write
		.av_readdata            (RAM_24K_s1_readdata),                        //                         .readdata
		.av_writedata           (RAM_24K_s1_writedata),                       //                         .writedata
		.av_byteenable          (RAM_24K_s1_byteenable),                      //                         .byteenable
		.av_chipselect          (RAM_24K_s1_chipselect),                      //                         .chipselect
		.av_clken               (RAM_24K_s1_clken),                           //                         .clken
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_led_debug_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_led_debug_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (pio_led_debug_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (pio_led_debug_s1_agent_m0_read),             //                         .read
		.uav_write              (pio_led_debug_s1_agent_m0_write),            //                         .write
		.uav_waitrequest        (pio_led_debug_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (pio_led_debug_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (pio_led_debug_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (pio_led_debug_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (pio_led_debug_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock               (pio_led_debug_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (pio_led_debug_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (PIO_LED_DEBUG_s1_address),                   //      avalon_anti_slave_0.address
		.av_write               (PIO_LED_DEBUG_s1_write),                     //                         .write
		.av_readdata            (PIO_LED_DEBUG_s1_readdata),                  //                         .readdata
		.av_writedata           (PIO_LED_DEBUG_s1_writedata),                 //                         .writedata
		.av_chipselect          (PIO_LED_DEBUG_s1_chipselect),                //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_delay_32bit_s1_translator (
		.clk                    (clk_0_clk_clk),                               //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (timer_delay_32bit_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (timer_delay_32bit_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (timer_delay_32bit_s1_agent_m0_read),          //                         .read
		.uav_write              (timer_delay_32bit_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (timer_delay_32bit_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (timer_delay_32bit_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (timer_delay_32bit_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (timer_delay_32bit_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (timer_delay_32bit_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (timer_delay_32bit_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (timer_delay_32bit_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (TIMER_DELAY_32bit_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (TIMER_DELAY_32bit_s1_write),                  //                         .write
		.av_readdata            (TIMER_DELAY_32bit_s1_readdata),               //                         .readdata
		.av_writedata           (TIMER_DELAY_32bit_s1_writedata),              //                         .writedata
		.av_chipselect          (TIMER_DELAY_32bit_s1_chipselect),             //                         .chipselect
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) keypad_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (keypad_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (keypad_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (keypad_s1_agent_m0_read),                    //                         .read
		.uav_write              (keypad_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (keypad_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (keypad_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (keypad_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (keypad_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (keypad_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (keypad_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (keypad_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (KEYPAD_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (KEYPAD_s1_write),                            //                         .write
		.av_readdata            (KEYPAD_s1_readdata),                         //                         .readdata
		.av_writedata           (KEYPAD_s1_writedata),                        //                         .writedata
		.av_chipselect          (KEYPAD_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) btn_display_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (btn_display_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (btn_display_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (btn_display_s1_agent_m0_read),               //                         .read
		.uav_write              (btn_display_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (btn_display_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (btn_display_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (btn_display_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (btn_display_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (btn_display_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (btn_display_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (btn_display_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (BTN_DISPLAY_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (BTN_DISPLAY_s1_write),                       //                         .write
		.av_readdata            (BTN_DISPLAY_s1_readdata),                    //                         .readdata
		.av_writedata           (BTN_DISPLAY_s1_writedata),                   //                         .writedata
		.av_chipselect          (BTN_DISPLAY_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) btn_encoder_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (btn_encoder_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (btn_encoder_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (btn_encoder_s1_agent_m0_read),               //                         .read
		.uav_write              (btn_encoder_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (btn_encoder_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (btn_encoder_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (btn_encoder_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (btn_encoder_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (btn_encoder_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (btn_encoder_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (btn_encoder_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (BTN_ENCODER_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (BTN_ENCODER_s1_write),                       //                         .write
		.av_readdata            (BTN_ENCODER_s1_readdata),                    //                         .readdata
		.av_writedata           (BTN_ENCODER_s1_writedata),                   //                         .writedata
		.av_chipselect          (BTN_ENCODER_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) btn_ch_onoff_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (btn_ch_onoff_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (btn_ch_onoff_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (btn_ch_onoff_s1_agent_m0_read),              //                         .read
		.uav_write              (btn_ch_onoff_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (btn_ch_onoff_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (btn_ch_onoff_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (btn_ch_onoff_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (btn_ch_onoff_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (btn_ch_onoff_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (btn_ch_onoff_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (btn_ch_onoff_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (BTN_CH_ONOFF_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (BTN_CH_ONOFF_s1_write),                      //                         .write
		.av_readdata            (BTN_CH_ONOFF_s1_readdata),                   //                         .readdata
		.av_writedata           (BTN_CH_ONOFF_s1_writedata),                  //                         .writedata
		.av_chipselect          (BTN_CH_ONOFF_s1_chipselect),                 //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds_reset_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dds_reset_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (dds_reset_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (dds_reset_s1_agent_m0_read),                 //                         .read
		.uav_write              (dds_reset_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (dds_reset_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (dds_reset_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (dds_reset_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (dds_reset_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (dds_reset_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (dds_reset_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (dds_reset_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (DDS_RESET_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (DDS_RESET_s1_write),                         //                         .write
		.av_readdata            (DDS_RESET_s1_readdata),                      //                         .readdata
		.av_writedata           (DDS_RESET_s1_writedata),                     //                         .writedata
		.av_chipselect          (DDS_RESET_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lookup_ram_isr_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (lookup_ram_isr_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (lookup_ram_isr_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (lookup_ram_isr_s1_agent_m0_read),            //                         .read
		.uav_write              (lookup_ram_isr_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (lookup_ram_isr_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (lookup_ram_isr_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (lookup_ram_isr_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (lookup_ram_isr_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (lookup_ram_isr_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (lookup_ram_isr_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (lookup_ram_isr_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (LOOKUP_RAM_ISR_s1_address),                  //      avalon_anti_slave_0.address
		.av_write               (LOOKUP_RAM_ISR_s1_write),                    //                         .write
		.av_readdata            (LOOKUP_RAM_ISR_s1_readdata),                 //                         .readdata
		.av_writedata           (LOOKUP_RAM_ISR_s1_writedata),                //                         .writedata
		.av_chipselect          (LOOKUP_RAM_ISR_s1_chipselect),               //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sd_spi_spi_control_port_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (NIOS_CPU_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (sd_spi_spi_control_port_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sd_spi_spi_control_port_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sd_spi_spi_control_port_agent_m0_read),          //                         .read
		.uav_write              (sd_spi_spi_control_port_agent_m0_write),         //                         .write
		.uav_waitrequest        (sd_spi_spi_control_port_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sd_spi_spi_control_port_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sd_spi_spi_control_port_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sd_spi_spi_control_port_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sd_spi_spi_control_port_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sd_spi_spi_control_port_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sd_spi_spi_control_port_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (SD_SPI_spi_control_port_address),                //      avalon_anti_slave_0.address
		.av_write               (SD_SPI_spi_control_port_write),                  //                         .write
		.av_read                (SD_SPI_spi_control_port_read),                   //                         .read
		.av_readdata            (SD_SPI_spi_control_port_readdata),               //                         .readdata
		.av_writedata           (SD_SPI_spi_control_port_writedata),              //                         .writedata
		.av_chipselect          (SD_SPI_spi_control_port_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_QOS_H                 (79),
		.PKT_QOS_L                 (79),
		.PKT_DATA_SIDEBAND_H       (77),
		.PKT_DATA_SIDEBAND_L       (77),
		.PKT_ADDR_SIDEBAND_H       (76),
		.PKT_ADDR_SIDEBAND_L       (76),
		.PKT_BURST_TYPE_H          (75),
		.PKT_BURST_TYPE_L          (74),
		.PKT_CACHE_H               (99),
		.PKT_CACHE_L               (96),
		.PKT_THREAD_ID_H           (92),
		.PKT_THREAD_ID_L           (92),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_EXCLUSIVE       (61),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.ST_DATA_W                 (105),
		.ST_CHANNEL_W              (47),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios_cpu_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                           //       clk.clk
		.reset                 (NIOS_CPU_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios_cpu_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios_cpu_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios_cpu_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios_cpu_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios_cpu_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios_cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios_cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios_cpu_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios_cpu_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios_cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios_cpu_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios_cpu_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios_cpu_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios_cpu_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios_cpu_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios_cpu_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                       //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                        //          .data
		.rp_channel            (rsp_mux_src_channel),                                                     //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                               //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                 //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                       //          .ready
		.av_response           (),                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                         // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (77),
		.PKT_ORI_BURST_SIZE_L      (75),
		.PKT_RESPONSE_STATUS_H     (74),
		.PKT_RESPONSE_STATUS_L     (73),
		.PKT_QOS_H                 (52),
		.PKT_QOS_L                 (52),
		.PKT_DATA_SIDEBAND_H       (50),
		.PKT_DATA_SIDEBAND_L       (50),
		.PKT_ADDR_SIDEBAND_H       (49),
		.PKT_ADDR_SIDEBAND_L       (49),
		.PKT_BURST_TYPE_H          (48),
		.PKT_BURST_TYPE_L          (47),
		.PKT_CACHE_H               (72),
		.PKT_CACHE_L               (69),
		.PKT_THREAD_ID_H           (65),
		.PKT_THREAD_ID_L           (65),
		.PKT_BURST_SIZE_H          (46),
		.PKT_BURST_SIZE_L          (44),
		.PKT_TRANS_EXCLUSIVE       (34),
		.PKT_TRANS_LOCK            (33),
		.PKT_BEGIN_BURST           (51),
		.PKT_PROTECTION_H          (68),
		.PKT_PROTECTION_L          (66),
		.PKT_BURSTWRAP_H           (43),
		.PKT_BURSTWRAP_L           (41),
		.PKT_BYTE_CNT_H            (40),
		.PKT_BYTE_CNT_L            (35),
		.PKT_ADDR_H                (28),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (29),
		.PKT_TRANS_POSTED          (30),
		.PKT_TRANS_WRITE           (31),
		.PKT_TRANS_READ            (32),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (58),
		.PKT_SRC_ID_L              (53),
		.PKT_DEST_ID_H             (64),
		.PKT_DEST_ID_L             (59),
		.ST_DATA_W                 (78),
		.ST_CHANNEL_W              (47),
		.AV_BURSTCOUNT_W           (1),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) lcd_dma_read_master_agent (
		.clk                   (clk_0_clk_clk),                                                          //       clk.clk
		.reset                 (NIOS_CPU_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.av_address            (lcd_dma_read_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (lcd_dma_read_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (lcd_dma_read_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (lcd_dma_read_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (lcd_dma_read_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (lcd_dma_read_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (lcd_dma_read_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (lcd_dma_read_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (lcd_dma_read_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (lcd_dma_read_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (lcd_dma_read_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (lcd_dma_read_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (lcd_dma_read_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (lcd_dma_read_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (lcd_dma_read_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (lcd_dma_read_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                  //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                   //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                          //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                            //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                  //          .ready
		.av_response           (),                                                                       // (terminated)
		.av_writeresponsevalid ()                                                                        // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (77),
		.PKT_ORI_BURST_SIZE_L      (75),
		.PKT_RESPONSE_STATUS_H     (74),
		.PKT_RESPONSE_STATUS_L     (73),
		.PKT_QOS_H                 (52),
		.PKT_QOS_L                 (52),
		.PKT_DATA_SIDEBAND_H       (50),
		.PKT_DATA_SIDEBAND_L       (50),
		.PKT_ADDR_SIDEBAND_H       (49),
		.PKT_ADDR_SIDEBAND_L       (49),
		.PKT_BURST_TYPE_H          (48),
		.PKT_BURST_TYPE_L          (47),
		.PKT_CACHE_H               (72),
		.PKT_CACHE_L               (69),
		.PKT_THREAD_ID_H           (65),
		.PKT_THREAD_ID_L           (65),
		.PKT_BURST_SIZE_H          (46),
		.PKT_BURST_SIZE_L          (44),
		.PKT_TRANS_EXCLUSIVE       (34),
		.PKT_TRANS_LOCK            (33),
		.PKT_BEGIN_BURST           (51),
		.PKT_PROTECTION_H          (68),
		.PKT_PROTECTION_L          (66),
		.PKT_BURSTWRAP_H           (43),
		.PKT_BURSTWRAP_L           (41),
		.PKT_BYTE_CNT_H            (40),
		.PKT_BYTE_CNT_L            (35),
		.PKT_ADDR_H                (28),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (29),
		.PKT_TRANS_POSTED          (30),
		.PKT_TRANS_WRITE           (31),
		.PKT_TRANS_READ            (32),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (58),
		.PKT_SRC_ID_L              (53),
		.PKT_DEST_ID_H             (64),
		.PKT_DEST_ID_L             (59),
		.ST_DATA_W                 (78),
		.ST_CHANNEL_W              (47),
		.AV_BURSTCOUNT_W           (1),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (3),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) spi_dma_write_master_agent (
		.clk                   (clk_0_clk_clk),                                                           //       clk.clk
		.reset                 (NIOS_CPU_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (spi_dma_write_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (spi_dma_write_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (spi_dma_write_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (spi_dma_write_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (spi_dma_write_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (spi_dma_write_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (spi_dma_write_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (spi_dma_write_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (spi_dma_write_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (spi_dma_write_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (spi_dma_write_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (spi_dma_write_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (spi_dma_write_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (spi_dma_write_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (spi_dma_write_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (spi_dma_write_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                   //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                    //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                                 //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                           //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                             //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                   //          .ready
		.av_response           (),                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                         // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_QOS_H                 (79),
		.PKT_QOS_L                 (79),
		.PKT_DATA_SIDEBAND_H       (77),
		.PKT_DATA_SIDEBAND_L       (77),
		.PKT_ADDR_SIDEBAND_H       (76),
		.PKT_ADDR_SIDEBAND_L       (76),
		.PKT_BURST_TYPE_H          (75),
		.PKT_BURST_TYPE_L          (74),
		.PKT_CACHE_H               (99),
		.PKT_CACHE_L               (96),
		.PKT_THREAD_ID_H           (92),
		.PKT_THREAD_ID_L           (92),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_EXCLUSIVE       (61),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.ST_DATA_W                 (105),
		.ST_CHANNEL_W              (47),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios_cpu_instruction_master_agent (
		.clk                   (clk_0_clk_clk),                                                                  //       clk.clk
		.reset                 (NIOS_CPU_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios_cpu_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios_cpu_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios_cpu_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios_cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios_cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios_cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios_cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios_cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios_cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios_cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios_cpu_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios_cpu_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios_cpu_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios_cpu_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios_cpu_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios_cpu_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                          //        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                           //          .data
		.rp_channel            (rsp_mux_003_src_channel),                                                        //          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                                  //          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                                    //          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                          //          .ready
		.av_response           (),                                                                               // (terminated)
		.av_writeresponsevalid ()                                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds0_am_modindex_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (dds0_am_modindex_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds0_am_modindex_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds0_am_modindex_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds0_am_modindex_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds0_am_modindex_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds0_am_modindex_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds0_am_modindex_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds0_am_modindex_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds0_am_modindex_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds0_am_modindex_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds0_am_modindex_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds0_am_modindex_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds0_am_modindex_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds0_am_modindex_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds0_am_modindex_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds0_am_modindex_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                  //                .channel
		.rf_sink_ready           (dds0_am_modindex_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds0_am_modindex_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds0_am_modindex_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds0_am_modindex_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds0_am_modindex_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds0_am_modindex_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds0_am_modindex_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds0_am_modindex_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds0_am_modindex_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds0_am_modindex_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (dds0_am_modindex_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds0_am_modindex_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds0_am_modindex_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds0_am_modindex_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (dds0_am_modindex_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds0_am_modindex_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds0_am_modindex_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds0_am_modindex_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds0_am_modindex_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds0_am_modindex_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds0_am_modindex_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds0_am_modindex_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds0_am_modindex_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds0_am_modindex_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds1_am_modindex_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (dds1_am_modindex_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds1_am_modindex_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds1_am_modindex_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds1_am_modindex_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds1_am_modindex_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds1_am_modindex_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds1_am_modindex_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds1_am_modindex_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds1_am_modindex_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds1_am_modindex_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds1_am_modindex_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds1_am_modindex_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds1_am_modindex_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds1_am_modindex_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds1_am_modindex_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds1_am_modindex_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                              //                .channel
		.rf_sink_ready           (dds1_am_modindex_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds1_am_modindex_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds1_am_modindex_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds1_am_modindex_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds1_am_modindex_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds1_am_modindex_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds1_am_modindex_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds1_am_modindex_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds1_am_modindex_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds1_am_modindex_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (dds1_am_modindex_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds1_am_modindex_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds1_am_modindex_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds1_am_modindex_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (dds1_am_modindex_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds1_am_modindex_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds1_am_modindex_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds1_am_modindex_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds1_am_modindex_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds1_am_modindex_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds1_am_modindex_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds1_am_modindex_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds1_am_modindex_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds1_am_modindex_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds0_am_modphasestep_s1_agent (
		.clk                     (clk_0_clk_clk),                                            //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (dds0_am_modphasestep_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds0_am_modphasestep_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds0_am_modphasestep_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds0_am_modphasestep_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds0_am_modphasestep_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds0_am_modphasestep_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds0_am_modphasestep_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds0_am_modphasestep_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds0_am_modphasestep_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds0_am_modphasestep_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds0_am_modphasestep_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds0_am_modphasestep_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds0_am_modphasestep_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds0_am_modphasestep_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds0_am_modphasestep_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds0_am_modphasestep_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                  //                .channel
		.rf_sink_ready           (dds0_am_modphasestep_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds0_am_modphasestep_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds0_am_modphasestep_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds0_am_modphasestep_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds0_am_modphasestep_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds0_am_modphasestep_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds0_am_modphasestep_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds0_am_modphasestep_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds0_am_modphasestep_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds0_am_modphasestep_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (dds0_am_modphasestep_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds0_am_modphasestep_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds0_am_modphasestep_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds0_am_modphasestep_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (dds0_am_modphasestep_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds0_am_modphasestep_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds0_am_modphasestep_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds0_am_modphasestep_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds0_am_modphasestep_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds0_am_modphasestep_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds0_am_modphasestep_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds0_am_modphasestep_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds0_am_modphasestep_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds0_am_modphasestep_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds1_am_modphasestep_s1_agent (
		.clk                     (clk_0_clk_clk),                                            //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (dds1_am_modphasestep_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds1_am_modphasestep_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds1_am_modphasestep_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds1_am_modphasestep_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds1_am_modphasestep_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds1_am_modphasestep_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds1_am_modphasestep_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds1_am_modphasestep_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds1_am_modphasestep_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds1_am_modphasestep_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds1_am_modphasestep_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds1_am_modphasestep_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds1_am_modphasestep_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds1_am_modphasestep_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds1_am_modphasestep_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds1_am_modphasestep_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                  //                .channel
		.rf_sink_ready           (dds1_am_modphasestep_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds1_am_modphasestep_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds1_am_modphasestep_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds1_am_modphasestep_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds1_am_modphasestep_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds1_am_modphasestep_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds1_am_modphasestep_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds1_am_modphasestep_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds1_am_modphasestep_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds1_am_modphasestep_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (dds1_am_modphasestep_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds1_am_modphasestep_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds1_am_modphasestep_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds1_am_modphasestep_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (dds1_am_modphasestep_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds1_am_modphasestep_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds1_am_modphasestep_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds1_am_modphasestep_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds1_am_modphasestep_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds1_am_modphasestep_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds1_am_modphasestep_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds1_am_modphasestep_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds1_am_modphasestep_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds1_am_modphasestep_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lcd_backlight_pwm_s1_agent (
		.clk                     (clk_0_clk_clk),                                         //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (lcd_backlight_pwm_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lcd_backlight_pwm_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lcd_backlight_pwm_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lcd_backlight_pwm_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lcd_backlight_pwm_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (lcd_backlight_pwm_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lcd_backlight_pwm_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lcd_backlight_pwm_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (lcd_backlight_pwm_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lcd_backlight_pwm_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (lcd_backlight_pwm_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (lcd_backlight_pwm_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lcd_backlight_pwm_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (lcd_backlight_pwm_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (lcd_backlight_pwm_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (lcd_backlight_pwm_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                               //                .channel
		.rf_sink_ready           (lcd_backlight_pwm_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lcd_backlight_pwm_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lcd_backlight_pwm_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lcd_backlight_pwm_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lcd_backlight_pwm_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lcd_backlight_pwm_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lcd_backlight_pwm_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lcd_backlight_pwm_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lcd_backlight_pwm_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lcd_backlight_pwm_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (lcd_backlight_pwm_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lcd_backlight_pwm_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lcd_backlight_pwm_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lcd_backlight_pwm_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                         //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (lcd_backlight_pwm_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lcd_backlight_pwm_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lcd_backlight_pwm_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lcd_backlight_pwm_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lcd_backlight_pwm_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lcd_backlight_pwm_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lcd_backlight_pwm_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lcd_backlight_pwm_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lcd_backlight_pwm_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lcd_backlight_pwm_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lcd_control_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (lcd_control_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lcd_control_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lcd_control_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lcd_control_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lcd_control_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (lcd_control_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lcd_control_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lcd_control_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (lcd_control_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lcd_control_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (lcd_control_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (lcd_control_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lcd_control_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (lcd_control_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (lcd_control_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (lcd_control_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_005_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                         //                .channel
		.rf_sink_ready           (lcd_control_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lcd_control_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lcd_control_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lcd_control_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lcd_control_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lcd_control_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lcd_control_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lcd_control_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lcd_control_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lcd_control_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),               //                .error
		.rdata_fifo_src_ready    (lcd_control_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lcd_control_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lcd_control_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lcd_control_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (lcd_control_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lcd_control_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lcd_control_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lcd_control_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lcd_control_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lcd_control_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lcd_control_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lcd_control_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lcd_control_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lcd_control_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lcd_data_s1_agent (
		.clk                     (clk_0_clk_clk),                                //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (lcd_data_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lcd_data_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lcd_data_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lcd_data_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lcd_data_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (lcd_data_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lcd_data_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lcd_data_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (lcd_data_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lcd_data_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (lcd_data_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (lcd_data_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lcd_data_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (lcd_data_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (lcd_data_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (lcd_data_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_006_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                      //                .channel
		.rf_sink_ready           (lcd_data_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lcd_data_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lcd_data_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lcd_data_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lcd_data_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lcd_data_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lcd_data_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lcd_data_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lcd_data_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lcd_data_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),            //                .error
		.rdata_fifo_src_ready    (lcd_data_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lcd_data_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lcd_data_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lcd_data_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (lcd_data_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lcd_data_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lcd_data_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lcd_data_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lcd_data_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lcd_data_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lcd_data_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lcd_data_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lcd_data_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lcd_data_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds0_fm_moddeviationphase_s1_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (dds0_fm_moddeviationphase_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds0_fm_moddeviationphase_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds0_fm_moddeviationphase_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds0_fm_moddeviationphase_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds0_fm_moddeviationphase_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds0_fm_moddeviationphase_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds0_fm_moddeviationphase_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds0_fm_moddeviationphase_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds0_fm_moddeviationphase_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds0_fm_moddeviationphase_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds0_fm_moddeviationphase_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds0_fm_moddeviationphase_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds0_fm_moddeviationphase_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds0_fm_moddeviationphase_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds0_fm_moddeviationphase_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds0_fm_moddeviationphase_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                       //                .channel
		.rf_sink_ready           (dds0_fm_moddeviationphase_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds0_fm_moddeviationphase_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds0_fm_moddeviationphase_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds0_fm_moddeviationphase_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds0_fm_moddeviationphase_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds0_fm_moddeviationphase_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds0_fm_moddeviationphase_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds0_fm_moddeviationphase_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds0_fm_moddeviationphase_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds0_fm_moddeviationphase_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (dds0_fm_moddeviationphase_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds0_fm_moddeviationphase_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds0_fm_moddeviationphase_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds0_fm_moddeviationphase_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (dds0_fm_moddeviationphase_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds0_fm_moddeviationphase_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds0_fm_moddeviationphase_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds0_fm_moddeviationphase_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds0_fm_moddeviationphase_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds0_fm_moddeviationphase_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds0_fm_moddeviationphase_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds0_fm_moddeviationphase_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds0_fm_moddeviationphase_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds0_fm_moddeviationphase_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds1_fm_moddeviationphase_s1_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (dds1_fm_moddeviationphase_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds1_fm_moddeviationphase_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds1_fm_moddeviationphase_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds1_fm_moddeviationphase_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds1_fm_moddeviationphase_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds1_fm_moddeviationphase_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds1_fm_moddeviationphase_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds1_fm_moddeviationphase_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds1_fm_moddeviationphase_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds1_fm_moddeviationphase_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds1_fm_moddeviationphase_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds1_fm_moddeviationphase_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds1_fm_moddeviationphase_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds1_fm_moddeviationphase_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds1_fm_moddeviationphase_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds1_fm_moddeviationphase_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                       //                .channel
		.rf_sink_ready           (dds1_fm_moddeviationphase_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds1_fm_moddeviationphase_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds1_fm_moddeviationphase_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds1_fm_moddeviationphase_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds1_fm_moddeviationphase_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds1_fm_moddeviationphase_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds1_fm_moddeviationphase_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds1_fm_moddeviationphase_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds1_fm_moddeviationphase_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds1_fm_moddeviationphase_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (dds1_fm_moddeviationphase_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds1_fm_moddeviationphase_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds1_fm_moddeviationphase_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds1_fm_moddeviationphase_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (dds1_fm_moddeviationphase_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds1_fm_moddeviationphase_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds1_fm_moddeviationphase_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds1_fm_moddeviationphase_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds1_fm_moddeviationphase_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds1_fm_moddeviationphase_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds1_fm_moddeviationphase_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds1_fm_moddeviationphase_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds1_fm_moddeviationphase_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds1_fm_moddeviationphase_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds0_fm_modphasestep_s1_agent (
		.clk                     (clk_0_clk_clk),                                            //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (dds0_fm_modphasestep_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds0_fm_modphasestep_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds0_fm_modphasestep_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds0_fm_modphasestep_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds0_fm_modphasestep_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds0_fm_modphasestep_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds0_fm_modphasestep_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds0_fm_modphasestep_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds0_fm_modphasestep_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds0_fm_modphasestep_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds0_fm_modphasestep_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds0_fm_modphasestep_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds0_fm_modphasestep_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds0_fm_modphasestep_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds0_fm_modphasestep_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds0_fm_modphasestep_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                  //                .channel
		.rf_sink_ready           (dds0_fm_modphasestep_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds0_fm_modphasestep_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds0_fm_modphasestep_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds0_fm_modphasestep_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds0_fm_modphasestep_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds0_fm_modphasestep_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds0_fm_modphasestep_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds0_fm_modphasestep_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds0_fm_modphasestep_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds0_fm_modphasestep_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (dds0_fm_modphasestep_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds0_fm_modphasestep_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds0_fm_modphasestep_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds0_fm_modphasestep_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (dds0_fm_modphasestep_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds0_fm_modphasestep_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds0_fm_modphasestep_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds0_fm_modphasestep_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds0_fm_modphasestep_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds0_fm_modphasestep_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds0_fm_modphasestep_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds0_fm_modphasestep_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds0_fm_modphasestep_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds0_fm_modphasestep_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds1_fm_modphasestep_s1_agent (
		.clk                     (clk_0_clk_clk),                                            //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (dds1_fm_modphasestep_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds1_fm_modphasestep_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds1_fm_modphasestep_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds1_fm_modphasestep_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds1_fm_modphasestep_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds1_fm_modphasestep_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds1_fm_modphasestep_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds1_fm_modphasestep_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds1_fm_modphasestep_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds1_fm_modphasestep_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds1_fm_modphasestep_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds1_fm_modphasestep_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds1_fm_modphasestep_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds1_fm_modphasestep_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds1_fm_modphasestep_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds1_fm_modphasestep_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                  //                .channel
		.rf_sink_ready           (dds1_fm_modphasestep_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds1_fm_modphasestep_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds1_fm_modphasestep_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds1_fm_modphasestep_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds1_fm_modphasestep_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds1_fm_modphasestep_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds1_fm_modphasestep_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds1_fm_modphasestep_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds1_fm_modphasestep_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds1_fm_modphasestep_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (dds1_fm_modphasestep_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds1_fm_modphasestep_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds1_fm_modphasestep_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds1_fm_modphasestep_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (dds1_fm_modphasestep_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds1_fm_modphasestep_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds1_fm_modphasestep_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds1_fm_modphasestep_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds1_fm_modphasestep_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds1_fm_modphasestep_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds1_fm_modphasestep_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds1_fm_modphasestep_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds1_fm_modphasestep_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds1_fm_modphasestep_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds0_outputrelay_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (dds0_outputrelay_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds0_outputrelay_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds0_outputrelay_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds0_outputrelay_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds0_outputrelay_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds0_outputrelay_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds0_outputrelay_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds0_outputrelay_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds0_outputrelay_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds0_outputrelay_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds0_outputrelay_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds0_outputrelay_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds0_outputrelay_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds0_outputrelay_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds0_outputrelay_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds0_outputrelay_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                              //                .channel
		.rf_sink_ready           (dds0_outputrelay_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds0_outputrelay_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds0_outputrelay_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds0_outputrelay_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds0_outputrelay_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds0_outputrelay_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds0_outputrelay_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds0_outputrelay_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds0_outputrelay_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds0_outputrelay_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (dds0_outputrelay_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds0_outputrelay_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds0_outputrelay_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds0_outputrelay_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (dds0_outputrelay_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds0_outputrelay_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds0_outputrelay_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds0_outputrelay_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds0_outputrelay_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds0_outputrelay_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds0_outputrelay_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds0_outputrelay_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds0_outputrelay_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds0_outputrelay_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds1_outputrelay_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (dds1_outputrelay_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds1_outputrelay_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds1_outputrelay_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds1_outputrelay_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds1_outputrelay_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds1_outputrelay_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds1_outputrelay_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds1_outputrelay_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds1_outputrelay_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds1_outputrelay_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds1_outputrelay_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds1_outputrelay_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds1_outputrelay_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds1_outputrelay_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds1_outputrelay_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds1_outputrelay_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_012_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                              //                .channel
		.rf_sink_ready           (dds1_outputrelay_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds1_outputrelay_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds1_outputrelay_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds1_outputrelay_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds1_outputrelay_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds1_outputrelay_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds1_outputrelay_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds1_outputrelay_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds1_outputrelay_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds1_outputrelay_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (dds1_outputrelay_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds1_outputrelay_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds1_outputrelay_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds1_outputrelay_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (dds1_outputrelay_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds1_outputrelay_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds1_outputrelay_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds1_outputrelay_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds1_outputrelay_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds1_outputrelay_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds1_outputrelay_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds1_outputrelay_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds1_outputrelay_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds1_outputrelay_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds0_pm_modindex_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (dds0_pm_modindex_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds0_pm_modindex_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds0_pm_modindex_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds0_pm_modindex_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds0_pm_modindex_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds0_pm_modindex_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds0_pm_modindex_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds0_pm_modindex_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds0_pm_modindex_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds0_pm_modindex_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds0_pm_modindex_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds0_pm_modindex_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds0_pm_modindex_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds0_pm_modindex_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds0_pm_modindex_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds0_pm_modindex_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_013_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                              //                .channel
		.rf_sink_ready           (dds0_pm_modindex_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds0_pm_modindex_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds0_pm_modindex_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds0_pm_modindex_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds0_pm_modindex_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds0_pm_modindex_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds0_pm_modindex_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds0_pm_modindex_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds0_pm_modindex_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds0_pm_modindex_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (dds0_pm_modindex_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds0_pm_modindex_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds0_pm_modindex_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds0_pm_modindex_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (dds0_pm_modindex_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds0_pm_modindex_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds0_pm_modindex_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds0_pm_modindex_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds0_pm_modindex_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds0_pm_modindex_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds0_pm_modindex_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds0_pm_modindex_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds0_pm_modindex_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds0_pm_modindex_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds1_pm_modindex_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (dds1_pm_modindex_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds1_pm_modindex_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds1_pm_modindex_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds1_pm_modindex_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds1_pm_modindex_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds1_pm_modindex_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds1_pm_modindex_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds1_pm_modindex_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds1_pm_modindex_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds1_pm_modindex_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds1_pm_modindex_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds1_pm_modindex_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds1_pm_modindex_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds1_pm_modindex_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds1_pm_modindex_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds1_pm_modindex_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_014_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                              //                .channel
		.rf_sink_ready           (dds1_pm_modindex_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds1_pm_modindex_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds1_pm_modindex_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds1_pm_modindex_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds1_pm_modindex_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds1_pm_modindex_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds1_pm_modindex_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds1_pm_modindex_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds1_pm_modindex_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds1_pm_modindex_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (dds1_pm_modindex_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds1_pm_modindex_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds1_pm_modindex_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds1_pm_modindex_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (dds1_pm_modindex_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds1_pm_modindex_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds1_pm_modindex_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds1_pm_modindex_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds1_pm_modindex_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds1_pm_modindex_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds1_pm_modindex_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds1_pm_modindex_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds1_pm_modindex_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds1_pm_modindex_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds0_pm_modphasestep_s1_agent (
		.clk                     (clk_0_clk_clk),                                            //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (dds0_pm_modphasestep_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds0_pm_modphasestep_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds0_pm_modphasestep_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds0_pm_modphasestep_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds0_pm_modphasestep_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds0_pm_modphasestep_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds0_pm_modphasestep_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds0_pm_modphasestep_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds0_pm_modphasestep_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds0_pm_modphasestep_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds0_pm_modphasestep_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds0_pm_modphasestep_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds0_pm_modphasestep_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds0_pm_modphasestep_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds0_pm_modphasestep_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds0_pm_modphasestep_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_015_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                                  //                .channel
		.rf_sink_ready           (dds0_pm_modphasestep_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds0_pm_modphasestep_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds0_pm_modphasestep_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds0_pm_modphasestep_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds0_pm_modphasestep_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds0_pm_modphasestep_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds0_pm_modphasestep_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds0_pm_modphasestep_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds0_pm_modphasestep_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds0_pm_modphasestep_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (dds0_pm_modphasestep_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds0_pm_modphasestep_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds0_pm_modphasestep_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds0_pm_modphasestep_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (dds0_pm_modphasestep_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds0_pm_modphasestep_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds0_pm_modphasestep_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds0_pm_modphasestep_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds0_pm_modphasestep_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds0_pm_modphasestep_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds0_pm_modphasestep_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds0_pm_modphasestep_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds0_pm_modphasestep_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds0_pm_modphasestep_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds1_pm_modphasestep_s1_agent (
		.clk                     (clk_0_clk_clk),                                            //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (dds1_pm_modphasestep_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds1_pm_modphasestep_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds1_pm_modphasestep_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds1_pm_modphasestep_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds1_pm_modphasestep_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds1_pm_modphasestep_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds1_pm_modphasestep_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds1_pm_modphasestep_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds1_pm_modphasestep_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds1_pm_modphasestep_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds1_pm_modphasestep_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds1_pm_modphasestep_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds1_pm_modphasestep_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds1_pm_modphasestep_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds1_pm_modphasestep_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds1_pm_modphasestep_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_016_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                                  //                .channel
		.rf_sink_ready           (dds1_pm_modphasestep_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds1_pm_modphasestep_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds1_pm_modphasestep_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds1_pm_modphasestep_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds1_pm_modphasestep_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds1_pm_modphasestep_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds1_pm_modphasestep_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds1_pm_modphasestep_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds1_pm_modphasestep_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds1_pm_modphasestep_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (dds1_pm_modphasestep_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds1_pm_modphasestep_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds1_pm_modphasestep_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds1_pm_modphasestep_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (dds1_pm_modphasestep_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds1_pm_modphasestep_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds1_pm_modphasestep_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds1_pm_modphasestep_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds1_pm_modphasestep_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds1_pm_modphasestep_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds1_pm_modphasestep_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds1_pm_modphasestep_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds1_pm_modphasestep_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds1_pm_modphasestep_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds0_pwm_amplitude_s1_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (dds0_pwm_amplitude_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds0_pwm_amplitude_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds0_pwm_amplitude_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds0_pwm_amplitude_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds0_pwm_amplitude_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds0_pwm_amplitude_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds0_pwm_amplitude_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds0_pwm_amplitude_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds0_pwm_amplitude_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds0_pwm_amplitude_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds0_pwm_amplitude_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds0_pwm_amplitude_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds0_pwm_amplitude_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds0_pwm_amplitude_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds0_pwm_amplitude_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds0_pwm_amplitude_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_017_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                                //                .channel
		.rf_sink_ready           (dds0_pwm_amplitude_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds0_pwm_amplitude_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds0_pwm_amplitude_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds0_pwm_amplitude_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds0_pwm_amplitude_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds0_pwm_amplitude_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds0_pwm_amplitude_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds0_pwm_amplitude_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds0_pwm_amplitude_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds0_pwm_amplitude_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (dds0_pwm_amplitude_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds0_pwm_amplitude_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds0_pwm_amplitude_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds0_pwm_amplitude_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                          //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (dds0_pwm_amplitude_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds0_pwm_amplitude_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds0_pwm_amplitude_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds0_pwm_amplitude_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds0_pwm_amplitude_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds0_pwm_amplitude_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds0_pwm_amplitude_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds0_pwm_amplitude_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds0_pwm_amplitude_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds0_pwm_amplitude_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds1_pwm_amplitude_s1_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (dds1_pwm_amplitude_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds1_pwm_amplitude_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds1_pwm_amplitude_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds1_pwm_amplitude_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds1_pwm_amplitude_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds1_pwm_amplitude_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds1_pwm_amplitude_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds1_pwm_amplitude_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds1_pwm_amplitude_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds1_pwm_amplitude_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds1_pwm_amplitude_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds1_pwm_amplitude_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds1_pwm_amplitude_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds1_pwm_amplitude_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds1_pwm_amplitude_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds1_pwm_amplitude_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_018_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                                //                .channel
		.rf_sink_ready           (dds1_pwm_amplitude_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds1_pwm_amplitude_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds1_pwm_amplitude_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds1_pwm_amplitude_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds1_pwm_amplitude_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds1_pwm_amplitude_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds1_pwm_amplitude_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds1_pwm_amplitude_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds1_pwm_amplitude_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds1_pwm_amplitude_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (dds1_pwm_amplitude_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds1_pwm_amplitude_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds1_pwm_amplitude_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds1_pwm_amplitude_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                          //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (dds1_pwm_amplitude_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds1_pwm_amplitude_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds1_pwm_amplitude_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds1_pwm_amplitude_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds1_pwm_amplitude_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds1_pwm_amplitude_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds1_pwm_amplitude_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds1_pwm_amplitude_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds1_pwm_amplitude_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds1_pwm_amplitude_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds0_pwm_offset_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (dds0_pwm_offset_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds0_pwm_offset_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds0_pwm_offset_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds0_pwm_offset_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds0_pwm_offset_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds0_pwm_offset_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds0_pwm_offset_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds0_pwm_offset_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds0_pwm_offset_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds0_pwm_offset_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds0_pwm_offset_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds0_pwm_offset_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds0_pwm_offset_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds0_pwm_offset_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds0_pwm_offset_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds0_pwm_offset_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_019_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                             //                .channel
		.rf_sink_ready           (dds0_pwm_offset_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds0_pwm_offset_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds0_pwm_offset_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds0_pwm_offset_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds0_pwm_offset_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds0_pwm_offset_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds0_pwm_offset_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds0_pwm_offset_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds0_pwm_offset_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds0_pwm_offset_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (dds0_pwm_offset_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds0_pwm_offset_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds0_pwm_offset_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds0_pwm_offset_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (dds0_pwm_offset_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds0_pwm_offset_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds0_pwm_offset_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds0_pwm_offset_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds0_pwm_offset_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds0_pwm_offset_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds0_pwm_offset_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds0_pwm_offset_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds0_pwm_offset_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds0_pwm_offset_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds1_pwm_offset_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (dds1_pwm_offset_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds1_pwm_offset_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds1_pwm_offset_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds1_pwm_offset_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds1_pwm_offset_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds1_pwm_offset_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds1_pwm_offset_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds1_pwm_offset_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds1_pwm_offset_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds1_pwm_offset_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds1_pwm_offset_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds1_pwm_offset_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds1_pwm_offset_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds1_pwm_offset_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds1_pwm_offset_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds1_pwm_offset_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_020_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                             //                .channel
		.rf_sink_ready           (dds1_pwm_offset_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds1_pwm_offset_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds1_pwm_offset_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds1_pwm_offset_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds1_pwm_offset_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds1_pwm_offset_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds1_pwm_offset_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds1_pwm_offset_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds1_pwm_offset_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds1_pwm_offset_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (dds1_pwm_offset_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds1_pwm_offset_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds1_pwm_offset_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds1_pwm_offset_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (dds1_pwm_offset_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds1_pwm_offset_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds1_pwm_offset_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds1_pwm_offset_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds1_pwm_offset_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds1_pwm_offset_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds1_pwm_offset_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds1_pwm_offset_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds1_pwm_offset_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds1_pwm_offset_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds0_phaseoffset_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (dds0_phaseoffset_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds0_phaseoffset_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds0_phaseoffset_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds0_phaseoffset_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds0_phaseoffset_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds0_phaseoffset_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds0_phaseoffset_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds0_phaseoffset_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds0_phaseoffset_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds0_phaseoffset_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds0_phaseoffset_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds0_phaseoffset_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds0_phaseoffset_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds0_phaseoffset_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds0_phaseoffset_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds0_phaseoffset_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_021_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_021_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_021_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_021_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_021_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_021_src_channel),                              //                .channel
		.rf_sink_ready           (dds0_phaseoffset_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds0_phaseoffset_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds0_phaseoffset_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds0_phaseoffset_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds0_phaseoffset_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds0_phaseoffset_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds0_phaseoffset_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds0_phaseoffset_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds0_phaseoffset_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds0_phaseoffset_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (dds0_phaseoffset_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds0_phaseoffset_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds0_phaseoffset_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds0_phaseoffset_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (dds0_phaseoffset_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds0_phaseoffset_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds0_phaseoffset_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds0_phaseoffset_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds0_phaseoffset_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds0_phaseoffset_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds0_phaseoffset_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds0_phaseoffset_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds0_phaseoffset_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds0_phaseoffset_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds1_phaseoffset_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (dds1_phaseoffset_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds1_phaseoffset_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds1_phaseoffset_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds1_phaseoffset_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds1_phaseoffset_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds1_phaseoffset_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds1_phaseoffset_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds1_phaseoffset_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds1_phaseoffset_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds1_phaseoffset_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds1_phaseoffset_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds1_phaseoffset_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds1_phaseoffset_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds1_phaseoffset_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds1_phaseoffset_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds1_phaseoffset_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_022_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_022_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_022_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_022_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_022_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_022_src_channel),                              //                .channel
		.rf_sink_ready           (dds1_phaseoffset_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds1_phaseoffset_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds1_phaseoffset_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds1_phaseoffset_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds1_phaseoffset_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds1_phaseoffset_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds1_phaseoffset_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds1_phaseoffset_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds1_phaseoffset_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds1_phaseoffset_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_022_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_022_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_022_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_022_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (dds1_phaseoffset_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds1_phaseoffset_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds1_phaseoffset_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds1_phaseoffset_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (dds1_phaseoffset_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds1_phaseoffset_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds1_phaseoffset_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds1_phaseoffset_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds1_phaseoffset_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds1_phaseoffset_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds1_phaseoffset_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds1_phaseoffset_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds1_phaseoffset_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds1_phaseoffset_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds0_phasestep_s1_agent (
		.clk                     (clk_0_clk_clk),                                      //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (dds0_phasestep_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds0_phasestep_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds0_phasestep_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds0_phasestep_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds0_phasestep_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds0_phasestep_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds0_phasestep_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds0_phasestep_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds0_phasestep_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds0_phasestep_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds0_phasestep_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds0_phasestep_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds0_phasestep_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds0_phasestep_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds0_phasestep_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds0_phasestep_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_023_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_023_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_023_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_023_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_023_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_023_src_channel),                            //                .channel
		.rf_sink_ready           (dds0_phasestep_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds0_phasestep_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds0_phasestep_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds0_phasestep_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds0_phasestep_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds0_phasestep_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds0_phasestep_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds0_phasestep_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds0_phasestep_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds0_phasestep_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_023_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_023_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_023_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_023_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (dds0_phasestep_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds0_phasestep_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds0_phasestep_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds0_phasestep_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (dds0_phasestep_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds0_phasestep_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds0_phasestep_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds0_phasestep_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds0_phasestep_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds0_phasestep_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds0_phasestep_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds0_phasestep_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds0_phasestep_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds0_phasestep_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds1_phasestep_s1_agent (
		.clk                     (clk_0_clk_clk),                                      //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (dds1_phasestep_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds1_phasestep_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds1_phasestep_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds1_phasestep_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds1_phasestep_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds1_phasestep_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds1_phasestep_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds1_phasestep_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds1_phasestep_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds1_phasestep_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds1_phasestep_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds1_phasestep_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds1_phasestep_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds1_phasestep_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds1_phasestep_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds1_phasestep_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_024_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_024_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_024_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_024_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_024_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_024_src_channel),                            //                .channel
		.rf_sink_ready           (dds1_phasestep_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds1_phasestep_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds1_phasestep_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds1_phasestep_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds1_phasestep_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds1_phasestep_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds1_phasestep_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds1_phasestep_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds1_phasestep_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds1_phasestep_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_024_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_024_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_024_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_024_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (dds1_phasestep_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds1_phasestep_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds1_phasestep_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds1_phasestep_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (dds1_phasestep_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds1_phasestep_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds1_phasestep_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds1_phasestep_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds1_phasestep_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds1_phasestep_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds1_phasestep_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds1_phasestep_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds1_phasestep_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds1_phasestep_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (42),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (44),
		.PKT_ADDR_H                (37),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (38),
		.PKT_TRANS_POSTED          (39),
		.PKT_TRANS_WRITE           (40),
		.PKT_TRANS_READ            (41),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lookup_ram_ram_dds0_am_s1_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (lookup_ram_ram_dds0_am_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (lookup_ram_ram_dds0_am_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (lookup_ram_ram_dds0_am_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (lookup_ram_ram_dds0_am_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (lookup_ram_ram_dds0_am_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (lookup_ram_ram_dds0_am_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (lookup_ram_ram_dds0_am_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (lookup_ram_ram_dds0_am_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (lookup_ram_ram_dds0_am_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (lookup_ram_ram_dds0_am_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (lookup_ram_ram_dds0_am_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (lookup_ram_ram_dds0_am_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (lookup_ram_ram_dds0_am_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (lookup_ram_ram_dds0_am_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (lookup_ram_ram_dds0_am_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (lookup_ram_ram_dds0_am_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (lookup_ram_ram_dds0_am_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (lookup_ram_ram_dds0_am_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (lookup_ram_ram_dds0_am_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (lookup_ram_ram_dds0_am_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (lookup_ram_ram_dds0_am_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (lookup_ram_ram_dds0_am_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (lookup_ram_ram_dds0_am_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (lookup_ram_ram_dds0_am_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (lookup_ram_ram_dds0_am_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (lookup_ram_ram_dds0_am_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (lookup_ram_ram_dds0_am_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (lookup_ram_ram_dds0_am_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (lookup_ram_ram_dds0_am_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (lookup_ram_ram_dds0_am_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (lookup_ram_ram_dds0_am_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (lookup_ram_ram_dds0_am_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_025_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_025_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_025_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_025_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (lookup_ram_ram_dds0_am_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lookup_ram_ram_dds0_am_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (lookup_ram_ram_dds0_am_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lookup_ram_ram_dds0_am_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (lookup_ram_ram_dds0_am_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lookup_ram_ram_dds0_am_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lookup_ram_ram_dds0_am_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lookup_ram_ram_dds0_am_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lookup_ram_ram_dds0_am_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lookup_ram_ram_dds0_am_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lookup_ram_ram_dds0_am_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lookup_ram_ram_dds0_am_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lookup_ram_ram_dds0_am_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lookup_ram_ram_dds0_am_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (42),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (44),
		.PKT_ADDR_H                (37),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (38),
		.PKT_TRANS_POSTED          (39),
		.PKT_TRANS_WRITE           (40),
		.PKT_TRANS_READ            (41),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lookup_ram_ram_dds0_fm_s1_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (lookup_ram_ram_dds0_fm_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (lookup_ram_ram_dds0_fm_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (lookup_ram_ram_dds0_fm_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (lookup_ram_ram_dds0_fm_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (lookup_ram_ram_dds0_fm_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (lookup_ram_ram_dds0_fm_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (lookup_ram_ram_dds0_fm_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (lookup_ram_ram_dds0_fm_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (lookup_ram_ram_dds0_fm_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (lookup_ram_ram_dds0_fm_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (lookup_ram_ram_dds0_fm_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (lookup_ram_ram_dds0_fm_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (lookup_ram_ram_dds0_fm_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (lookup_ram_ram_dds0_fm_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (lookup_ram_ram_dds0_fm_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (lookup_ram_ram_dds0_fm_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (lookup_ram_ram_dds0_fm_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (lookup_ram_ram_dds0_fm_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (lookup_ram_ram_dds0_fm_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (lookup_ram_ram_dds0_fm_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (lookup_ram_ram_dds0_fm_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (lookup_ram_ram_dds0_fm_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (lookup_ram_ram_dds0_fm_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (lookup_ram_ram_dds0_fm_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (lookup_ram_ram_dds0_fm_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (lookup_ram_ram_dds0_fm_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (lookup_ram_ram_dds0_fm_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (lookup_ram_ram_dds0_fm_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (lookup_ram_ram_dds0_fm_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (lookup_ram_ram_dds0_fm_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (lookup_ram_ram_dds0_fm_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (lookup_ram_ram_dds0_fm_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_026_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_026_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_026_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_026_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (lookup_ram_ram_dds0_fm_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lookup_ram_ram_dds0_fm_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (lookup_ram_ram_dds0_fm_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lookup_ram_ram_dds0_fm_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (lookup_ram_ram_dds0_fm_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lookup_ram_ram_dds0_fm_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lookup_ram_ram_dds0_fm_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lookup_ram_ram_dds0_fm_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lookup_ram_ram_dds0_fm_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lookup_ram_ram_dds0_fm_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lookup_ram_ram_dds0_fm_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lookup_ram_ram_dds0_fm_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lookup_ram_ram_dds0_fm_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lookup_ram_ram_dds0_fm_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (42),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (44),
		.PKT_ADDR_H                (37),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (38),
		.PKT_TRANS_POSTED          (39),
		.PKT_TRANS_WRITE           (40),
		.PKT_TRANS_READ            (41),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lookup_ram_ram_dds0_s1_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (lookup_ram_ram_dds0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (lookup_ram_ram_dds0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (lookup_ram_ram_dds0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (lookup_ram_ram_dds0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (lookup_ram_ram_dds0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (lookup_ram_ram_dds0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (lookup_ram_ram_dds0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (lookup_ram_ram_dds0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (lookup_ram_ram_dds0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (lookup_ram_ram_dds0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (lookup_ram_ram_dds0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (lookup_ram_ram_dds0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (lookup_ram_ram_dds0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (lookup_ram_ram_dds0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (lookup_ram_ram_dds0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (lookup_ram_ram_dds0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (lookup_ram_ram_dds0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (lookup_ram_ram_dds0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (lookup_ram_ram_dds0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (lookup_ram_ram_dds0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (lookup_ram_ram_dds0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (lookup_ram_ram_dds0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (lookup_ram_ram_dds0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (lookup_ram_ram_dds0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (lookup_ram_ram_dds0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (lookup_ram_ram_dds0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (lookup_ram_ram_dds0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (lookup_ram_ram_dds0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (lookup_ram_ram_dds0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (lookup_ram_ram_dds0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (lookup_ram_ram_dds0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (lookup_ram_ram_dds0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_027_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_027_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_027_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_027_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (lookup_ram_ram_dds0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lookup_ram_ram_dds0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (lookup_ram_ram_dds0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lookup_ram_ram_dds0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (lookup_ram_ram_dds0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lookup_ram_ram_dds0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lookup_ram_ram_dds0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lookup_ram_ram_dds0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lookup_ram_ram_dds0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lookup_ram_ram_dds0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lookup_ram_ram_dds0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lookup_ram_ram_dds0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lookup_ram_ram_dds0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lookup_ram_ram_dds0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (42),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (44),
		.PKT_ADDR_H                (37),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (38),
		.PKT_TRANS_POSTED          (39),
		.PKT_TRANS_WRITE           (40),
		.PKT_TRANS_READ            (41),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lookup_ram_ram_dds1_am_s1_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (lookup_ram_ram_dds1_am_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (lookup_ram_ram_dds1_am_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (lookup_ram_ram_dds1_am_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (lookup_ram_ram_dds1_am_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (lookup_ram_ram_dds1_am_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (lookup_ram_ram_dds1_am_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (lookup_ram_ram_dds1_am_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (lookup_ram_ram_dds1_am_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (lookup_ram_ram_dds1_am_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (lookup_ram_ram_dds1_am_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (lookup_ram_ram_dds1_am_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (lookup_ram_ram_dds1_am_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (lookup_ram_ram_dds1_am_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (lookup_ram_ram_dds1_am_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (lookup_ram_ram_dds1_am_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (lookup_ram_ram_dds1_am_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (lookup_ram_ram_dds1_am_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (lookup_ram_ram_dds1_am_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (lookup_ram_ram_dds1_am_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (lookup_ram_ram_dds1_am_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (lookup_ram_ram_dds1_am_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (lookup_ram_ram_dds1_am_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (lookup_ram_ram_dds1_am_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (lookup_ram_ram_dds1_am_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (lookup_ram_ram_dds1_am_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (lookup_ram_ram_dds1_am_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (lookup_ram_ram_dds1_am_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (lookup_ram_ram_dds1_am_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (lookup_ram_ram_dds1_am_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (lookup_ram_ram_dds1_am_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (lookup_ram_ram_dds1_am_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (lookup_ram_ram_dds1_am_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_028_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_028_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_028_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_028_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (lookup_ram_ram_dds1_am_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lookup_ram_ram_dds1_am_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (lookup_ram_ram_dds1_am_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lookup_ram_ram_dds1_am_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (lookup_ram_ram_dds1_am_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lookup_ram_ram_dds1_am_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lookup_ram_ram_dds1_am_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lookup_ram_ram_dds1_am_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lookup_ram_ram_dds1_am_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lookup_ram_ram_dds1_am_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lookup_ram_ram_dds1_am_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lookup_ram_ram_dds1_am_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lookup_ram_ram_dds1_am_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lookup_ram_ram_dds1_am_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (42),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (44),
		.PKT_ADDR_H                (37),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (38),
		.PKT_TRANS_POSTED          (39),
		.PKT_TRANS_WRITE           (40),
		.PKT_TRANS_READ            (41),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lookup_ram_ram_dds1_fm_s1_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (lookup_ram_ram_dds1_fm_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (lookup_ram_ram_dds1_fm_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (lookup_ram_ram_dds1_fm_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (lookup_ram_ram_dds1_fm_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (lookup_ram_ram_dds1_fm_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (lookup_ram_ram_dds1_fm_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (lookup_ram_ram_dds1_fm_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (lookup_ram_ram_dds1_fm_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (lookup_ram_ram_dds1_fm_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (lookup_ram_ram_dds1_fm_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (lookup_ram_ram_dds1_fm_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (lookup_ram_ram_dds1_fm_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (lookup_ram_ram_dds1_fm_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (lookup_ram_ram_dds1_fm_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (lookup_ram_ram_dds1_fm_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (lookup_ram_ram_dds1_fm_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (lookup_ram_ram_dds1_fm_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (lookup_ram_ram_dds1_fm_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (lookup_ram_ram_dds1_fm_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (lookup_ram_ram_dds1_fm_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (lookup_ram_ram_dds1_fm_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (lookup_ram_ram_dds1_fm_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (lookup_ram_ram_dds1_fm_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (lookup_ram_ram_dds1_fm_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (lookup_ram_ram_dds1_fm_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (lookup_ram_ram_dds1_fm_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (lookup_ram_ram_dds1_fm_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (lookup_ram_ram_dds1_fm_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (lookup_ram_ram_dds1_fm_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (lookup_ram_ram_dds1_fm_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (lookup_ram_ram_dds1_fm_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (lookup_ram_ram_dds1_fm_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_029_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_029_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_029_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_029_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (lookup_ram_ram_dds1_fm_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lookup_ram_ram_dds1_fm_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (lookup_ram_ram_dds1_fm_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lookup_ram_ram_dds1_fm_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (lookup_ram_ram_dds1_fm_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lookup_ram_ram_dds1_fm_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lookup_ram_ram_dds1_fm_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lookup_ram_ram_dds1_fm_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lookup_ram_ram_dds1_fm_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lookup_ram_ram_dds1_fm_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lookup_ram_ram_dds1_fm_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lookup_ram_ram_dds1_fm_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lookup_ram_ram_dds1_fm_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lookup_ram_ram_dds1_fm_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (42),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (44),
		.PKT_ADDR_H                (37),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (38),
		.PKT_TRANS_POSTED          (39),
		.PKT_TRANS_WRITE           (40),
		.PKT_TRANS_READ            (41),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lookup_ram_ram_dds1_s1_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (lookup_ram_ram_dds1_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (lookup_ram_ram_dds1_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (lookup_ram_ram_dds1_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (lookup_ram_ram_dds1_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (lookup_ram_ram_dds1_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (lookup_ram_ram_dds1_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (lookup_ram_ram_dds1_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (lookup_ram_ram_dds1_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (lookup_ram_ram_dds1_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (lookup_ram_ram_dds1_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (lookup_ram_ram_dds1_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (lookup_ram_ram_dds1_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (lookup_ram_ram_dds1_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (lookup_ram_ram_dds1_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (lookup_ram_ram_dds1_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (lookup_ram_ram_dds1_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (lookup_ram_ram_dds1_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (lookup_ram_ram_dds1_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (lookup_ram_ram_dds1_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (lookup_ram_ram_dds1_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (lookup_ram_ram_dds1_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (lookup_ram_ram_dds1_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (lookup_ram_ram_dds1_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (lookup_ram_ram_dds1_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (lookup_ram_ram_dds1_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (lookup_ram_ram_dds1_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (lookup_ram_ram_dds1_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (lookup_ram_ram_dds1_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (lookup_ram_ram_dds1_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (lookup_ram_ram_dds1_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (lookup_ram_ram_dds1_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (lookup_ram_ram_dds1_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_030_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_030_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_030_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_030_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (lookup_ram_ram_dds1_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lookup_ram_ram_dds1_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (lookup_ram_ram_dds1_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lookup_ram_ram_dds1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (lookup_ram_ram_dds1_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lookup_ram_ram_dds1_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lookup_ram_ram_dds1_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lookup_ram_ram_dds1_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lookup_ram_ram_dds1_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lookup_ram_ram_dds1_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lookup_ram_ram_dds1_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lookup_ram_ram_dds1_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lookup_ram_ram_dds1_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lookup_ram_ram_dds1_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_031_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_031_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_031_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_031_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_031_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_031_src_channel),                                      //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_031_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_031_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_031_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_031_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lcd_dma_control_port_slave_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (lcd_dma_control_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lcd_dma_control_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lcd_dma_control_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lcd_dma_control_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lcd_dma_control_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (lcd_dma_control_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lcd_dma_control_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lcd_dma_control_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (lcd_dma_control_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lcd_dma_control_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (lcd_dma_control_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (lcd_dma_control_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lcd_dma_control_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (lcd_dma_control_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (lcd_dma_control_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (lcd_dma_control_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_032_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_032_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_032_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_032_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_032_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_032_src_channel),                                     //                .channel
		.rf_sink_ready           (lcd_dma_control_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lcd_dma_control_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lcd_dma_control_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lcd_dma_control_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lcd_dma_control_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lcd_dma_control_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lcd_dma_control_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lcd_dma_control_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lcd_dma_control_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lcd_dma_control_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_032_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_032_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_032_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_032_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (lcd_dma_control_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lcd_dma_control_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lcd_dma_control_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lcd_dma_control_port_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (lcd_dma_control_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (lcd_dma_control_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (lcd_dma_control_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lcd_dma_control_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lcd_dma_control_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lcd_dma_control_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lcd_dma_control_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lcd_dma_control_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lcd_dma_control_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lcd_dma_control_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) spi_dma_control_port_slave_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (spi_dma_control_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (spi_dma_control_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (spi_dma_control_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (spi_dma_control_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (spi_dma_control_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (spi_dma_control_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (spi_dma_control_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (spi_dma_control_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (spi_dma_control_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (spi_dma_control_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (spi_dma_control_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (spi_dma_control_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (spi_dma_control_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (spi_dma_control_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (spi_dma_control_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (spi_dma_control_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_033_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_033_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_033_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_033_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_033_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_033_src_channel),                                     //                .channel
		.rf_sink_ready           (spi_dma_control_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (spi_dma_control_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (spi_dma_control_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (spi_dma_control_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (spi_dma_control_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (spi_dma_control_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (spi_dma_control_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (spi_dma_control_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (spi_dma_control_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (spi_dma_control_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_033_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_033_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_033_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_033_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (spi_dma_control_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (spi_dma_control_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (spi_dma_control_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) spi_dma_control_port_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (spi_dma_control_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (spi_dma_control_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (spi_dma_control_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (spi_dma_control_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (spi_dma_control_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (spi_dma_control_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (spi_dma_control_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (spi_dma_control_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (spi_dma_control_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (spi_dma_control_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) flash_csr_agent (
		.clk                     (clk_0_clk_clk),                              //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (flash_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (flash_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (flash_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (flash_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (flash_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (flash_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (flash_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (flash_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (flash_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (flash_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (flash_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (flash_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (flash_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (flash_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (flash_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (flash_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_034_src_ready),                      //              cp.ready
		.cp_valid                (cmd_mux_034_src_valid),                      //                .valid
		.cp_data                 (cmd_mux_034_src_data),                       //                .data
		.cp_startofpacket        (cmd_mux_034_src_startofpacket),              //                .startofpacket
		.cp_endofpacket          (cmd_mux_034_src_endofpacket),                //                .endofpacket
		.cp_channel              (cmd_mux_034_src_channel),                    //                .channel
		.rf_sink_ready           (flash_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (flash_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (flash_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (flash_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (flash_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (flash_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (flash_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (flash_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (flash_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (flash_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_034_out_0_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_034_out_0_valid),          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_034_out_0_data),           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_034_out_0_error),          //                .error
		.rdata_fifo_src_ready    (flash_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (flash_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (flash_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) flash_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                              //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (flash_csr_agent_rf_source_data),             //        in.data
		.in_valid          (flash_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (flash_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (flash_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (flash_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (flash_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (flash_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (flash_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (flash_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (flash_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) flash_data_agent (
		.clk                     (clk_0_clk_clk),                               //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (flash_data_agent_m0_address),                 //              m0.address
		.m0_burstcount           (flash_data_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (flash_data_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (flash_data_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (flash_data_agent_m0_lock),                    //                .lock
		.m0_readdata             (flash_data_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (flash_data_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (flash_data_agent_m0_read),                    //                .read
		.m0_waitrequest          (flash_data_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (flash_data_agent_m0_writedata),               //                .writedata
		.m0_write                (flash_data_agent_m0_write),                   //                .write
		.rp_endofpacket          (flash_data_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (flash_data_agent_rp_ready),                   //                .ready
		.rp_valid                (flash_data_agent_rp_valid),                   //                .valid
		.rp_data                 (flash_data_agent_rp_data),                    //                .data
		.rp_startofpacket        (flash_data_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_035_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_035_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_035_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_035_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_035_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_035_src_channel),                     //                .channel
		.rf_sink_ready           (flash_data_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (flash_data_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (flash_data_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (flash_data_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (flash_data_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (flash_data_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (flash_data_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (flash_data_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (flash_data_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (flash_data_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_035_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_035_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_035_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_035_out_0_error),           //                .error
		.rdata_fifo_src_ready    (flash_data_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (flash_data_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (flash_data_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) flash_data_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                               //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (flash_data_agent_rf_source_data),             //        in.data
		.in_valid          (flash_data_agent_rf_source_valid),            //          .valid
		.in_ready          (flash_data_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (flash_data_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (flash_data_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (flash_data_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (flash_data_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (flash_data_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (flash_data_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (flash_data_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios_cpu_debug_mem_slave_agent (
		.clk                     (clk_0_clk_clk),                                             //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios_cpu_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios_cpu_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios_cpu_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios_cpu_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios_cpu_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios_cpu_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios_cpu_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios_cpu_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios_cpu_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios_cpu_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios_cpu_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios_cpu_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios_cpu_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios_cpu_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios_cpu_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios_cpu_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_036_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_036_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_036_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_036_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_036_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_036_src_channel),                                   //                .channel
		.rf_sink_ready           (nios_cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios_cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios_cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios_cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios_cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios_cpu_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios_cpu_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios_cpu_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios_cpu_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios_cpu_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_036_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_036_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_036_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_036_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (nios_cpu_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios_cpu_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios_cpu_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_cpu_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios_cpu_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios_cpu_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios_cpu_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios_cpu_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios_cpu_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios_cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios_cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios_cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios_cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios_cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ram_24k_s1_agent (
		.clk                     (clk_0_clk_clk),                               //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (ram_24k_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ram_24k_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ram_24k_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ram_24k_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ram_24k_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (ram_24k_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ram_24k_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ram_24k_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (ram_24k_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ram_24k_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (ram_24k_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (ram_24k_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ram_24k_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (ram_24k_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (ram_24k_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (ram_24k_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_037_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_037_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_037_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_037_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_037_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_037_src_channel),                     //                .channel
		.rf_sink_ready           (ram_24k_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ram_24k_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ram_24k_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ram_24k_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ram_24k_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ram_24k_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ram_24k_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ram_24k_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ram_24k_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ram_24k_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_037_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_037_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_037_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_037_out_0_error),           //                .error
		.rdata_fifo_src_ready    (ram_24k_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ram_24k_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ram_24k_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ram_24k_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                               //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (ram_24k_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ram_24k_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ram_24k_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ram_24k_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ram_24k_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ram_24k_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ram_24k_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ram_24k_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ram_24k_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ram_24k_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_led_debug_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (pio_led_debug_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio_led_debug_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio_led_debug_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio_led_debug_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio_led_debug_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio_led_debug_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio_led_debug_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio_led_debug_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio_led_debug_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio_led_debug_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pio_led_debug_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio_led_debug_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio_led_debug_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pio_led_debug_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pio_led_debug_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio_led_debug_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_038_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_038_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_038_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_038_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_038_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_038_src_channel),                           //                .channel
		.rf_sink_ready           (pio_led_debug_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio_led_debug_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio_led_debug_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio_led_debug_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio_led_debug_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio_led_debug_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio_led_debug_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio_led_debug_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio_led_debug_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio_led_debug_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_038_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_038_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_038_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_038_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (pio_led_debug_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_led_debug_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio_led_debug_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_led_debug_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (pio_led_debug_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_led_debug_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_led_debug_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_led_debug_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_led_debug_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_led_debug_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_led_debug_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_led_debug_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_led_debug_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_led_debug_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_delay_32bit_s1_agent (
		.clk                     (clk_0_clk_clk),                                         //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (timer_delay_32bit_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timer_delay_32bit_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timer_delay_32bit_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timer_delay_32bit_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timer_delay_32bit_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timer_delay_32bit_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timer_delay_32bit_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timer_delay_32bit_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timer_delay_32bit_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timer_delay_32bit_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timer_delay_32bit_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timer_delay_32bit_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timer_delay_32bit_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timer_delay_32bit_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timer_delay_32bit_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timer_delay_32bit_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_039_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_039_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_039_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_039_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_039_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_039_src_channel),                               //                .channel
		.rf_sink_ready           (timer_delay_32bit_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timer_delay_32bit_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timer_delay_32bit_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timer_delay_32bit_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timer_delay_32bit_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timer_delay_32bit_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timer_delay_32bit_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timer_delay_32bit_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timer_delay_32bit_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timer_delay_32bit_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_039_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_039_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_039_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_039_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (timer_delay_32bit_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_delay_32bit_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timer_delay_32bit_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_delay_32bit_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                         //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (timer_delay_32bit_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer_delay_32bit_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer_delay_32bit_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer_delay_32bit_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer_delay_32bit_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer_delay_32bit_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer_delay_32bit_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer_delay_32bit_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer_delay_32bit_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer_delay_32bit_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) keypad_s1_agent (
		.clk                     (clk_0_clk_clk),                              //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (keypad_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (keypad_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (keypad_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (keypad_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (keypad_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (keypad_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (keypad_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (keypad_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (keypad_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (keypad_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (keypad_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (keypad_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (keypad_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (keypad_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (keypad_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (keypad_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_040_src_ready),                      //              cp.ready
		.cp_valid                (cmd_mux_040_src_valid),                      //                .valid
		.cp_data                 (cmd_mux_040_src_data),                       //                .data
		.cp_startofpacket        (cmd_mux_040_src_startofpacket),              //                .startofpacket
		.cp_endofpacket          (cmd_mux_040_src_endofpacket),                //                .endofpacket
		.cp_channel              (cmd_mux_040_src_channel),                    //                .channel
		.rf_sink_ready           (keypad_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (keypad_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (keypad_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (keypad_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (keypad_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (keypad_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (keypad_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (keypad_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (keypad_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (keypad_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_040_out_0_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_040_out_0_valid),          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_040_out_0_data),           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_040_out_0_error),          //                .error
		.rdata_fifo_src_ready    (keypad_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (keypad_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (keypad_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) keypad_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                              //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (keypad_s1_agent_rf_source_data),             //        in.data
		.in_valid          (keypad_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (keypad_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (keypad_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (keypad_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (keypad_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (keypad_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (keypad_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (keypad_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (keypad_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) btn_display_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (btn_display_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (btn_display_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (btn_display_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (btn_display_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (btn_display_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (btn_display_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (btn_display_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (btn_display_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (btn_display_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (btn_display_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (btn_display_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (btn_display_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (btn_display_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (btn_display_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (btn_display_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (btn_display_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_041_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_041_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_041_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_041_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_041_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_041_src_channel),                         //                .channel
		.rf_sink_ready           (btn_display_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (btn_display_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (btn_display_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (btn_display_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (btn_display_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (btn_display_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (btn_display_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (btn_display_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (btn_display_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (btn_display_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_041_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_041_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_041_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_041_out_0_error),               //                .error
		.rdata_fifo_src_ready    (btn_display_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (btn_display_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (btn_display_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) btn_display_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (btn_display_s1_agent_rf_source_data),             //        in.data
		.in_valid          (btn_display_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (btn_display_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (btn_display_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (btn_display_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (btn_display_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (btn_display_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (btn_display_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (btn_display_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (btn_display_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) btn_encoder_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (btn_encoder_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (btn_encoder_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (btn_encoder_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (btn_encoder_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (btn_encoder_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (btn_encoder_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (btn_encoder_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (btn_encoder_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (btn_encoder_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (btn_encoder_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (btn_encoder_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (btn_encoder_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (btn_encoder_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (btn_encoder_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (btn_encoder_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (btn_encoder_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_042_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_042_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_042_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_042_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_042_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_042_src_channel),                         //                .channel
		.rf_sink_ready           (btn_encoder_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (btn_encoder_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (btn_encoder_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (btn_encoder_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (btn_encoder_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (btn_encoder_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (btn_encoder_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (btn_encoder_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (btn_encoder_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (btn_encoder_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_042_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_042_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_042_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_042_out_0_error),               //                .error
		.rdata_fifo_src_ready    (btn_encoder_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (btn_encoder_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (btn_encoder_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) btn_encoder_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (btn_encoder_s1_agent_rf_source_data),             //        in.data
		.in_valid          (btn_encoder_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (btn_encoder_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (btn_encoder_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (btn_encoder_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (btn_encoder_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (btn_encoder_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (btn_encoder_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (btn_encoder_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (btn_encoder_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) btn_ch_onoff_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (btn_ch_onoff_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (btn_ch_onoff_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (btn_ch_onoff_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (btn_ch_onoff_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (btn_ch_onoff_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (btn_ch_onoff_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (btn_ch_onoff_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (btn_ch_onoff_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (btn_ch_onoff_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (btn_ch_onoff_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (btn_ch_onoff_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (btn_ch_onoff_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (btn_ch_onoff_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (btn_ch_onoff_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (btn_ch_onoff_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (btn_ch_onoff_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_043_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_043_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_043_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_043_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_043_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_043_src_channel),                          //                .channel
		.rf_sink_ready           (btn_ch_onoff_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (btn_ch_onoff_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (btn_ch_onoff_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (btn_ch_onoff_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (btn_ch_onoff_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (btn_ch_onoff_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (btn_ch_onoff_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (btn_ch_onoff_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (btn_ch_onoff_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (btn_ch_onoff_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_043_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_043_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_043_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_043_out_0_error),                //                .error
		.rdata_fifo_src_ready    (btn_ch_onoff_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (btn_ch_onoff_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (btn_ch_onoff_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) btn_ch_onoff_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (btn_ch_onoff_s1_agent_rf_source_data),             //        in.data
		.in_valid          (btn_ch_onoff_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (btn_ch_onoff_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (btn_ch_onoff_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (btn_ch_onoff_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (btn_ch_onoff_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (btn_ch_onoff_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (btn_ch_onoff_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (btn_ch_onoff_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (btn_ch_onoff_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dds_reset_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (dds_reset_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds_reset_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds_reset_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds_reset_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds_reset_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds_reset_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds_reset_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds_reset_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds_reset_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds_reset_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds_reset_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds_reset_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds_reset_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds_reset_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds_reset_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds_reset_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_044_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_044_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_044_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_044_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_044_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_044_src_channel),                       //                .channel
		.rf_sink_ready           (dds_reset_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds_reset_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds_reset_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds_reset_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds_reset_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds_reset_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds_reset_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds_reset_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds_reset_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds_reset_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_044_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_044_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_044_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_044_out_0_error),             //                .error
		.rdata_fifo_src_ready    (dds_reset_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds_reset_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds_reset_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds_reset_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (dds_reset_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds_reset_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds_reset_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds_reset_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds_reset_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds_reset_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds_reset_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds_reset_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds_reset_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds_reset_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lookup_ram_isr_s1_agent (
		.clk                     (clk_0_clk_clk),                                      //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (lookup_ram_isr_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lookup_ram_isr_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lookup_ram_isr_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lookup_ram_isr_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lookup_ram_isr_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (lookup_ram_isr_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lookup_ram_isr_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lookup_ram_isr_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (lookup_ram_isr_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lookup_ram_isr_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (lookup_ram_isr_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (lookup_ram_isr_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lookup_ram_isr_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (lookup_ram_isr_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (lookup_ram_isr_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (lookup_ram_isr_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_045_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_045_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_045_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_045_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_045_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_045_src_channel),                            //                .channel
		.rf_sink_ready           (lookup_ram_isr_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lookup_ram_isr_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lookup_ram_isr_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lookup_ram_isr_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lookup_ram_isr_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lookup_ram_isr_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lookup_ram_isr_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lookup_ram_isr_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lookup_ram_isr_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lookup_ram_isr_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_045_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_045_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_045_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_045_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (lookup_ram_isr_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lookup_ram_isr_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lookup_ram_isr_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lookup_ram_isr_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (lookup_ram_isr_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lookup_ram_isr_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lookup_ram_isr_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lookup_ram_isr_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lookup_ram_isr_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lookup_ram_isr_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lookup_ram_isr_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lookup_ram_isr_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lookup_ram_isr_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lookup_ram_isr_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (47),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sd_spi_spi_control_port_agent (
		.clk                     (clk_0_clk_clk),                                            //             clk.clk
		.reset                   (NIOS_CPU_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (sd_spi_spi_control_port_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sd_spi_spi_control_port_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sd_spi_spi_control_port_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sd_spi_spi_control_port_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sd_spi_spi_control_port_agent_m0_lock),                    //                .lock
		.m0_readdata             (sd_spi_spi_control_port_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sd_spi_spi_control_port_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sd_spi_spi_control_port_agent_m0_read),                    //                .read
		.m0_waitrequest          (sd_spi_spi_control_port_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sd_spi_spi_control_port_agent_m0_writedata),               //                .writedata
		.m0_write                (sd_spi_spi_control_port_agent_m0_write),                   //                .write
		.rp_endofpacket          (sd_spi_spi_control_port_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sd_spi_spi_control_port_agent_rp_ready),                   //                .ready
		.rp_valid                (sd_spi_spi_control_port_agent_rp_valid),                   //                .valid
		.rp_data                 (sd_spi_spi_control_port_agent_rp_data),                    //                .data
		.rp_startofpacket        (sd_spi_spi_control_port_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_046_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_046_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_046_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_046_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_046_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_046_src_channel),                                  //                .channel
		.rf_sink_ready           (sd_spi_spi_control_port_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sd_spi_spi_control_port_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sd_spi_spi_control_port_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sd_spi_spi_control_port_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sd_spi_spi_control_port_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sd_spi_spi_control_port_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sd_spi_spi_control_port_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sd_spi_spi_control_port_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sd_spi_spi_control_port_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sd_spi_spi_control_port_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_046_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_046_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_046_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_046_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (sd_spi_spi_control_port_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sd_spi_spi_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sd_spi_spi_control_port_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sd_spi_spi_control_port_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (NIOS_CPU_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (sd_spi_spi_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (sd_spi_spi_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (sd_spi_spi_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sd_spi_spi_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sd_spi_spi_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sd_spi_spi_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sd_spi_spi_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sd_spi_spi_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sd_spi_spi_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sd_spi_spi_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	NiosII_Processor_mm_interconnect_0_router router (
		.sink_ready         (nios_cpu_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios_cpu_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios_cpu_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios_cpu_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios_cpu_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                            //       src.ready
		.src_valid          (router_src_valid),                            //          .valid
		.src_data           (router_src_data),                             //          .data
		.src_channel        (router_src_channel),                          //          .channel
		.src_startofpacket  (router_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                       //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (lcd_dma_read_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (lcd_dma_read_master_agent_cp_valid),         //          .valid
		.sink_data          (lcd_dma_read_master_agent_cp_data),          //          .data
		.sink_startofpacket (lcd_dma_read_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (lcd_dma_read_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                       //       src.ready
		.src_valid          (router_001_src_valid),                       //          .valid
		.src_data           (router_001_src_data),                        //          .data
		.src_channel        (router_001_src_channel),                     //          .channel
		.src_startofpacket  (router_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (spi_dma_write_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (spi_dma_write_master_agent_cp_valid),         //          .valid
		.sink_data          (spi_dma_write_master_agent_cp_data),          //          .data
		.sink_startofpacket (spi_dma_write_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (spi_dma_write_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_002_src_ready),                        //       src.ready
		.src_valid          (router_002_src_valid),                        //          .valid
		.src_data           (router_002_src_data),                         //          .data
		.src_channel        (router_002_src_channel),                      //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                   //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (nios_cpu_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios_cpu_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios_cpu_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios_cpu_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios_cpu_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_003_src_ready),                               //       src.ready
		.src_valid          (router_003_src_valid),                               //          .valid
		.src_data           (router_003_src_data),                                //          .data
		.src_channel        (router_003_src_channel),                             //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                          //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (dds0_am_modindex_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (dds0_am_modindex_s1_agent_rp_valid),         //          .valid
		.sink_data          (dds0_am_modindex_s1_agent_rp_data),          //          .data
		.sink_startofpacket (dds0_am_modindex_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dds0_am_modindex_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                       //       src.ready
		.src_valid          (router_004_src_valid),                       //          .valid
		.src_data           (router_004_src_data),                        //          .data
		.src_channel        (router_004_src_channel),                     //          .channel
		.src_startofpacket  (router_004_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_005 (
		.sink_ready         (dds1_am_modindex_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (dds1_am_modindex_s1_agent_rp_valid),         //          .valid
		.sink_data          (dds1_am_modindex_s1_agent_rp_data),          //          .data
		.sink_startofpacket (dds1_am_modindex_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dds1_am_modindex_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                       //       src.ready
		.src_valid          (router_005_src_valid),                       //          .valid
		.src_data           (router_005_src_data),                        //          .data
		.src_channel        (router_005_src_channel),                     //          .channel
		.src_startofpacket  (router_005_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_006 (
		.sink_ready         (dds0_am_modphasestep_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (dds0_am_modphasestep_s1_agent_rp_valid),         //          .valid
		.sink_data          (dds0_am_modphasestep_s1_agent_rp_data),          //          .data
		.sink_startofpacket (dds0_am_modphasestep_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dds0_am_modphasestep_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_006_src_ready),                           //       src.ready
		.src_valid          (router_006_src_valid),                           //          .valid
		.src_data           (router_006_src_data),                            //          .data
		.src_channel        (router_006_src_channel),                         //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                      //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_007 (
		.sink_ready         (dds1_am_modphasestep_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (dds1_am_modphasestep_s1_agent_rp_valid),         //          .valid
		.sink_data          (dds1_am_modphasestep_s1_agent_rp_data),          //          .data
		.sink_startofpacket (dds1_am_modphasestep_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dds1_am_modphasestep_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_007_src_ready),                           //       src.ready
		.src_valid          (router_007_src_valid),                           //          .valid
		.src_data           (router_007_src_data),                            //          .data
		.src_channel        (router_007_src_channel),                         //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                      //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_008 (
		.sink_ready         (lcd_backlight_pwm_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (lcd_backlight_pwm_s1_agent_rp_valid),         //          .valid
		.sink_data          (lcd_backlight_pwm_s1_agent_rp_data),          //          .data
		.sink_startofpacket (lcd_backlight_pwm_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (lcd_backlight_pwm_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_008_src_ready),                        //       src.ready
		.src_valid          (router_008_src_valid),                        //          .valid
		.src_data           (router_008_src_data),                         //          .data
		.src_channel        (router_008_src_channel),                      //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                   //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_009 (
		.sink_ready         (lcd_control_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (lcd_control_s1_agent_rp_valid),              //          .valid
		.sink_data          (lcd_control_s1_agent_rp_data),               //          .data
		.sink_startofpacket (lcd_control_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (lcd_control_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                       //       src.ready
		.src_valid          (router_009_src_valid),                       //          .valid
		.src_data           (router_009_src_data),                        //          .data
		.src_channel        (router_009_src_channel),                     //          .channel
		.src_startofpacket  (router_009_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_010 (
		.sink_ready         (lcd_data_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (lcd_data_s1_agent_rp_valid),                 //          .valid
		.sink_data          (lcd_data_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (lcd_data_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (lcd_data_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                       //       src.ready
		.src_valid          (router_010_src_valid),                       //          .valid
		.src_data           (router_010_src_data),                        //          .data
		.src_channel        (router_010_src_channel),                     //          .channel
		.src_startofpacket  (router_010_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_011 (
		.sink_ready         (dds0_fm_moddeviationphase_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (dds0_fm_moddeviationphase_s1_agent_rp_valid),         //          .valid
		.sink_data          (dds0_fm_moddeviationphase_s1_agent_rp_data),          //          .data
		.sink_startofpacket (dds0_fm_moddeviationphase_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dds0_fm_moddeviationphase_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_011_src_ready),                                //       src.ready
		.src_valid          (router_011_src_valid),                                //          .valid
		.src_data           (router_011_src_data),                                 //          .data
		.src_channel        (router_011_src_channel),                              //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                           //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_012 (
		.sink_ready         (dds1_fm_moddeviationphase_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (dds1_fm_moddeviationphase_s1_agent_rp_valid),         //          .valid
		.sink_data          (dds1_fm_moddeviationphase_s1_agent_rp_data),          //          .data
		.sink_startofpacket (dds1_fm_moddeviationphase_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dds1_fm_moddeviationphase_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_012_src_ready),                                //       src.ready
		.src_valid          (router_012_src_valid),                                //          .valid
		.src_data           (router_012_src_data),                                 //          .data
		.src_channel        (router_012_src_channel),                              //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                           //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_013 (
		.sink_ready         (dds0_fm_modphasestep_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (dds0_fm_modphasestep_s1_agent_rp_valid),         //          .valid
		.sink_data          (dds0_fm_modphasestep_s1_agent_rp_data),          //          .data
		.sink_startofpacket (dds0_fm_modphasestep_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dds0_fm_modphasestep_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_013_src_ready),                           //       src.ready
		.src_valid          (router_013_src_valid),                           //          .valid
		.src_data           (router_013_src_data),                            //          .data
		.src_channel        (router_013_src_channel),                         //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                      //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_014 (
		.sink_ready         (dds1_fm_modphasestep_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (dds1_fm_modphasestep_s1_agent_rp_valid),         //          .valid
		.sink_data          (dds1_fm_modphasestep_s1_agent_rp_data),          //          .data
		.sink_startofpacket (dds1_fm_modphasestep_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dds1_fm_modphasestep_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_014_src_ready),                           //       src.ready
		.src_valid          (router_014_src_valid),                           //          .valid
		.src_data           (router_014_src_data),                            //          .data
		.src_channel        (router_014_src_channel),                         //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                      //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_015 (
		.sink_ready         (dds0_outputrelay_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (dds0_outputrelay_s1_agent_rp_valid),         //          .valid
		.sink_data          (dds0_outputrelay_s1_agent_rp_data),          //          .data
		.sink_startofpacket (dds0_outputrelay_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dds0_outputrelay_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                       //       src.ready
		.src_valid          (router_015_src_valid),                       //          .valid
		.src_data           (router_015_src_data),                        //          .data
		.src_channel        (router_015_src_channel),                     //          .channel
		.src_startofpacket  (router_015_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_016 (
		.sink_ready         (dds1_outputrelay_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (dds1_outputrelay_s1_agent_rp_valid),         //          .valid
		.sink_data          (dds1_outputrelay_s1_agent_rp_data),          //          .data
		.sink_startofpacket (dds1_outputrelay_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dds1_outputrelay_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                       //       src.ready
		.src_valid          (router_016_src_valid),                       //          .valid
		.src_data           (router_016_src_data),                        //          .data
		.src_channel        (router_016_src_channel),                     //          .channel
		.src_startofpacket  (router_016_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_017 (
		.sink_ready         (dds0_pm_modindex_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (dds0_pm_modindex_s1_agent_rp_valid),         //          .valid
		.sink_data          (dds0_pm_modindex_s1_agent_rp_data),          //          .data
		.sink_startofpacket (dds0_pm_modindex_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dds0_pm_modindex_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                       //       src.ready
		.src_valid          (router_017_src_valid),                       //          .valid
		.src_data           (router_017_src_data),                        //          .data
		.src_channel        (router_017_src_channel),                     //          .channel
		.src_startofpacket  (router_017_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_018 (
		.sink_ready         (dds1_pm_modindex_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (dds1_pm_modindex_s1_agent_rp_valid),         //          .valid
		.sink_data          (dds1_pm_modindex_s1_agent_rp_data),          //          .data
		.sink_startofpacket (dds1_pm_modindex_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dds1_pm_modindex_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                       //       src.ready
		.src_valid          (router_018_src_valid),                       //          .valid
		.src_data           (router_018_src_data),                        //          .data
		.src_channel        (router_018_src_channel),                     //          .channel
		.src_startofpacket  (router_018_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_019 (
		.sink_ready         (dds0_pm_modphasestep_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (dds0_pm_modphasestep_s1_agent_rp_valid),         //          .valid
		.sink_data          (dds0_pm_modphasestep_s1_agent_rp_data),          //          .data
		.sink_startofpacket (dds0_pm_modphasestep_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dds0_pm_modphasestep_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_019_src_ready),                           //       src.ready
		.src_valid          (router_019_src_valid),                           //          .valid
		.src_data           (router_019_src_data),                            //          .data
		.src_channel        (router_019_src_channel),                         //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                      //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_020 (
		.sink_ready         (dds1_pm_modphasestep_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (dds1_pm_modphasestep_s1_agent_rp_valid),         //          .valid
		.sink_data          (dds1_pm_modphasestep_s1_agent_rp_data),          //          .data
		.sink_startofpacket (dds1_pm_modphasestep_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dds1_pm_modphasestep_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_020_src_ready),                           //       src.ready
		.src_valid          (router_020_src_valid),                           //          .valid
		.src_data           (router_020_src_data),                            //          .data
		.src_channel        (router_020_src_channel),                         //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                      //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_021 (
		.sink_ready         (dds0_pwm_amplitude_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (dds0_pwm_amplitude_s1_agent_rp_valid),         //          .valid
		.sink_data          (dds0_pwm_amplitude_s1_agent_rp_data),          //          .data
		.sink_startofpacket (dds0_pwm_amplitude_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dds0_pwm_amplitude_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_021_src_ready),                         //       src.ready
		.src_valid          (router_021_src_valid),                         //          .valid
		.src_data           (router_021_src_data),                          //          .data
		.src_channel        (router_021_src_channel),                       //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                    //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_022 (
		.sink_ready         (dds1_pwm_amplitude_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (dds1_pwm_amplitude_s1_agent_rp_valid),         //          .valid
		.sink_data          (dds1_pwm_amplitude_s1_agent_rp_data),          //          .data
		.sink_startofpacket (dds1_pwm_amplitude_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dds1_pwm_amplitude_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_022_src_ready),                         //       src.ready
		.src_valid          (router_022_src_valid),                         //          .valid
		.src_data           (router_022_src_data),                          //          .data
		.src_channel        (router_022_src_channel),                       //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                    //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_023 (
		.sink_ready         (dds0_pwm_offset_s1_agent_rp_ready),          //      sink.ready
		.sink_valid         (dds0_pwm_offset_s1_agent_rp_valid),          //          .valid
		.sink_data          (dds0_pwm_offset_s1_agent_rp_data),           //          .data
		.sink_startofpacket (dds0_pwm_offset_s1_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (dds0_pwm_offset_s1_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                       //       src.ready
		.src_valid          (router_023_src_valid),                       //          .valid
		.src_data           (router_023_src_data),                        //          .data
		.src_channel        (router_023_src_channel),                     //          .channel
		.src_startofpacket  (router_023_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_024 (
		.sink_ready         (dds1_pwm_offset_s1_agent_rp_ready),          //      sink.ready
		.sink_valid         (dds1_pwm_offset_s1_agent_rp_valid),          //          .valid
		.sink_data          (dds1_pwm_offset_s1_agent_rp_data),           //          .data
		.sink_startofpacket (dds1_pwm_offset_s1_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (dds1_pwm_offset_s1_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                       //       src.ready
		.src_valid          (router_024_src_valid),                       //          .valid
		.src_data           (router_024_src_data),                        //          .data
		.src_channel        (router_024_src_channel),                     //          .channel
		.src_startofpacket  (router_024_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_025 (
		.sink_ready         (dds0_phaseoffset_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (dds0_phaseoffset_s1_agent_rp_valid),         //          .valid
		.sink_data          (dds0_phaseoffset_s1_agent_rp_data),          //          .data
		.sink_startofpacket (dds0_phaseoffset_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dds0_phaseoffset_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                       //       src.ready
		.src_valid          (router_025_src_valid),                       //          .valid
		.src_data           (router_025_src_data),                        //          .data
		.src_channel        (router_025_src_channel),                     //          .channel
		.src_startofpacket  (router_025_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_026 (
		.sink_ready         (dds1_phaseoffset_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (dds1_phaseoffset_s1_agent_rp_valid),         //          .valid
		.sink_data          (dds1_phaseoffset_s1_agent_rp_data),          //          .data
		.sink_startofpacket (dds1_phaseoffset_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dds1_phaseoffset_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                       //       src.ready
		.src_valid          (router_026_src_valid),                       //          .valid
		.src_data           (router_026_src_data),                        //          .data
		.src_channel        (router_026_src_channel),                     //          .channel
		.src_startofpacket  (router_026_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_027 (
		.sink_ready         (dds0_phasestep_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (dds0_phasestep_s1_agent_rp_valid),           //          .valid
		.sink_data          (dds0_phasestep_s1_agent_rp_data),            //          .data
		.sink_startofpacket (dds0_phasestep_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (dds0_phasestep_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_027_src_ready),                       //       src.ready
		.src_valid          (router_027_src_valid),                       //          .valid
		.src_data           (router_027_src_data),                        //          .data
		.src_channel        (router_027_src_channel),                     //          .channel
		.src_startofpacket  (router_027_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_028 (
		.sink_ready         (dds1_phasestep_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (dds1_phasestep_s1_agent_rp_valid),           //          .valid
		.sink_data          (dds1_phasestep_s1_agent_rp_data),            //          .data
		.sink_startofpacket (dds1_phasestep_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (dds1_phasestep_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_028_src_ready),                       //       src.ready
		.src_valid          (router_028_src_valid),                       //          .valid
		.src_data           (router_028_src_data),                        //          .data
		.src_channel        (router_028_src_channel),                     //          .channel
		.src_startofpacket  (router_028_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_029 router_029 (
		.sink_ready         (lookup_ram_ram_dds0_am_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (lookup_ram_ram_dds0_am_s1_agent_rp_valid),         //          .valid
		.sink_data          (lookup_ram_ram_dds0_am_s1_agent_rp_data),          //          .data
		.sink_startofpacket (lookup_ram_ram_dds0_am_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (lookup_ram_ram_dds0_am_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_029_src_ready),                             //       src.ready
		.src_valid          (router_029_src_valid),                             //          .valid
		.src_data           (router_029_src_data),                              //          .data
		.src_channel        (router_029_src_channel),                           //          .channel
		.src_startofpacket  (router_029_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_029_src_endofpacket)                        //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_029 router_030 (
		.sink_ready         (lookup_ram_ram_dds0_fm_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (lookup_ram_ram_dds0_fm_s1_agent_rp_valid),         //          .valid
		.sink_data          (lookup_ram_ram_dds0_fm_s1_agent_rp_data),          //          .data
		.sink_startofpacket (lookup_ram_ram_dds0_fm_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (lookup_ram_ram_dds0_fm_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_030_src_ready),                             //       src.ready
		.src_valid          (router_030_src_valid),                             //          .valid
		.src_data           (router_030_src_data),                              //          .data
		.src_channel        (router_030_src_channel),                           //          .channel
		.src_startofpacket  (router_030_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_030_src_endofpacket)                        //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_029 router_031 (
		.sink_ready         (lookup_ram_ram_dds0_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (lookup_ram_ram_dds0_s1_agent_rp_valid),         //          .valid
		.sink_data          (lookup_ram_ram_dds0_s1_agent_rp_data),          //          .data
		.sink_startofpacket (lookup_ram_ram_dds0_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (lookup_ram_ram_dds0_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_031_src_ready),                          //       src.ready
		.src_valid          (router_031_src_valid),                          //          .valid
		.src_data           (router_031_src_data),                           //          .data
		.src_channel        (router_031_src_channel),                        //          .channel
		.src_startofpacket  (router_031_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_031_src_endofpacket)                     //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_029 router_032 (
		.sink_ready         (lookup_ram_ram_dds1_am_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (lookup_ram_ram_dds1_am_s1_agent_rp_valid),         //          .valid
		.sink_data          (lookup_ram_ram_dds1_am_s1_agent_rp_data),          //          .data
		.sink_startofpacket (lookup_ram_ram_dds1_am_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (lookup_ram_ram_dds1_am_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_032_src_ready),                             //       src.ready
		.src_valid          (router_032_src_valid),                             //          .valid
		.src_data           (router_032_src_data),                              //          .data
		.src_channel        (router_032_src_channel),                           //          .channel
		.src_startofpacket  (router_032_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_032_src_endofpacket)                        //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_029 router_033 (
		.sink_ready         (lookup_ram_ram_dds1_fm_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (lookup_ram_ram_dds1_fm_s1_agent_rp_valid),         //          .valid
		.sink_data          (lookup_ram_ram_dds1_fm_s1_agent_rp_data),          //          .data
		.sink_startofpacket (lookup_ram_ram_dds1_fm_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (lookup_ram_ram_dds1_fm_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_033_src_ready),                             //       src.ready
		.src_valid          (router_033_src_valid),                             //          .valid
		.src_data           (router_033_src_data),                              //          .data
		.src_channel        (router_033_src_channel),                           //          .channel
		.src_startofpacket  (router_033_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_033_src_endofpacket)                        //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_029 router_034 (
		.sink_ready         (lookup_ram_ram_dds1_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (lookup_ram_ram_dds1_s1_agent_rp_valid),         //          .valid
		.sink_data          (lookup_ram_ram_dds1_s1_agent_rp_data),          //          .data
		.sink_startofpacket (lookup_ram_ram_dds1_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (lookup_ram_ram_dds1_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_034_src_ready),                          //       src.ready
		.src_valid          (router_034_src_valid),                          //          .valid
		.src_data           (router_034_src_data),                           //          .data
		.src_channel        (router_034_src_channel),                        //          .channel
		.src_startofpacket  (router_034_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_034_src_endofpacket)                     //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_035 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_035_src_ready),                               //       src.ready
		.src_valid          (router_035_src_valid),                               //          .valid
		.src_data           (router_035_src_data),                                //          .data
		.src_channel        (router_035_src_channel),                             //          .channel
		.src_startofpacket  (router_035_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_035_src_endofpacket)                          //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_036 (
		.sink_ready         (lcd_dma_control_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (lcd_dma_control_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (lcd_dma_control_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (lcd_dma_control_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (lcd_dma_control_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_036_src_ready),                              //       src.ready
		.src_valid          (router_036_src_valid),                              //          .valid
		.src_data           (router_036_src_data),                               //          .data
		.src_channel        (router_036_src_channel),                            //          .channel
		.src_startofpacket  (router_036_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_036_src_endofpacket)                         //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_037 (
		.sink_ready         (spi_dma_control_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (spi_dma_control_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (spi_dma_control_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (spi_dma_control_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (spi_dma_control_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_037_src_ready),                              //       src.ready
		.src_valid          (router_037_src_valid),                              //          .valid
		.src_data           (router_037_src_data),                               //          .data
		.src_channel        (router_037_src_channel),                            //          .channel
		.src_startofpacket  (router_037_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_037_src_endofpacket)                         //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_038 (
		.sink_ready         (flash_csr_agent_rp_ready),                   //      sink.ready
		.sink_valid         (flash_csr_agent_rp_valid),                   //          .valid
		.sink_data          (flash_csr_agent_rp_data),                    //          .data
		.sink_startofpacket (flash_csr_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (flash_csr_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_038_src_ready),                       //       src.ready
		.src_valid          (router_038_src_valid),                       //          .valid
		.src_data           (router_038_src_data),                        //          .data
		.src_channel        (router_038_src_channel),                     //          .channel
		.src_startofpacket  (router_038_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_038_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_039 router_039 (
		.sink_ready         (flash_data_agent_rp_ready),                  //      sink.ready
		.sink_valid         (flash_data_agent_rp_valid),                  //          .valid
		.sink_data          (flash_data_agent_rp_data),                   //          .data
		.sink_startofpacket (flash_data_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (flash_data_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_039_src_ready),                       //       src.ready
		.src_valid          (router_039_src_valid),                       //          .valid
		.src_data           (router_039_src_data),                        //          .data
		.src_channel        (router_039_src_channel),                     //          .channel
		.src_startofpacket  (router_039_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_039_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_039 router_040 (
		.sink_ready         (nios_cpu_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios_cpu_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios_cpu_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios_cpu_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios_cpu_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_040_src_ready),                            //       src.ready
		.src_valid          (router_040_src_valid),                            //          .valid
		.src_data           (router_040_src_data),                             //          .data
		.src_channel        (router_040_src_channel),                          //          .channel
		.src_startofpacket  (router_040_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_040_src_endofpacket)                       //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_041 router_041 (
		.sink_ready         (ram_24k_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (ram_24k_s1_agent_rp_valid),                  //          .valid
		.sink_data          (ram_24k_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (ram_24k_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (ram_24k_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_041_src_ready),                       //       src.ready
		.src_valid          (router_041_src_valid),                       //          .valid
		.src_data           (router_041_src_data),                        //          .data
		.src_channel        (router_041_src_channel),                     //          .channel
		.src_startofpacket  (router_041_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_041_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_042 (
		.sink_ready         (pio_led_debug_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (pio_led_debug_s1_agent_rp_valid),            //          .valid
		.sink_data          (pio_led_debug_s1_agent_rp_data),             //          .data
		.sink_startofpacket (pio_led_debug_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (pio_led_debug_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_042_src_ready),                       //       src.ready
		.src_valid          (router_042_src_valid),                       //          .valid
		.src_data           (router_042_src_data),                        //          .data
		.src_channel        (router_042_src_channel),                     //          .channel
		.src_startofpacket  (router_042_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_042_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_043 (
		.sink_ready         (timer_delay_32bit_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (timer_delay_32bit_s1_agent_rp_valid),         //          .valid
		.sink_data          (timer_delay_32bit_s1_agent_rp_data),          //          .data
		.sink_startofpacket (timer_delay_32bit_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (timer_delay_32bit_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_043_src_ready),                        //       src.ready
		.src_valid          (router_043_src_valid),                        //          .valid
		.src_data           (router_043_src_data),                         //          .data
		.src_channel        (router_043_src_channel),                      //          .channel
		.src_startofpacket  (router_043_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_043_src_endofpacket)                   //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_044 (
		.sink_ready         (keypad_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (keypad_s1_agent_rp_valid),                   //          .valid
		.sink_data          (keypad_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (keypad_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (keypad_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_044_src_ready),                       //       src.ready
		.src_valid          (router_044_src_valid),                       //          .valid
		.src_data           (router_044_src_data),                        //          .data
		.src_channel        (router_044_src_channel),                     //          .channel
		.src_startofpacket  (router_044_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_044_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_045 (
		.sink_ready         (btn_display_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (btn_display_s1_agent_rp_valid),              //          .valid
		.sink_data          (btn_display_s1_agent_rp_data),               //          .data
		.sink_startofpacket (btn_display_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (btn_display_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_045_src_ready),                       //       src.ready
		.src_valid          (router_045_src_valid),                       //          .valid
		.src_data           (router_045_src_data),                        //          .data
		.src_channel        (router_045_src_channel),                     //          .channel
		.src_startofpacket  (router_045_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_045_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_046 (
		.sink_ready         (btn_encoder_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (btn_encoder_s1_agent_rp_valid),              //          .valid
		.sink_data          (btn_encoder_s1_agent_rp_data),               //          .data
		.sink_startofpacket (btn_encoder_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (btn_encoder_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_046_src_ready),                       //       src.ready
		.src_valid          (router_046_src_valid),                       //          .valid
		.src_data           (router_046_src_data),                        //          .data
		.src_channel        (router_046_src_channel),                     //          .channel
		.src_startofpacket  (router_046_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_046_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_047 (
		.sink_ready         (btn_ch_onoff_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (btn_ch_onoff_s1_agent_rp_valid),             //          .valid
		.sink_data          (btn_ch_onoff_s1_agent_rp_data),              //          .data
		.sink_startofpacket (btn_ch_onoff_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (btn_ch_onoff_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_047_src_ready),                       //       src.ready
		.src_valid          (router_047_src_valid),                       //          .valid
		.src_data           (router_047_src_data),                        //          .data
		.src_channel        (router_047_src_channel),                     //          .channel
		.src_startofpacket  (router_047_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_047_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_048 (
		.sink_ready         (dds_reset_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (dds_reset_s1_agent_rp_valid),                //          .valid
		.sink_data          (dds_reset_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (dds_reset_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (dds_reset_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_048_src_ready),                       //       src.ready
		.src_valid          (router_048_src_valid),                       //          .valid
		.src_data           (router_048_src_data),                        //          .data
		.src_channel        (router_048_src_channel),                     //          .channel
		.src_startofpacket  (router_048_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_048_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_049 (
		.sink_ready         (lookup_ram_isr_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (lookup_ram_isr_s1_agent_rp_valid),           //          .valid
		.sink_data          (lookup_ram_isr_s1_agent_rp_data),            //          .data
		.sink_startofpacket (lookup_ram_isr_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (lookup_ram_isr_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_049_src_ready),                       //       src.ready
		.src_valid          (router_049_src_valid),                       //          .valid
		.src_data           (router_049_src_data),                        //          .data
		.src_channel        (router_049_src_channel),                     //          .channel
		.src_startofpacket  (router_049_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_049_src_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_router_004 router_050 (
		.sink_ready         (sd_spi_spi_control_port_agent_rp_ready),         //      sink.ready
		.sink_valid         (sd_spi_spi_control_port_agent_rp_valid),         //          .valid
		.sink_data          (sd_spi_spi_control_port_agent_rp_data),          //          .data
		.sink_startofpacket (sd_spi_spi_control_port_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sd_spi_spi_control_port_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_050_src_ready),                           //       src.ready
		.src_valid          (router_050_src_valid),                           //          .valid
		.src_data           (router_050_src_data),                            //          .data
		.src_channel        (router_050_src_channel),                         //          .channel
		.src_startofpacket  (router_050_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_050_src_endofpacket)                      //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (37),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (60),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (44),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_BURST_TYPE_H          (57),
		.PKT_BURST_TYPE_L          (56),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_TRANS_COMPRESSED_READ (38),
		.PKT_TRANS_WRITE           (40),
		.PKT_TRANS_READ            (41),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (47),
		.OUT_BYTE_CNT_H            (45),
		.OUT_BURSTWRAP_H           (52),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) lookup_ram_ram_dds0_am_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                 //       cr0.clk
		.reset                 (NIOS_CPU_reset_reset_bridge_in_reset_reset),                    // cr0_reset.reset
		.sink0_valid           (cmd_mux_025_src_valid),                                         //     sink0.valid
		.sink0_data            (cmd_mux_025_src_data),                                          //          .data
		.sink0_channel         (cmd_mux_025_src_channel),                                       //          .channel
		.sink0_startofpacket   (cmd_mux_025_src_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_025_src_endofpacket),                                   //          .endofpacket
		.sink0_ready           (cmd_mux_025_src_ready),                                         //          .ready
		.source0_valid         (lookup_ram_ram_dds0_am_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (lookup_ram_ram_dds0_am_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (lookup_ram_ram_dds0_am_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (lookup_ram_ram_dds0_am_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (lookup_ram_ram_dds0_am_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (lookup_ram_ram_dds0_am_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (37),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (60),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (44),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_BURST_TYPE_H          (57),
		.PKT_BURST_TYPE_L          (56),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_TRANS_COMPRESSED_READ (38),
		.PKT_TRANS_WRITE           (40),
		.PKT_TRANS_READ            (41),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (47),
		.OUT_BYTE_CNT_H            (45),
		.OUT_BURSTWRAP_H           (52),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) lookup_ram_ram_dds0_fm_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                 //       cr0.clk
		.reset                 (NIOS_CPU_reset_reset_bridge_in_reset_reset),                    // cr0_reset.reset
		.sink0_valid           (cmd_mux_026_src_valid),                                         //     sink0.valid
		.sink0_data            (cmd_mux_026_src_data),                                          //          .data
		.sink0_channel         (cmd_mux_026_src_channel),                                       //          .channel
		.sink0_startofpacket   (cmd_mux_026_src_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_026_src_endofpacket),                                   //          .endofpacket
		.sink0_ready           (cmd_mux_026_src_ready),                                         //          .ready
		.source0_valid         (lookup_ram_ram_dds0_fm_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (lookup_ram_ram_dds0_fm_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (lookup_ram_ram_dds0_fm_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (lookup_ram_ram_dds0_fm_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (lookup_ram_ram_dds0_fm_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (lookup_ram_ram_dds0_fm_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (37),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (60),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (44),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_BURST_TYPE_H          (57),
		.PKT_BURST_TYPE_L          (56),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_TRANS_COMPRESSED_READ (38),
		.PKT_TRANS_WRITE           (40),
		.PKT_TRANS_READ            (41),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (47),
		.OUT_BYTE_CNT_H            (45),
		.OUT_BURSTWRAP_H           (52),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) lookup_ram_ram_dds0_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                              //       cr0.clk
		.reset                 (NIOS_CPU_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_027_src_valid),                                      //     sink0.valid
		.sink0_data            (cmd_mux_027_src_data),                                       //          .data
		.sink0_channel         (cmd_mux_027_src_channel),                                    //          .channel
		.sink0_startofpacket   (cmd_mux_027_src_startofpacket),                              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_027_src_endofpacket),                                //          .endofpacket
		.sink0_ready           (cmd_mux_027_src_ready),                                      //          .ready
		.source0_valid         (lookup_ram_ram_dds0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (lookup_ram_ram_dds0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (lookup_ram_ram_dds0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (lookup_ram_ram_dds0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (lookup_ram_ram_dds0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (lookup_ram_ram_dds0_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (37),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (60),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (44),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_BURST_TYPE_H          (57),
		.PKT_BURST_TYPE_L          (56),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_TRANS_COMPRESSED_READ (38),
		.PKT_TRANS_WRITE           (40),
		.PKT_TRANS_READ            (41),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (47),
		.OUT_BYTE_CNT_H            (45),
		.OUT_BURSTWRAP_H           (52),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) lookup_ram_ram_dds1_am_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                 //       cr0.clk
		.reset                 (NIOS_CPU_reset_reset_bridge_in_reset_reset),                    // cr0_reset.reset
		.sink0_valid           (cmd_mux_028_src_valid),                                         //     sink0.valid
		.sink0_data            (cmd_mux_028_src_data),                                          //          .data
		.sink0_channel         (cmd_mux_028_src_channel),                                       //          .channel
		.sink0_startofpacket   (cmd_mux_028_src_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_028_src_endofpacket),                                   //          .endofpacket
		.sink0_ready           (cmd_mux_028_src_ready),                                         //          .ready
		.source0_valid         (lookup_ram_ram_dds1_am_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (lookup_ram_ram_dds1_am_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (lookup_ram_ram_dds1_am_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (lookup_ram_ram_dds1_am_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (lookup_ram_ram_dds1_am_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (lookup_ram_ram_dds1_am_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (37),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (60),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (44),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_BURST_TYPE_H          (57),
		.PKT_BURST_TYPE_L          (56),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_TRANS_COMPRESSED_READ (38),
		.PKT_TRANS_WRITE           (40),
		.PKT_TRANS_READ            (41),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (47),
		.OUT_BYTE_CNT_H            (45),
		.OUT_BURSTWRAP_H           (52),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) lookup_ram_ram_dds1_fm_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                 //       cr0.clk
		.reset                 (NIOS_CPU_reset_reset_bridge_in_reset_reset),                    // cr0_reset.reset
		.sink0_valid           (cmd_mux_029_src_valid),                                         //     sink0.valid
		.sink0_data            (cmd_mux_029_src_data),                                          //          .data
		.sink0_channel         (cmd_mux_029_src_channel),                                       //          .channel
		.sink0_startofpacket   (cmd_mux_029_src_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_029_src_endofpacket),                                   //          .endofpacket
		.sink0_ready           (cmd_mux_029_src_ready),                                         //          .ready
		.source0_valid         (lookup_ram_ram_dds1_fm_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (lookup_ram_ram_dds1_fm_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (lookup_ram_ram_dds1_fm_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (lookup_ram_ram_dds1_fm_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (lookup_ram_ram_dds1_fm_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (lookup_ram_ram_dds1_fm_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (37),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (60),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (44),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_BURST_TYPE_H          (57),
		.PKT_BURST_TYPE_L          (56),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_TRANS_COMPRESSED_READ (38),
		.PKT_TRANS_WRITE           (40),
		.PKT_TRANS_READ            (41),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (47),
		.OUT_BYTE_CNT_H            (45),
		.OUT_BURSTWRAP_H           (52),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) lookup_ram_ram_dds1_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                              //       cr0.clk
		.reset                 (NIOS_CPU_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_030_src_valid),                                      //     sink0.valid
		.sink0_data            (cmd_mux_030_src_data),                                       //          .data
		.sink0_channel         (cmd_mux_030_src_channel),                                    //          .channel
		.sink0_startofpacket   (cmd_mux_030_src_startofpacket),                              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_030_src_endofpacket),                                //          .endofpacket
		.sink0_ready           (cmd_mux_030_src_ready),                                      //          .ready
		.source0_valid         (lookup_ram_ram_dds1_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (lookup_ram_ram_dds1_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (lookup_ram_ram_dds1_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (lookup_ram_ram_dds1_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (lookup_ram_ram_dds1_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (lookup_ram_ram_dds1_s1_burst_adapter_source0_ready)          //          .ready
	);

	NiosII_Processor_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                           //      sink.ready
		.sink_channel        (router_src_channel),                         //          .channel
		.sink_data           (router_src_data),                            //          .data
		.sink_startofpacket  (router_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                     //          .endofpacket
		.sink_valid          (router_src_valid),                           //          .valid
		.src0_ready          (cmd_demux_src0_ready),                       //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                       //          .valid
		.src0_data           (cmd_demux_src0_data),                        //          .data
		.src0_channel        (cmd_demux_src0_channel),                     //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                 //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                       //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                       //          .valid
		.src1_data           (cmd_demux_src1_data),                        //          .data
		.src1_channel        (cmd_demux_src1_channel),                     //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                 //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                       //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                       //          .valid
		.src2_data           (cmd_demux_src2_data),                        //          .data
		.src2_channel        (cmd_demux_src2_channel),                     //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                 //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                       //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                       //          .valid
		.src3_data           (cmd_demux_src3_data),                        //          .data
		.src3_channel        (cmd_demux_src3_channel),                     //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),               //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                 //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                       //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                       //          .valid
		.src4_data           (cmd_demux_src4_data),                        //          .data
		.src4_channel        (cmd_demux_src4_channel),                     //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),               //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                 //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                       //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                       //          .valid
		.src5_data           (cmd_demux_src5_data),                        //          .data
		.src5_channel        (cmd_demux_src5_channel),                     //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),               //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                 //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                       //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                       //          .valid
		.src6_data           (cmd_demux_src6_data),                        //          .data
		.src6_channel        (cmd_demux_src6_channel),                     //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),               //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                 //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                       //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                       //          .valid
		.src7_data           (cmd_demux_src7_data),                        //          .data
		.src7_channel        (cmd_demux_src7_channel),                     //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),               //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                 //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                       //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                       //          .valid
		.src8_data           (cmd_demux_src8_data),                        //          .data
		.src8_channel        (cmd_demux_src8_channel),                     //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),               //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                 //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                       //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                       //          .valid
		.src9_data           (cmd_demux_src9_data),                        //          .data
		.src9_channel        (cmd_demux_src9_channel),                     //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),               //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                 //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                      //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                      //          .valid
		.src10_data          (cmd_demux_src10_data),                       //          .data
		.src10_channel       (cmd_demux_src10_channel),                    //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),              //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                      //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                      //          .valid
		.src11_data          (cmd_demux_src11_data),                       //          .data
		.src11_channel       (cmd_demux_src11_channel),                    //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),              //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                      //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                      //          .valid
		.src12_data          (cmd_demux_src12_data),                       //          .data
		.src12_channel       (cmd_demux_src12_channel),                    //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),              //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                      //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                      //          .valid
		.src13_data          (cmd_demux_src13_data),                       //          .data
		.src13_channel       (cmd_demux_src13_channel),                    //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),              //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                //          .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                      //     src14.ready
		.src14_valid         (cmd_demux_src14_valid),                      //          .valid
		.src14_data          (cmd_demux_src14_data),                       //          .data
		.src14_channel       (cmd_demux_src14_channel),                    //          .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),              //          .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                //          .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                      //     src15.ready
		.src15_valid         (cmd_demux_src15_valid),                      //          .valid
		.src15_data          (cmd_demux_src15_data),                       //          .data
		.src15_channel       (cmd_demux_src15_channel),                    //          .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),              //          .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                //          .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                      //     src16.ready
		.src16_valid         (cmd_demux_src16_valid),                      //          .valid
		.src16_data          (cmd_demux_src16_data),                       //          .data
		.src16_channel       (cmd_demux_src16_channel),                    //          .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),              //          .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                //          .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                      //     src17.ready
		.src17_valid         (cmd_demux_src17_valid),                      //          .valid
		.src17_data          (cmd_demux_src17_data),                       //          .data
		.src17_channel       (cmd_demux_src17_channel),                    //          .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),              //          .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                //          .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                      //     src18.ready
		.src18_valid         (cmd_demux_src18_valid),                      //          .valid
		.src18_data          (cmd_demux_src18_data),                       //          .data
		.src18_channel       (cmd_demux_src18_channel),                    //          .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),              //          .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                //          .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                      //     src19.ready
		.src19_valid         (cmd_demux_src19_valid),                      //          .valid
		.src19_data          (cmd_demux_src19_data),                       //          .data
		.src19_channel       (cmd_demux_src19_channel),                    //          .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),              //          .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),                //          .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                      //     src20.ready
		.src20_valid         (cmd_demux_src20_valid),                      //          .valid
		.src20_data          (cmd_demux_src20_data),                       //          .data
		.src20_channel       (cmd_demux_src20_channel),                    //          .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),              //          .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket),                //          .endofpacket
		.src21_ready         (cmd_demux_src21_ready),                      //     src21.ready
		.src21_valid         (cmd_demux_src21_valid),                      //          .valid
		.src21_data          (cmd_demux_src21_data),                       //          .data
		.src21_channel       (cmd_demux_src21_channel),                    //          .channel
		.src21_startofpacket (cmd_demux_src21_startofpacket),              //          .startofpacket
		.src21_endofpacket   (cmd_demux_src21_endofpacket),                //          .endofpacket
		.src22_ready         (cmd_demux_src22_ready),                      //     src22.ready
		.src22_valid         (cmd_demux_src22_valid),                      //          .valid
		.src22_data          (cmd_demux_src22_data),                       //          .data
		.src22_channel       (cmd_demux_src22_channel),                    //          .channel
		.src22_startofpacket (cmd_demux_src22_startofpacket),              //          .startofpacket
		.src22_endofpacket   (cmd_demux_src22_endofpacket),                //          .endofpacket
		.src23_ready         (cmd_demux_src23_ready),                      //     src23.ready
		.src23_valid         (cmd_demux_src23_valid),                      //          .valid
		.src23_data          (cmd_demux_src23_data),                       //          .data
		.src23_channel       (cmd_demux_src23_channel),                    //          .channel
		.src23_startofpacket (cmd_demux_src23_startofpacket),              //          .startofpacket
		.src23_endofpacket   (cmd_demux_src23_endofpacket),                //          .endofpacket
		.src24_ready         (cmd_demux_src24_ready),                      //     src24.ready
		.src24_valid         (cmd_demux_src24_valid),                      //          .valid
		.src24_data          (cmd_demux_src24_data),                       //          .data
		.src24_channel       (cmd_demux_src24_channel),                    //          .channel
		.src24_startofpacket (cmd_demux_src24_startofpacket),              //          .startofpacket
		.src24_endofpacket   (cmd_demux_src24_endofpacket),                //          .endofpacket
		.src25_ready         (cmd_demux_src25_ready),                      //     src25.ready
		.src25_valid         (cmd_demux_src25_valid),                      //          .valid
		.src25_data          (cmd_demux_src25_data),                       //          .data
		.src25_channel       (cmd_demux_src25_channel),                    //          .channel
		.src25_startofpacket (cmd_demux_src25_startofpacket),              //          .startofpacket
		.src25_endofpacket   (cmd_demux_src25_endofpacket),                //          .endofpacket
		.src26_ready         (cmd_demux_src26_ready),                      //     src26.ready
		.src26_valid         (cmd_demux_src26_valid),                      //          .valid
		.src26_data          (cmd_demux_src26_data),                       //          .data
		.src26_channel       (cmd_demux_src26_channel),                    //          .channel
		.src26_startofpacket (cmd_demux_src26_startofpacket),              //          .startofpacket
		.src26_endofpacket   (cmd_demux_src26_endofpacket),                //          .endofpacket
		.src27_ready         (cmd_demux_src27_ready),                      //     src27.ready
		.src27_valid         (cmd_demux_src27_valid),                      //          .valid
		.src27_data          (cmd_demux_src27_data),                       //          .data
		.src27_channel       (cmd_demux_src27_channel),                    //          .channel
		.src27_startofpacket (cmd_demux_src27_startofpacket),              //          .startofpacket
		.src27_endofpacket   (cmd_demux_src27_endofpacket),                //          .endofpacket
		.src28_ready         (cmd_demux_src28_ready),                      //     src28.ready
		.src28_valid         (cmd_demux_src28_valid),                      //          .valid
		.src28_data          (cmd_demux_src28_data),                       //          .data
		.src28_channel       (cmd_demux_src28_channel),                    //          .channel
		.src28_startofpacket (cmd_demux_src28_startofpacket),              //          .startofpacket
		.src28_endofpacket   (cmd_demux_src28_endofpacket),                //          .endofpacket
		.src29_ready         (cmd_demux_src29_ready),                      //     src29.ready
		.src29_valid         (cmd_demux_src29_valid),                      //          .valid
		.src29_data          (cmd_demux_src29_data),                       //          .data
		.src29_channel       (cmd_demux_src29_channel),                    //          .channel
		.src29_startofpacket (cmd_demux_src29_startofpacket),              //          .startofpacket
		.src29_endofpacket   (cmd_demux_src29_endofpacket),                //          .endofpacket
		.src30_ready         (cmd_demux_src30_ready),                      //     src30.ready
		.src30_valid         (cmd_demux_src30_valid),                      //          .valid
		.src30_data          (cmd_demux_src30_data),                       //          .data
		.src30_channel       (cmd_demux_src30_channel),                    //          .channel
		.src30_startofpacket (cmd_demux_src30_startofpacket),              //          .startofpacket
		.src30_endofpacket   (cmd_demux_src30_endofpacket),                //          .endofpacket
		.src31_ready         (cmd_demux_src31_ready),                      //     src31.ready
		.src31_valid         (cmd_demux_src31_valid),                      //          .valid
		.src31_data          (cmd_demux_src31_data),                       //          .data
		.src31_channel       (cmd_demux_src31_channel),                    //          .channel
		.src31_startofpacket (cmd_demux_src31_startofpacket),              //          .startofpacket
		.src31_endofpacket   (cmd_demux_src31_endofpacket),                //          .endofpacket
		.src32_ready         (cmd_demux_src32_ready),                      //     src32.ready
		.src32_valid         (cmd_demux_src32_valid),                      //          .valid
		.src32_data          (cmd_demux_src32_data),                       //          .data
		.src32_channel       (cmd_demux_src32_channel),                    //          .channel
		.src32_startofpacket (cmd_demux_src32_startofpacket),              //          .startofpacket
		.src32_endofpacket   (cmd_demux_src32_endofpacket),                //          .endofpacket
		.src33_ready         (cmd_demux_src33_ready),                      //     src33.ready
		.src33_valid         (cmd_demux_src33_valid),                      //          .valid
		.src33_data          (cmd_demux_src33_data),                       //          .data
		.src33_channel       (cmd_demux_src33_channel),                    //          .channel
		.src33_startofpacket (cmd_demux_src33_startofpacket),              //          .startofpacket
		.src33_endofpacket   (cmd_demux_src33_endofpacket),                //          .endofpacket
		.src34_ready         (cmd_demux_src34_ready),                      //     src34.ready
		.src34_valid         (cmd_demux_src34_valid),                      //          .valid
		.src34_data          (cmd_demux_src34_data),                       //          .data
		.src34_channel       (cmd_demux_src34_channel),                    //          .channel
		.src34_startofpacket (cmd_demux_src34_startofpacket),              //          .startofpacket
		.src34_endofpacket   (cmd_demux_src34_endofpacket),                //          .endofpacket
		.src35_ready         (cmd_demux_src35_ready),                      //     src35.ready
		.src35_valid         (cmd_demux_src35_valid),                      //          .valid
		.src35_data          (cmd_demux_src35_data),                       //          .data
		.src35_channel       (cmd_demux_src35_channel),                    //          .channel
		.src35_startofpacket (cmd_demux_src35_startofpacket),              //          .startofpacket
		.src35_endofpacket   (cmd_demux_src35_endofpacket),                //          .endofpacket
		.src36_ready         (cmd_demux_src36_ready),                      //     src36.ready
		.src36_valid         (cmd_demux_src36_valid),                      //          .valid
		.src36_data          (cmd_demux_src36_data),                       //          .data
		.src36_channel       (cmd_demux_src36_channel),                    //          .channel
		.src36_startofpacket (cmd_demux_src36_startofpacket),              //          .startofpacket
		.src36_endofpacket   (cmd_demux_src36_endofpacket),                //          .endofpacket
		.src37_ready         (cmd_demux_src37_ready),                      //     src37.ready
		.src37_valid         (cmd_demux_src37_valid),                      //          .valid
		.src37_data          (cmd_demux_src37_data),                       //          .data
		.src37_channel       (cmd_demux_src37_channel),                    //          .channel
		.src37_startofpacket (cmd_demux_src37_startofpacket),              //          .startofpacket
		.src37_endofpacket   (cmd_demux_src37_endofpacket),                //          .endofpacket
		.src38_ready         (cmd_demux_src38_ready),                      //     src38.ready
		.src38_valid         (cmd_demux_src38_valid),                      //          .valid
		.src38_data          (cmd_demux_src38_data),                       //          .data
		.src38_channel       (cmd_demux_src38_channel),                    //          .channel
		.src38_startofpacket (cmd_demux_src38_startofpacket),              //          .startofpacket
		.src38_endofpacket   (cmd_demux_src38_endofpacket),                //          .endofpacket
		.src39_ready         (cmd_demux_src39_ready),                      //     src39.ready
		.src39_valid         (cmd_demux_src39_valid),                      //          .valid
		.src39_data          (cmd_demux_src39_data),                       //          .data
		.src39_channel       (cmd_demux_src39_channel),                    //          .channel
		.src39_startofpacket (cmd_demux_src39_startofpacket),              //          .startofpacket
		.src39_endofpacket   (cmd_demux_src39_endofpacket),                //          .endofpacket
		.src40_ready         (cmd_demux_src40_ready),                      //     src40.ready
		.src40_valid         (cmd_demux_src40_valid),                      //          .valid
		.src40_data          (cmd_demux_src40_data),                       //          .data
		.src40_channel       (cmd_demux_src40_channel),                    //          .channel
		.src40_startofpacket (cmd_demux_src40_startofpacket),              //          .startofpacket
		.src40_endofpacket   (cmd_demux_src40_endofpacket),                //          .endofpacket
		.src41_ready         (cmd_demux_src41_ready),                      //     src41.ready
		.src41_valid         (cmd_demux_src41_valid),                      //          .valid
		.src41_data          (cmd_demux_src41_data),                       //          .data
		.src41_channel       (cmd_demux_src41_channel),                    //          .channel
		.src41_startofpacket (cmd_demux_src41_startofpacket),              //          .startofpacket
		.src41_endofpacket   (cmd_demux_src41_endofpacket),                //          .endofpacket
		.src42_ready         (cmd_demux_src42_ready),                      //     src42.ready
		.src42_valid         (cmd_demux_src42_valid),                      //          .valid
		.src42_data          (cmd_demux_src42_data),                       //          .data
		.src42_channel       (cmd_demux_src42_channel),                    //          .channel
		.src42_startofpacket (cmd_demux_src42_startofpacket),              //          .startofpacket
		.src42_endofpacket   (cmd_demux_src42_endofpacket),                //          .endofpacket
		.src43_ready         (cmd_demux_src43_ready),                      //     src43.ready
		.src43_valid         (cmd_demux_src43_valid),                      //          .valid
		.src43_data          (cmd_demux_src43_data),                       //          .data
		.src43_channel       (cmd_demux_src43_channel),                    //          .channel
		.src43_startofpacket (cmd_demux_src43_startofpacket),              //          .startofpacket
		.src43_endofpacket   (cmd_demux_src43_endofpacket),                //          .endofpacket
		.src44_ready         (cmd_demux_src44_ready),                      //     src44.ready
		.src44_valid         (cmd_demux_src44_valid),                      //          .valid
		.src44_data          (cmd_demux_src44_data),                       //          .data
		.src44_channel       (cmd_demux_src44_channel),                    //          .channel
		.src44_startofpacket (cmd_demux_src44_startofpacket),              //          .startofpacket
		.src44_endofpacket   (cmd_demux_src44_endofpacket),                //          .endofpacket
		.src45_ready         (cmd_demux_src45_ready),                      //     src45.ready
		.src45_valid         (cmd_demux_src45_valid),                      //          .valid
		.src45_data          (cmd_demux_src45_data),                       //          .data
		.src45_channel       (cmd_demux_src45_channel),                    //          .channel
		.src45_startofpacket (cmd_demux_src45_startofpacket),              //          .startofpacket
		.src45_endofpacket   (cmd_demux_src45_endofpacket),                //          .endofpacket
		.src46_ready         (cmd_demux_src46_ready),                      //     src46.ready
		.src46_valid         (cmd_demux_src46_valid),                      //          .valid
		.src46_data          (cmd_demux_src46_data),                       //          .data
		.src46_channel       (cmd_demux_src46_channel),                    //          .channel
		.src46_startofpacket (cmd_demux_src46_startofpacket),              //          .startofpacket
		.src46_endofpacket   (cmd_demux_src46_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                       //      sink.ready
		.sink_channel       (router_001_src_channel),                     //          .channel
		.sink_data          (router_001_src_data),                        //          .data
		.sink_startofpacket (router_001_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_001_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_001_src0_data),                    //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_demux_001 cmd_demux_002 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                       //      sink.ready
		.sink_channel       (router_002_src_channel),                     //          .channel
		.sink_data          (router_002_src_data),                        //          .data
		.sink_startofpacket (router_002_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_002_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_002_src0_data),                    //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                       //      sink.ready
		.sink_channel       (router_003_src_channel),                     //          .channel
		.sink_data          (router_003_src_data),                        //          .data
		.sink_startofpacket (router_003_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_003_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_003_src0_data),                    //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),             //          .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                   //      src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                   //          .valid
		.src1_data          (cmd_demux_003_src1_data),                    //          .data
		.src1_channel       (cmd_demux_003_src1_channel),                 //          .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_src_valid),                          //          .valid
		.src_data            (cmd_mux_src_data),                           //          .data
		.src_channel         (cmd_mux_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                     //          .channel
		.sink0_data          (cmd_demux_src0_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                      //          .valid
		.src_data            (cmd_mux_001_src_data),                       //          .data
		.src_channel         (cmd_mux_001_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                     //          .channel
		.sink0_data          (cmd_demux_src1_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                      //          .valid
		.src_data            (cmd_mux_002_src_data),                       //          .data
		.src_channel         (cmd_mux_002_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                     //          .channel
		.sink0_data          (cmd_demux_src2_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                      //          .valid
		.src_data            (cmd_mux_003_src_data),                       //          .data
		.src_channel         (cmd_mux_003_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                     //          .channel
		.sink0_data          (cmd_demux_src3_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                      //          .valid
		.src_data            (cmd_mux_004_src_data),                       //          .data
		.src_channel         (cmd_mux_004_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                     //          .channel
		.sink0_data          (cmd_demux_src4_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                      //          .valid
		.src_data            (cmd_mux_005_src_data),                       //          .data
		.src_channel         (cmd_mux_005_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                     //          .channel
		.sink0_data          (cmd_demux_src5_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                      //          .valid
		.src_data            (cmd_mux_006_src_data),                       //          .data
		.src_channel         (cmd_mux_006_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                     //          .channel
		.sink0_data          (cmd_demux_src6_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                      //          .valid
		.src_data            (cmd_mux_007_src_data),                       //          .data
		.src_channel         (cmd_mux_007_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                     //          .channel
		.sink0_data          (cmd_demux_src7_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                      //          .valid
		.src_data            (cmd_mux_008_src_data),                       //          .data
		.src_channel         (cmd_mux_008_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                     //          .channel
		.sink0_data          (cmd_demux_src8_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                      //          .valid
		.src_data            (cmd_mux_009_src_data),                       //          .data
		.src_channel         (cmd_mux_009_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                     //          .channel
		.sink0_data          (cmd_demux_src9_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                      //          .valid
		.src_data            (cmd_mux_010_src_data),                       //          .data
		.src_channel         (cmd_mux_010_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                    //          .channel
		.sink0_data          (cmd_demux_src10_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                      //          .valid
		.src_data            (cmd_mux_011_src_data),                       //          .data
		.src_channel         (cmd_mux_011_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                    //          .channel
		.sink0_data          (cmd_demux_src11_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                      //          .valid
		.src_data            (cmd_mux_012_src_data),                       //          .data
		.src_channel         (cmd_mux_012_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                    //          .channel
		.sink0_data          (cmd_demux_src12_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                      //          .valid
		.src_data            (cmd_mux_013_src_data),                       //          .data
		.src_channel         (cmd_mux_013_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                    //          .channel
		.sink0_data          (cmd_demux_src13_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                      //          .valid
		.src_data            (cmd_mux_014_src_data),                       //          .data
		.src_channel         (cmd_mux_014_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                    //          .channel
		.sink0_data          (cmd_demux_src14_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                      //          .valid
		.src_data            (cmd_mux_015_src_data),                       //          .data
		.src_channel         (cmd_mux_015_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                    //          .channel
		.sink0_data          (cmd_demux_src15_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                      //          .valid
		.src_data            (cmd_mux_016_src_data),                       //          .data
		.src_channel         (cmd_mux_016_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                    //          .channel
		.sink0_data          (cmd_demux_src16_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_017 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                      //          .valid
		.src_data            (cmd_mux_017_src_data),                       //          .data
		.src_channel         (cmd_mux_017_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src17_channel),                    //          .channel
		.sink0_data          (cmd_demux_src17_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_018 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                      //          .valid
		.src_data            (cmd_mux_018_src_data),                       //          .data
		.src_channel         (cmd_mux_018_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src18_channel),                    //          .channel
		.sink0_data          (cmd_demux_src18_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_019 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                      //          .valid
		.src_data            (cmd_mux_019_src_data),                       //          .data
		.src_channel         (cmd_mux_019_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src19_channel),                    //          .channel
		.sink0_data          (cmd_demux_src19_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_020 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                      //          .valid
		.src_data            (cmd_mux_020_src_data),                       //          .data
		.src_channel         (cmd_mux_020_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src20_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src20_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src20_channel),                    //          .channel
		.sink0_data          (cmd_demux_src20_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src20_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src20_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_021 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                      //          .valid
		.src_data            (cmd_mux_021_src_data),                       //          .data
		.src_channel         (cmd_mux_021_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src21_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src21_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src21_channel),                    //          .channel
		.sink0_data          (cmd_demux_src21_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src21_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src21_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_022 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                      //          .valid
		.src_data            (cmd_mux_022_src_data),                       //          .data
		.src_channel         (cmd_mux_022_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src22_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src22_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src22_channel),                    //          .channel
		.sink0_data          (cmd_demux_src22_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src22_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src22_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_023 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                      //          .valid
		.src_data            (cmd_mux_023_src_data),                       //          .data
		.src_channel         (cmd_mux_023_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src23_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src23_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src23_channel),                    //          .channel
		.sink0_data          (cmd_demux_src23_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src23_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src23_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_024 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                      //          .valid
		.src_data            (cmd_mux_024_src_data),                       //          .data
		.src_channel         (cmd_mux_024_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src24_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src24_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src24_channel),                    //          .channel
		.sink0_data          (cmd_demux_src24_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src24_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src24_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux_025 cmd_mux_025 (
		.clk                 (clk_0_clk_clk),                                                                         //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.src_ready           (cmd_mux_025_src_ready),                                                                 //       src.ready
		.src_valid           (cmd_mux_025_src_valid),                                                                 //          .valid
		.src_data            (cmd_mux_025_src_data),                                                                  //          .data
		.src_channel         (cmd_mux_025_src_channel),                                                               //          .channel
		.src_startofpacket   (cmd_mux_025_src_startofpacket),                                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_025_src_endofpacket),                                                           //          .endofpacket
		.sink0_ready         (nios_cpu_data_master_to_lookup_ram_ram_dds0_am_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios_cpu_data_master_to_lookup_ram_ram_dds0_am_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios_cpu_data_master_to_lookup_ram_ram_dds0_am_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios_cpu_data_master_to_lookup_ram_ram_dds0_am_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios_cpu_data_master_to_lookup_ram_ram_dds0_am_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios_cpu_data_master_to_lookup_ram_ram_dds0_am_s1_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux_025 cmd_mux_026 (
		.clk                 (clk_0_clk_clk),                                                                         //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.src_ready           (cmd_mux_026_src_ready),                                                                 //       src.ready
		.src_valid           (cmd_mux_026_src_valid),                                                                 //          .valid
		.src_data            (cmd_mux_026_src_data),                                                                  //          .data
		.src_channel         (cmd_mux_026_src_channel),                                                               //          .channel
		.src_startofpacket   (cmd_mux_026_src_startofpacket),                                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_026_src_endofpacket),                                                           //          .endofpacket
		.sink0_ready         (nios_cpu_data_master_to_lookup_ram_ram_dds0_fm_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios_cpu_data_master_to_lookup_ram_ram_dds0_fm_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios_cpu_data_master_to_lookup_ram_ram_dds0_fm_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios_cpu_data_master_to_lookup_ram_ram_dds0_fm_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios_cpu_data_master_to_lookup_ram_ram_dds0_fm_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios_cpu_data_master_to_lookup_ram_ram_dds0_fm_s1_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux_025 cmd_mux_027 (
		.clk                 (clk_0_clk_clk),                                                                      //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.src_ready           (cmd_mux_027_src_ready),                                                              //       src.ready
		.src_valid           (cmd_mux_027_src_valid),                                                              //          .valid
		.src_data            (cmd_mux_027_src_data),                                                               //          .data
		.src_channel         (cmd_mux_027_src_channel),                                                            //          .channel
		.src_startofpacket   (cmd_mux_027_src_startofpacket),                                                      //          .startofpacket
		.src_endofpacket     (cmd_mux_027_src_endofpacket),                                                        //          .endofpacket
		.sink0_ready         (nios_cpu_data_master_to_lookup_ram_ram_dds0_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios_cpu_data_master_to_lookup_ram_ram_dds0_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios_cpu_data_master_to_lookup_ram_ram_dds0_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios_cpu_data_master_to_lookup_ram_ram_dds0_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios_cpu_data_master_to_lookup_ram_ram_dds0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios_cpu_data_master_to_lookup_ram_ram_dds0_s1_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux_025 cmd_mux_028 (
		.clk                 (clk_0_clk_clk),                                                                         //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.src_ready           (cmd_mux_028_src_ready),                                                                 //       src.ready
		.src_valid           (cmd_mux_028_src_valid),                                                                 //          .valid
		.src_data            (cmd_mux_028_src_data),                                                                  //          .data
		.src_channel         (cmd_mux_028_src_channel),                                                               //          .channel
		.src_startofpacket   (cmd_mux_028_src_startofpacket),                                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_028_src_endofpacket),                                                           //          .endofpacket
		.sink0_ready         (nios_cpu_data_master_to_lookup_ram_ram_dds1_am_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios_cpu_data_master_to_lookup_ram_ram_dds1_am_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios_cpu_data_master_to_lookup_ram_ram_dds1_am_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios_cpu_data_master_to_lookup_ram_ram_dds1_am_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios_cpu_data_master_to_lookup_ram_ram_dds1_am_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios_cpu_data_master_to_lookup_ram_ram_dds1_am_s1_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux_025 cmd_mux_029 (
		.clk                 (clk_0_clk_clk),                                                                         //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.src_ready           (cmd_mux_029_src_ready),                                                                 //       src.ready
		.src_valid           (cmd_mux_029_src_valid),                                                                 //          .valid
		.src_data            (cmd_mux_029_src_data),                                                                  //          .data
		.src_channel         (cmd_mux_029_src_channel),                                                               //          .channel
		.src_startofpacket   (cmd_mux_029_src_startofpacket),                                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_029_src_endofpacket),                                                           //          .endofpacket
		.sink0_ready         (nios_cpu_data_master_to_lookup_ram_ram_dds1_fm_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios_cpu_data_master_to_lookup_ram_ram_dds1_fm_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios_cpu_data_master_to_lookup_ram_ram_dds1_fm_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios_cpu_data_master_to_lookup_ram_ram_dds1_fm_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios_cpu_data_master_to_lookup_ram_ram_dds1_fm_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios_cpu_data_master_to_lookup_ram_ram_dds1_fm_s1_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux_025 cmd_mux_030 (
		.clk                 (clk_0_clk_clk),                                                                      //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.src_ready           (cmd_mux_030_src_ready),                                                              //       src.ready
		.src_valid           (cmd_mux_030_src_valid),                                                              //          .valid
		.src_data            (cmd_mux_030_src_data),                                                               //          .data
		.src_channel         (cmd_mux_030_src_channel),                                                            //          .channel
		.src_startofpacket   (cmd_mux_030_src_startofpacket),                                                      //          .startofpacket
		.src_endofpacket     (cmd_mux_030_src_endofpacket),                                                        //          .endofpacket
		.sink0_ready         (nios_cpu_data_master_to_lookup_ram_ram_dds1_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios_cpu_data_master_to_lookup_ram_ram_dds1_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios_cpu_data_master_to_lookup_ram_ram_dds1_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios_cpu_data_master_to_lookup_ram_ram_dds1_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios_cpu_data_master_to_lookup_ram_ram_dds1_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios_cpu_data_master_to_lookup_ram_ram_dds1_s1_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_031 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_031_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_031_src_valid),                      //          .valid
		.src_data            (cmd_mux_031_src_data),                       //          .data
		.src_channel         (cmd_mux_031_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_031_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_031_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src31_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src31_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src31_channel),                    //          .channel
		.sink0_data          (cmd_demux_src31_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src31_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src31_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_032 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_032_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_032_src_valid),                      //          .valid
		.src_data            (cmd_mux_032_src_data),                       //          .data
		.src_channel         (cmd_mux_032_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_032_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_032_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src32_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src32_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src32_channel),                    //          .channel
		.sink0_data          (cmd_demux_src32_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src32_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src32_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_033 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_033_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_033_src_valid),                      //          .valid
		.src_data            (cmd_mux_033_src_data),                       //          .data
		.src_channel         (cmd_mux_033_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_033_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_033_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src33_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src33_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src33_channel),                    //          .channel
		.sink0_data          (cmd_demux_src33_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src33_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src33_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_034 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_034_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_034_src_valid),                      //          .valid
		.src_data            (cmd_mux_034_src_data),                       //          .data
		.src_channel         (cmd_mux_034_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_034_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_034_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src34_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src34_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src34_channel),                    //          .channel
		.sink0_data          (cmd_demux_src34_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src34_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src34_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux_035 cmd_mux_035 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_035_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_035_src_valid),                      //          .valid
		.src_data            (cmd_mux_035_src_data),                       //          .data
		.src_channel         (cmd_mux_035_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_035_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_035_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src35_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src35_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src35_channel),                    //          .channel
		.sink0_data          (cmd_demux_src35_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src35_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src35_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_demux_003_src0_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_003_src0_valid),                   //          .valid
		.sink1_channel       (cmd_demux_003_src0_channel),                 //          .channel
		.sink1_data          (cmd_demux_003_src0_data),                    //          .data
		.sink1_startofpacket (cmd_demux_003_src0_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux_035 cmd_mux_036 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_036_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_036_src_valid),                      //          .valid
		.src_data            (cmd_mux_036_src_data),                       //          .data
		.src_channel         (cmd_mux_036_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_036_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_036_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src36_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src36_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src36_channel),                    //          .channel
		.sink0_data          (cmd_demux_src36_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src36_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src36_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_demux_003_src1_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_003_src1_valid),                   //          .valid
		.sink1_channel       (cmd_demux_003_src1_channel),                 //          .channel
		.sink1_data          (cmd_demux_003_src1_data),                    //          .data
		.sink1_startofpacket (cmd_demux_003_src1_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src1_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux_037 cmd_mux_037 (
		.clk                 (clk_0_clk_clk),                                                          //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready           (cmd_mux_037_src_ready),                                                  //       src.ready
		.src_valid           (cmd_mux_037_src_valid),                                                  //          .valid
		.src_data            (cmd_mux_037_src_data),                                                   //          .data
		.src_channel         (cmd_mux_037_src_channel),                                                //          .channel
		.src_startofpacket   (cmd_mux_037_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket     (cmd_mux_037_src_endofpacket),                                            //          .endofpacket
		.sink0_ready         (cmd_demux_src37_ready),                                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src37_valid),                                                  //          .valid
		.sink0_channel       (cmd_demux_src37_channel),                                                //          .channel
		.sink0_data          (cmd_demux_src37_data),                                                   //          .data
		.sink0_startofpacket (cmd_demux_src37_startofpacket),                                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src37_endofpacket),                                            //          .endofpacket
		.sink1_ready         (lcd_dma_read_master_to_ram_24k_s1_cmd_width_adapter_src_ready),          //     sink1.ready
		.sink1_valid         (lcd_dma_read_master_to_ram_24k_s1_cmd_width_adapter_src_valid),          //          .valid
		.sink1_channel       (lcd_dma_read_master_to_ram_24k_s1_cmd_width_adapter_src_channel),        //          .channel
		.sink1_data          (lcd_dma_read_master_to_ram_24k_s1_cmd_width_adapter_src_data),           //          .data
		.sink1_startofpacket (lcd_dma_read_master_to_ram_24k_s1_cmd_width_adapter_src_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (lcd_dma_read_master_to_ram_24k_s1_cmd_width_adapter_src_endofpacket),    //          .endofpacket
		.sink2_ready         (spi_dma_write_master_to_ram_24k_s1_cmd_width_adapter_src_ready),         //     sink2.ready
		.sink2_valid         (spi_dma_write_master_to_ram_24k_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink2_channel       (spi_dma_write_master_to_ram_24k_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink2_data          (spi_dma_write_master_to_ram_24k_s1_cmd_width_adapter_src_data),          //          .data
		.sink2_startofpacket (spi_dma_write_master_to_ram_24k_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink2_endofpacket   (spi_dma_write_master_to_ram_24k_s1_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_038 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_038_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_038_src_valid),                      //          .valid
		.src_data            (cmd_mux_038_src_data),                       //          .data
		.src_channel         (cmd_mux_038_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_038_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_038_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src38_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src38_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src38_channel),                    //          .channel
		.sink0_data          (cmd_demux_src38_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src38_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src38_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_039 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_039_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_039_src_valid),                      //          .valid
		.src_data            (cmd_mux_039_src_data),                       //          .data
		.src_channel         (cmd_mux_039_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_039_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_039_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src39_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src39_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src39_channel),                    //          .channel
		.sink0_data          (cmd_demux_src39_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src39_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src39_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_040 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_040_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_040_src_valid),                      //          .valid
		.src_data            (cmd_mux_040_src_data),                       //          .data
		.src_channel         (cmd_mux_040_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_040_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_040_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src40_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src40_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src40_channel),                    //          .channel
		.sink0_data          (cmd_demux_src40_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src40_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src40_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_041 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_041_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_041_src_valid),                      //          .valid
		.src_data            (cmd_mux_041_src_data),                       //          .data
		.src_channel         (cmd_mux_041_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_041_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_041_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src41_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src41_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src41_channel),                    //          .channel
		.sink0_data          (cmd_demux_src41_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src41_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src41_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_042 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_042_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_042_src_valid),                      //          .valid
		.src_data            (cmd_mux_042_src_data),                       //          .data
		.src_channel         (cmd_mux_042_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_042_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_042_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src42_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src42_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src42_channel),                    //          .channel
		.sink0_data          (cmd_demux_src42_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src42_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src42_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_043 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_043_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_043_src_valid),                      //          .valid
		.src_data            (cmd_mux_043_src_data),                       //          .data
		.src_channel         (cmd_mux_043_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_043_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_043_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src43_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src43_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src43_channel),                    //          .channel
		.sink0_data          (cmd_demux_src43_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src43_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src43_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_044 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_044_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_044_src_valid),                      //          .valid
		.src_data            (cmd_mux_044_src_data),                       //          .data
		.src_channel         (cmd_mux_044_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_044_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_044_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src44_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src44_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src44_channel),                    //          .channel
		.sink0_data          (cmd_demux_src44_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src44_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src44_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_045 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_045_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_045_src_valid),                      //          .valid
		.src_data            (cmd_mux_045_src_data),                       //          .data
		.src_channel         (cmd_mux_045_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_045_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_045_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src45_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src45_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src45_channel),                    //          .channel
		.sink0_data          (cmd_demux_src45_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src45_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src45_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_mux cmd_mux_046 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_046_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_046_src_valid),                      //          .valid
		.src_data            (cmd_mux_046_src_data),                       //          .data
		.src_channel         (cmd_mux_046_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_046_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_046_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src46_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src46_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src46_channel),                    //          .channel
		.sink0_data          (cmd_demux_src46_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src46_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src46_endofpacket)                 //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                       //      sink.ready
		.sink_channel       (router_004_src_channel),                     //          .channel
		.sink_data          (router_004_src_data),                        //          .data
		.sink_startofpacket (router_004_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_004_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_src0_data),                        //          .data
		.src0_channel       (rsp_demux_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                  //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                       //      sink.ready
		.sink_channel       (router_005_src_channel),                     //          .channel
		.sink_data          (router_005_src_data),                        //          .data
		.sink_startofpacket (router_005_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_005_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_001_src0_data),                    //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                       //      sink.ready
		.sink_channel       (router_006_src_channel),                     //          .channel
		.sink_data          (router_006_src_data),                        //          .data
		.sink_startofpacket (router_006_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_006_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_002_src0_data),                    //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                       //      sink.ready
		.sink_channel       (router_007_src_channel),                     //          .channel
		.sink_data          (router_007_src_data),                        //          .data
		.sink_startofpacket (router_007_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_007_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_003_src0_data),                    //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                       //      sink.ready
		.sink_channel       (router_008_src_channel),                     //          .channel
		.sink_data          (router_008_src_data),                        //          .data
		.sink_startofpacket (router_008_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_008_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_004_src0_data),                    //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                       //      sink.ready
		.sink_channel       (router_009_src_channel),                     //          .channel
		.sink_data          (router_009_src_data),                        //          .data
		.sink_startofpacket (router_009_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_009_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_005_src0_data),                    //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                       //      sink.ready
		.sink_channel       (router_010_src_channel),                     //          .channel
		.sink_data          (router_010_src_data),                        //          .data
		.sink_startofpacket (router_010_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_010_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_006_src0_data),                    //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                       //      sink.ready
		.sink_channel       (router_011_src_channel),                     //          .channel
		.sink_data          (router_011_src_data),                        //          .data
		.sink_startofpacket (router_011_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_011_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_007_src0_data),                    //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                       //      sink.ready
		.sink_channel       (router_012_src_channel),                     //          .channel
		.sink_data          (router_012_src_data),                        //          .data
		.sink_startofpacket (router_012_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_012_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_008_src0_data),                    //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                       //      sink.ready
		.sink_channel       (router_013_src_channel),                     //          .channel
		.sink_data          (router_013_src_data),                        //          .data
		.sink_startofpacket (router_013_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_013_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_009_src0_data),                    //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                       //      sink.ready
		.sink_channel       (router_014_src_channel),                     //          .channel
		.sink_data          (router_014_src_data),                        //          .data
		.sink_startofpacket (router_014_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_014_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_010_src0_data),                    //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                       //      sink.ready
		.sink_channel       (router_015_src_channel),                     //          .channel
		.sink_data          (router_015_src_data),                        //          .data
		.sink_startofpacket (router_015_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_015_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_011_src0_data),                    //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                       //      sink.ready
		.sink_channel       (router_016_src_channel),                     //          .channel
		.sink_data          (router_016_src_data),                        //          .data
		.sink_startofpacket (router_016_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_016_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_012_src0_data),                    //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                       //      sink.ready
		.sink_channel       (router_017_src_channel),                     //          .channel
		.sink_data          (router_017_src_data),                        //          .data
		.sink_startofpacket (router_017_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_017_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_013_src0_data),                    //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                       //      sink.ready
		.sink_channel       (router_018_src_channel),                     //          .channel
		.sink_data          (router_018_src_data),                        //          .data
		.sink_startofpacket (router_018_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_018_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_014_src0_data),                    //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                       //      sink.ready
		.sink_channel       (router_019_src_channel),                     //          .channel
		.sink_data          (router_019_src_data),                        //          .data
		.sink_startofpacket (router_019_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_019_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_015_src0_data),                    //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_016 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                       //      sink.ready
		.sink_channel       (router_020_src_channel),                     //          .channel
		.sink_data          (router_020_src_data),                        //          .data
		.sink_startofpacket (router_020_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_020_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_016_src0_data),                    //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_017 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                       //      sink.ready
		.sink_channel       (router_021_src_channel),                     //          .channel
		.sink_data          (router_021_src_data),                        //          .data
		.sink_startofpacket (router_021_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_021_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_017_src0_data),                    //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_018 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                       //      sink.ready
		.sink_channel       (router_022_src_channel),                     //          .channel
		.sink_data          (router_022_src_data),                        //          .data
		.sink_startofpacket (router_022_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_022_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_018_src0_data),                    //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_019 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                       //      sink.ready
		.sink_channel       (router_023_src_channel),                     //          .channel
		.sink_data          (router_023_src_data),                        //          .data
		.sink_startofpacket (router_023_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_023_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_019_src0_data),                    //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_020 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                       //      sink.ready
		.sink_channel       (router_024_src_channel),                     //          .channel
		.sink_data          (router_024_src_data),                        //          .data
		.sink_startofpacket (router_024_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_024_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_020_src0_data),                    //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_021 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                       //      sink.ready
		.sink_channel       (router_025_src_channel),                     //          .channel
		.sink_data          (router_025_src_data),                        //          .data
		.sink_startofpacket (router_025_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_025_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_021_src0_data),                    //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_022 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                       //      sink.ready
		.sink_channel       (router_026_src_channel),                     //          .channel
		.sink_data          (router_026_src_data),                        //          .data
		.sink_startofpacket (router_026_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_026_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_022_src0_data),                    //          .data
		.src0_channel       (rsp_demux_022_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_023 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                       //      sink.ready
		.sink_channel       (router_027_src_channel),                     //          .channel
		.sink_data          (router_027_src_data),                        //          .data
		.sink_startofpacket (router_027_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_027_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_023_src0_data),                    //          .data
		.src0_channel       (rsp_demux_023_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_024 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_028_src_ready),                       //      sink.ready
		.sink_channel       (router_028_src_channel),                     //          .channel
		.sink_data          (router_028_src_data),                        //          .data
		.sink_startofpacket (router_028_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_028_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_024_src0_data),                    //          .data
		.src0_channel       (rsp_demux_024_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux_025 rsp_demux_025 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_029_src_ready),                       //      sink.ready
		.sink_channel       (router_029_src_channel),                     //          .channel
		.sink_data          (router_029_src_data),                        //          .data
		.sink_startofpacket (router_029_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_029_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_029_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_025_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_025_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_025_src0_data),                    //          .data
		.src0_channel       (rsp_demux_025_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_025_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_025_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux_025 rsp_demux_026 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_030_src_ready),                       //      sink.ready
		.sink_channel       (router_030_src_channel),                     //          .channel
		.sink_data          (router_030_src_data),                        //          .data
		.sink_startofpacket (router_030_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_030_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_030_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_026_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_026_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_026_src0_data),                    //          .data
		.src0_channel       (rsp_demux_026_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_026_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_026_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux_025 rsp_demux_027 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_031_src_ready),                       //      sink.ready
		.sink_channel       (router_031_src_channel),                     //          .channel
		.sink_data          (router_031_src_data),                        //          .data
		.sink_startofpacket (router_031_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_031_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_031_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_027_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_027_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_027_src0_data),                    //          .data
		.src0_channel       (rsp_demux_027_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_027_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_027_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux_025 rsp_demux_028 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_032_src_ready),                       //      sink.ready
		.sink_channel       (router_032_src_channel),                     //          .channel
		.sink_data          (router_032_src_data),                        //          .data
		.sink_startofpacket (router_032_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_032_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_032_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_028_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_028_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_028_src0_data),                    //          .data
		.src0_channel       (rsp_demux_028_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_028_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_028_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux_025 rsp_demux_029 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_033_src_ready),                       //      sink.ready
		.sink_channel       (router_033_src_channel),                     //          .channel
		.sink_data          (router_033_src_data),                        //          .data
		.sink_startofpacket (router_033_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_033_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_033_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_029_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_029_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_029_src0_data),                    //          .data
		.src0_channel       (rsp_demux_029_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_029_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_029_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux_025 rsp_demux_030 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_034_src_ready),                       //      sink.ready
		.sink_channel       (router_034_src_channel),                     //          .channel
		.sink_data          (router_034_src_data),                        //          .data
		.sink_startofpacket (router_034_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_034_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_034_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_030_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_030_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_030_src0_data),                    //          .data
		.src0_channel       (rsp_demux_030_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_030_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_030_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_031 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_035_src_ready),                       //      sink.ready
		.sink_channel       (router_035_src_channel),                     //          .channel
		.sink_data          (router_035_src_data),                        //          .data
		.sink_startofpacket (router_035_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_035_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_035_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_031_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_031_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_031_src0_data),                    //          .data
		.src0_channel       (rsp_demux_031_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_031_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_031_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_032 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_036_src_ready),                       //      sink.ready
		.sink_channel       (router_036_src_channel),                     //          .channel
		.sink_data          (router_036_src_data),                        //          .data
		.sink_startofpacket (router_036_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_036_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_036_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_032_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_032_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_032_src0_data),                    //          .data
		.src0_channel       (rsp_demux_032_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_032_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_032_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_033 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_037_src_ready),                       //      sink.ready
		.sink_channel       (router_037_src_channel),                     //          .channel
		.sink_data          (router_037_src_data),                        //          .data
		.sink_startofpacket (router_037_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_037_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_037_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_033_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_033_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_033_src0_data),                    //          .data
		.src0_channel       (rsp_demux_033_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_033_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_033_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_034 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_038_src_ready),                       //      sink.ready
		.sink_channel       (router_038_src_channel),                     //          .channel
		.sink_data          (router_038_src_data),                        //          .data
		.sink_startofpacket (router_038_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_038_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_038_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_034_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_034_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_034_src0_data),                    //          .data
		.src0_channel       (rsp_demux_034_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_034_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_034_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_demux_003 rsp_demux_035 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_039_src_ready),                       //      sink.ready
		.sink_channel       (router_039_src_channel),                     //          .channel
		.sink_data          (router_039_src_data),                        //          .data
		.sink_startofpacket (router_039_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_039_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_039_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_035_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_035_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_035_src0_data),                    //          .data
		.src0_channel       (rsp_demux_035_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_035_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_035_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_035_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_035_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_035_src1_data),                    //          .data
		.src1_channel       (rsp_demux_035_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_035_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_035_src1_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_cmd_demux_003 rsp_demux_036 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_040_src_ready),                       //      sink.ready
		.sink_channel       (router_040_src_channel),                     //          .channel
		.sink_data          (router_040_src_data),                        //          .data
		.sink_startofpacket (router_040_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_040_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_040_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_036_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_036_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_036_src0_data),                    //          .data
		.src0_channel       (rsp_demux_036_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_036_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_036_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_036_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_036_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_036_src1_data),                    //          .data
		.src1_channel       (rsp_demux_036_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_036_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_036_src1_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux_037 rsp_demux_037 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_041_src_ready),                       //      sink.ready
		.sink_channel       (router_041_src_channel),                     //          .channel
		.sink_data          (router_041_src_data),                        //          .data
		.sink_startofpacket (router_041_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_041_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_041_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_037_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_037_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_037_src0_data),                    //          .data
		.src0_channel       (rsp_demux_037_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_037_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_037_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_037_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_037_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_037_src1_data),                    //          .data
		.src1_channel       (rsp_demux_037_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_037_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_037_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_037_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_037_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_037_src2_data),                    //          .data
		.src2_channel       (rsp_demux_037_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_037_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_037_src2_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_038 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_042_src_ready),                       //      sink.ready
		.sink_channel       (router_042_src_channel),                     //          .channel
		.sink_data          (router_042_src_data),                        //          .data
		.sink_startofpacket (router_042_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_042_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_042_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_038_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_038_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_038_src0_data),                    //          .data
		.src0_channel       (rsp_demux_038_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_038_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_038_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_039 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_043_src_ready),                       //      sink.ready
		.sink_channel       (router_043_src_channel),                     //          .channel
		.sink_data          (router_043_src_data),                        //          .data
		.sink_startofpacket (router_043_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_043_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_043_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_039_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_039_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_039_src0_data),                    //          .data
		.src0_channel       (rsp_demux_039_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_039_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_039_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_040 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_044_src_ready),                       //      sink.ready
		.sink_channel       (router_044_src_channel),                     //          .channel
		.sink_data          (router_044_src_data),                        //          .data
		.sink_startofpacket (router_044_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_044_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_044_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_040_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_040_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_040_src0_data),                    //          .data
		.src0_channel       (rsp_demux_040_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_040_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_040_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_041 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_045_src_ready),                       //      sink.ready
		.sink_channel       (router_045_src_channel),                     //          .channel
		.sink_data          (router_045_src_data),                        //          .data
		.sink_startofpacket (router_045_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_045_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_045_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_041_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_041_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_041_src0_data),                    //          .data
		.src0_channel       (rsp_demux_041_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_041_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_041_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_042 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_046_src_ready),                       //      sink.ready
		.sink_channel       (router_046_src_channel),                     //          .channel
		.sink_data          (router_046_src_data),                        //          .data
		.sink_startofpacket (router_046_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_046_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_046_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_042_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_042_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_042_src0_data),                    //          .data
		.src0_channel       (rsp_demux_042_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_042_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_042_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_043 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_047_src_ready),                       //      sink.ready
		.sink_channel       (router_047_src_channel),                     //          .channel
		.sink_data          (router_047_src_data),                        //          .data
		.sink_startofpacket (router_047_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_047_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_047_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_043_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_043_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_043_src0_data),                    //          .data
		.src0_channel       (rsp_demux_043_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_043_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_043_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_044 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_048_src_ready),                       //      sink.ready
		.sink_channel       (router_048_src_channel),                     //          .channel
		.sink_data          (router_048_src_data),                        //          .data
		.sink_startofpacket (router_048_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_048_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_048_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_044_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_044_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_044_src0_data),                    //          .data
		.src0_channel       (rsp_demux_044_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_044_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_044_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_045 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_049_src_ready),                       //      sink.ready
		.sink_channel       (router_049_src_channel),                     //          .channel
		.sink_data          (router_049_src_data),                        //          .data
		.sink_startofpacket (router_049_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_049_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_049_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_045_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_045_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_045_src0_data),                    //          .data
		.src0_channel       (rsp_demux_045_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_045_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_045_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_demux rsp_demux_046 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_050_src_ready),                       //      sink.ready
		.sink_channel       (router_050_src_channel),                     //          .channel
		.sink_data          (router_050_src_data),                        //          .data
		.sink_startofpacket (router_050_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_050_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_050_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_046_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_046_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_046_src0_data),                    //          .data
		.src0_channel       (rsp_demux_046_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_046_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_046_src0_endofpacket)              //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                (NIOS_CPU_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                                                     //       src.ready
		.src_valid            (rsp_mux_src_valid),                                                                     //          .valid
		.src_data             (rsp_mux_src_data),                                                                      //          .data
		.src_channel          (rsp_mux_src_channel),                                                                   //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                                                             //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                                               //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                                                  //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                                                  //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                                                //          .channel
		.sink0_data           (rsp_demux_src0_data),                                                                   //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                                                          //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                                                            //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                                              //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                                              //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                                            //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                                               //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                                                      //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                                                        //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                                              //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                                              //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                                            //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                                               //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                                      //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                                        //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                                              //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                                              //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                                            //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                                               //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                                                      //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                                        //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                                              //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                                              //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                                            //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                                               //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                                      //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                                        //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                                              //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                                              //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                                            //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                                               //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                                      //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                                        //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                                              //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                                              //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                                            //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                                               //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                                      //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                                        //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                                              //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                                              //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                                            //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                                               //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                                      //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                                        //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                                              //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                                              //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                                            //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                                               //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                                                      //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                                        //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                                              //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                                              //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                                            //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                                               //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                                                      //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                                        //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                                              //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                                              //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                                            //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                                               //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                                                      //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                                                        //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                                                              //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                                                              //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                                                            //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                                                               //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                                                      //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                                                        //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                                                              //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                                                              //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                                                            //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                                                               //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                                                      //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                                                        //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                                                              //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                                                              //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                                                            //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                                                               //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                                                      //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                                                        //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                                                              //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                                                              //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                                                            //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                                                               //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),                                                      //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                                                        //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                                                              //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                                                              //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                                                            //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                                                               //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),                                                      //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),                                                        //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                                                              //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                                                              //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                                                            //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                                                               //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),                                                      //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),                                                        //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                                                              //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                                                              //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                                                            //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                                                               //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),                                                      //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),                                                        //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                                                              //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                                                              //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                                                            //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                                                               //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),                                                      //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),                                                        //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                                                              //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                                                              //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                                                            //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                                                               //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),                                                      //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),                                                        //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                                                              //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                                                              //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),                                                            //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                                                               //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),                                                      //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket),                                                        //          .endofpacket
		.sink21_ready         (rsp_demux_021_src0_ready),                                                              //    sink21.ready
		.sink21_valid         (rsp_demux_021_src0_valid),                                                              //          .valid
		.sink21_channel       (rsp_demux_021_src0_channel),                                                            //          .channel
		.sink21_data          (rsp_demux_021_src0_data),                                                               //          .data
		.sink21_startofpacket (rsp_demux_021_src0_startofpacket),                                                      //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src0_endofpacket),                                                        //          .endofpacket
		.sink22_ready         (rsp_demux_022_src0_ready),                                                              //    sink22.ready
		.sink22_valid         (rsp_demux_022_src0_valid),                                                              //          .valid
		.sink22_channel       (rsp_demux_022_src0_channel),                                                            //          .channel
		.sink22_data          (rsp_demux_022_src0_data),                                                               //          .data
		.sink22_startofpacket (rsp_demux_022_src0_startofpacket),                                                      //          .startofpacket
		.sink22_endofpacket   (rsp_demux_022_src0_endofpacket),                                                        //          .endofpacket
		.sink23_ready         (rsp_demux_023_src0_ready),                                                              //    sink23.ready
		.sink23_valid         (rsp_demux_023_src0_valid),                                                              //          .valid
		.sink23_channel       (rsp_demux_023_src0_channel),                                                            //          .channel
		.sink23_data          (rsp_demux_023_src0_data),                                                               //          .data
		.sink23_startofpacket (rsp_demux_023_src0_startofpacket),                                                      //          .startofpacket
		.sink23_endofpacket   (rsp_demux_023_src0_endofpacket),                                                        //          .endofpacket
		.sink24_ready         (rsp_demux_024_src0_ready),                                                              //    sink24.ready
		.sink24_valid         (rsp_demux_024_src0_valid),                                                              //          .valid
		.sink24_channel       (rsp_demux_024_src0_channel),                                                            //          .channel
		.sink24_data          (rsp_demux_024_src0_data),                                                               //          .data
		.sink24_startofpacket (rsp_demux_024_src0_startofpacket),                                                      //          .startofpacket
		.sink24_endofpacket   (rsp_demux_024_src0_endofpacket),                                                        //          .endofpacket
		.sink25_ready         (lookup_ram_ram_dds0_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //    sink25.ready
		.sink25_valid         (lookup_ram_ram_dds0_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink25_channel       (lookup_ram_ram_dds0_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink25_data          (lookup_ram_ram_dds0_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.sink25_startofpacket (lookup_ram_ram_dds0_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink25_endofpacket   (lookup_ram_ram_dds0_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink26_ready         (lookup_ram_ram_dds0_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //    sink26.ready
		.sink26_valid         (lookup_ram_ram_dds0_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink26_channel       (lookup_ram_ram_dds0_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink26_data          (lookup_ram_ram_dds0_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.sink26_startofpacket (lookup_ram_ram_dds0_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink26_endofpacket   (lookup_ram_ram_dds0_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink27_ready         (lookup_ram_ram_dds0_s1_to_nios_cpu_data_master_rsp_width_adapter_src_ready),            //    sink27.ready
		.sink27_valid         (lookup_ram_ram_dds0_s1_to_nios_cpu_data_master_rsp_width_adapter_src_valid),            //          .valid
		.sink27_channel       (lookup_ram_ram_dds0_s1_to_nios_cpu_data_master_rsp_width_adapter_src_channel),          //          .channel
		.sink27_data          (lookup_ram_ram_dds0_s1_to_nios_cpu_data_master_rsp_width_adapter_src_data),             //          .data
		.sink27_startofpacket (lookup_ram_ram_dds0_s1_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket),    //          .startofpacket
		.sink27_endofpacket   (lookup_ram_ram_dds0_s1_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),      //          .endofpacket
		.sink28_ready         (lookup_ram_ram_dds1_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //    sink28.ready
		.sink28_valid         (lookup_ram_ram_dds1_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink28_channel       (lookup_ram_ram_dds1_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink28_data          (lookup_ram_ram_dds1_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.sink28_startofpacket (lookup_ram_ram_dds1_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink28_endofpacket   (lookup_ram_ram_dds1_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink29_ready         (lookup_ram_ram_dds1_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //    sink29.ready
		.sink29_valid         (lookup_ram_ram_dds1_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink29_channel       (lookup_ram_ram_dds1_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink29_data          (lookup_ram_ram_dds1_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.sink29_startofpacket (lookup_ram_ram_dds1_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink29_endofpacket   (lookup_ram_ram_dds1_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink30_ready         (lookup_ram_ram_dds1_s1_to_nios_cpu_data_master_rsp_width_adapter_src_ready),            //    sink30.ready
		.sink30_valid         (lookup_ram_ram_dds1_s1_to_nios_cpu_data_master_rsp_width_adapter_src_valid),            //          .valid
		.sink30_channel       (lookup_ram_ram_dds1_s1_to_nios_cpu_data_master_rsp_width_adapter_src_channel),          //          .channel
		.sink30_data          (lookup_ram_ram_dds1_s1_to_nios_cpu_data_master_rsp_width_adapter_src_data),             //          .data
		.sink30_startofpacket (lookup_ram_ram_dds1_s1_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket),    //          .startofpacket
		.sink30_endofpacket   (lookup_ram_ram_dds1_s1_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),      //          .endofpacket
		.sink31_ready         (rsp_demux_031_src0_ready),                                                              //    sink31.ready
		.sink31_valid         (rsp_demux_031_src0_valid),                                                              //          .valid
		.sink31_channel       (rsp_demux_031_src0_channel),                                                            //          .channel
		.sink31_data          (rsp_demux_031_src0_data),                                                               //          .data
		.sink31_startofpacket (rsp_demux_031_src0_startofpacket),                                                      //          .startofpacket
		.sink31_endofpacket   (rsp_demux_031_src0_endofpacket),                                                        //          .endofpacket
		.sink32_ready         (rsp_demux_032_src0_ready),                                                              //    sink32.ready
		.sink32_valid         (rsp_demux_032_src0_valid),                                                              //          .valid
		.sink32_channel       (rsp_demux_032_src0_channel),                                                            //          .channel
		.sink32_data          (rsp_demux_032_src0_data),                                                               //          .data
		.sink32_startofpacket (rsp_demux_032_src0_startofpacket),                                                      //          .startofpacket
		.sink32_endofpacket   (rsp_demux_032_src0_endofpacket),                                                        //          .endofpacket
		.sink33_ready         (rsp_demux_033_src0_ready),                                                              //    sink33.ready
		.sink33_valid         (rsp_demux_033_src0_valid),                                                              //          .valid
		.sink33_channel       (rsp_demux_033_src0_channel),                                                            //          .channel
		.sink33_data          (rsp_demux_033_src0_data),                                                               //          .data
		.sink33_startofpacket (rsp_demux_033_src0_startofpacket),                                                      //          .startofpacket
		.sink33_endofpacket   (rsp_demux_033_src0_endofpacket),                                                        //          .endofpacket
		.sink34_ready         (rsp_demux_034_src0_ready),                                                              //    sink34.ready
		.sink34_valid         (rsp_demux_034_src0_valid),                                                              //          .valid
		.sink34_channel       (rsp_demux_034_src0_channel),                                                            //          .channel
		.sink34_data          (rsp_demux_034_src0_data),                                                               //          .data
		.sink34_startofpacket (rsp_demux_034_src0_startofpacket),                                                      //          .startofpacket
		.sink34_endofpacket   (rsp_demux_034_src0_endofpacket),                                                        //          .endofpacket
		.sink35_ready         (rsp_demux_035_src0_ready),                                                              //    sink35.ready
		.sink35_valid         (rsp_demux_035_src0_valid),                                                              //          .valid
		.sink35_channel       (rsp_demux_035_src0_channel),                                                            //          .channel
		.sink35_data          (rsp_demux_035_src0_data),                                                               //          .data
		.sink35_startofpacket (rsp_demux_035_src0_startofpacket),                                                      //          .startofpacket
		.sink35_endofpacket   (rsp_demux_035_src0_endofpacket),                                                        //          .endofpacket
		.sink36_ready         (rsp_demux_036_src0_ready),                                                              //    sink36.ready
		.sink36_valid         (rsp_demux_036_src0_valid),                                                              //          .valid
		.sink36_channel       (rsp_demux_036_src0_channel),                                                            //          .channel
		.sink36_data          (rsp_demux_036_src0_data),                                                               //          .data
		.sink36_startofpacket (rsp_demux_036_src0_startofpacket),                                                      //          .startofpacket
		.sink36_endofpacket   (rsp_demux_036_src0_endofpacket),                                                        //          .endofpacket
		.sink37_ready         (rsp_demux_037_src0_ready),                                                              //    sink37.ready
		.sink37_valid         (rsp_demux_037_src0_valid),                                                              //          .valid
		.sink37_channel       (rsp_demux_037_src0_channel),                                                            //          .channel
		.sink37_data          (rsp_demux_037_src0_data),                                                               //          .data
		.sink37_startofpacket (rsp_demux_037_src0_startofpacket),                                                      //          .startofpacket
		.sink37_endofpacket   (rsp_demux_037_src0_endofpacket),                                                        //          .endofpacket
		.sink38_ready         (rsp_demux_038_src0_ready),                                                              //    sink38.ready
		.sink38_valid         (rsp_demux_038_src0_valid),                                                              //          .valid
		.sink38_channel       (rsp_demux_038_src0_channel),                                                            //          .channel
		.sink38_data          (rsp_demux_038_src0_data),                                                               //          .data
		.sink38_startofpacket (rsp_demux_038_src0_startofpacket),                                                      //          .startofpacket
		.sink38_endofpacket   (rsp_demux_038_src0_endofpacket),                                                        //          .endofpacket
		.sink39_ready         (rsp_demux_039_src0_ready),                                                              //    sink39.ready
		.sink39_valid         (rsp_demux_039_src0_valid),                                                              //          .valid
		.sink39_channel       (rsp_demux_039_src0_channel),                                                            //          .channel
		.sink39_data          (rsp_demux_039_src0_data),                                                               //          .data
		.sink39_startofpacket (rsp_demux_039_src0_startofpacket),                                                      //          .startofpacket
		.sink39_endofpacket   (rsp_demux_039_src0_endofpacket),                                                        //          .endofpacket
		.sink40_ready         (rsp_demux_040_src0_ready),                                                              //    sink40.ready
		.sink40_valid         (rsp_demux_040_src0_valid),                                                              //          .valid
		.sink40_channel       (rsp_demux_040_src0_channel),                                                            //          .channel
		.sink40_data          (rsp_demux_040_src0_data),                                                               //          .data
		.sink40_startofpacket (rsp_demux_040_src0_startofpacket),                                                      //          .startofpacket
		.sink40_endofpacket   (rsp_demux_040_src0_endofpacket),                                                        //          .endofpacket
		.sink41_ready         (rsp_demux_041_src0_ready),                                                              //    sink41.ready
		.sink41_valid         (rsp_demux_041_src0_valid),                                                              //          .valid
		.sink41_channel       (rsp_demux_041_src0_channel),                                                            //          .channel
		.sink41_data          (rsp_demux_041_src0_data),                                                               //          .data
		.sink41_startofpacket (rsp_demux_041_src0_startofpacket),                                                      //          .startofpacket
		.sink41_endofpacket   (rsp_demux_041_src0_endofpacket),                                                        //          .endofpacket
		.sink42_ready         (rsp_demux_042_src0_ready),                                                              //    sink42.ready
		.sink42_valid         (rsp_demux_042_src0_valid),                                                              //          .valid
		.sink42_channel       (rsp_demux_042_src0_channel),                                                            //          .channel
		.sink42_data          (rsp_demux_042_src0_data),                                                               //          .data
		.sink42_startofpacket (rsp_demux_042_src0_startofpacket),                                                      //          .startofpacket
		.sink42_endofpacket   (rsp_demux_042_src0_endofpacket),                                                        //          .endofpacket
		.sink43_ready         (rsp_demux_043_src0_ready),                                                              //    sink43.ready
		.sink43_valid         (rsp_demux_043_src0_valid),                                                              //          .valid
		.sink43_channel       (rsp_demux_043_src0_channel),                                                            //          .channel
		.sink43_data          (rsp_demux_043_src0_data),                                                               //          .data
		.sink43_startofpacket (rsp_demux_043_src0_startofpacket),                                                      //          .startofpacket
		.sink43_endofpacket   (rsp_demux_043_src0_endofpacket),                                                        //          .endofpacket
		.sink44_ready         (rsp_demux_044_src0_ready),                                                              //    sink44.ready
		.sink44_valid         (rsp_demux_044_src0_valid),                                                              //          .valid
		.sink44_channel       (rsp_demux_044_src0_channel),                                                            //          .channel
		.sink44_data          (rsp_demux_044_src0_data),                                                               //          .data
		.sink44_startofpacket (rsp_demux_044_src0_startofpacket),                                                      //          .startofpacket
		.sink44_endofpacket   (rsp_demux_044_src0_endofpacket),                                                        //          .endofpacket
		.sink45_ready         (rsp_demux_045_src0_ready),                                                              //    sink45.ready
		.sink45_valid         (rsp_demux_045_src0_valid),                                                              //          .valid
		.sink45_channel       (rsp_demux_045_src0_channel),                                                            //          .channel
		.sink45_data          (rsp_demux_045_src0_data),                                                               //          .data
		.sink45_startofpacket (rsp_demux_045_src0_startofpacket),                                                      //          .startofpacket
		.sink45_endofpacket   (rsp_demux_045_src0_endofpacket),                                                        //          .endofpacket
		.sink46_ready         (rsp_demux_046_src0_ready),                                                              //    sink46.ready
		.sink46_valid         (rsp_demux_046_src0_valid),                                                              //          .valid
		.sink46_channel       (rsp_demux_046_src0_channel),                                                            //          .channel
		.sink46_data          (rsp_demux_046_src0_data),                                                               //          .data
		.sink46_startofpacket (rsp_demux_046_src0_startofpacket),                                                      //          .startofpacket
		.sink46_endofpacket   (rsp_demux_046_src0_endofpacket)                                                         //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                 //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                 //          .valid
		.src_data            (rsp_mux_001_src_data),                                                  //          .data
		.src_channel         (rsp_mux_001_src_channel),                                               //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (ram_24k_s1_to_lcd_dma_read_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (ram_24k_s1_to_lcd_dma_read_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (ram_24k_s1_to_lcd_dma_read_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (ram_24k_s1_to_lcd_dma_read_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (ram_24k_s1_to_lcd_dma_read_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (ram_24k_s1_to_lcd_dma_read_master_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_mux_001 rsp_mux_002 (
		.clk                 (clk_0_clk_clk),                                                          //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                                  //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                                  //          .valid
		.src_data            (rsp_mux_002_src_data),                                                   //          .data
		.src_channel         (rsp_mux_002_src_channel),                                                //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                            //          .endofpacket
		.sink0_ready         (ram_24k_s1_to_spi_dma_write_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (ram_24k_s1_to_spi_dma_write_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (ram_24k_s1_to_spi_dma_write_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (ram_24k_s1_to_spi_dma_write_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (ram_24k_s1_to_spi_dma_write_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (ram_24k_s1_to_spi_dma_write_master_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	NiosII_Processor_mm_interconnect_0_rsp_mux_003 rsp_mux_003 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (NIOS_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                      //          .valid
		.src_data            (rsp_mux_003_src_data),                       //          .data
		.src_channel         (rsp_mux_003_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_035_src1_ready),                   //     sink0.ready
		.sink0_valid         (rsp_demux_035_src1_valid),                   //          .valid
		.sink0_channel       (rsp_demux_035_src1_channel),                 //          .channel
		.sink0_data          (rsp_demux_035_src1_data),                    //          .data
		.sink0_startofpacket (rsp_demux_035_src1_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_035_src1_endofpacket),             //          .endofpacket
		.sink1_ready         (rsp_demux_036_src1_ready),                   //     sink1.ready
		.sink1_valid         (rsp_demux_036_src1_valid),                   //          .valid
		.sink1_channel       (rsp_demux_036_src1_channel),                 //          .channel
		.sink1_data          (rsp_demux_036_src1_data),                    //          .data
		.sink1_startofpacket (rsp_demux_036_src1_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (rsp_demux_036_src1_endofpacket)              //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (55),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (67),
		.IN_PKT_BYTE_CNT_L             (62),
		.IN_PKT_TRANS_COMPRESSED_READ  (56),
		.IN_PKT_TRANS_WRITE            (58),
		.IN_PKT_BURSTWRAP_H            (70),
		.IN_PKT_BURSTWRAP_L            (68),
		.IN_PKT_BURST_SIZE_H           (73),
		.IN_PKT_BURST_SIZE_L           (71),
		.IN_PKT_RESPONSE_STATUS_H      (101),
		.IN_PKT_RESPONSE_STATUS_L      (100),
		.IN_PKT_TRANS_EXCLUSIVE        (61),
		.IN_PKT_BURST_TYPE_H           (75),
		.IN_PKT_BURST_TYPE_L           (74),
		.IN_PKT_ORI_BURST_SIZE_L       (102),
		.IN_PKT_ORI_BURST_SIZE_H       (104),
		.IN_ST_DATA_W                  (105),
		.OUT_PKT_ADDR_H                (37),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (49),
		.OUT_PKT_BYTE_CNT_L            (44),
		.OUT_PKT_TRANS_COMPRESSED_READ (38),
		.OUT_PKT_BURST_SIZE_H          (55),
		.OUT_PKT_BURST_SIZE_L          (53),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (43),
		.OUT_PKT_BURST_TYPE_H          (57),
		.OUT_PKT_BURST_TYPE_L          (56),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (47),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios_cpu_data_master_to_lookup_ram_ram_dds0_am_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                (NIOS_CPU_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.in_valid             (cmd_demux_src25_valid),                                                                 //      sink.valid
		.in_channel           (cmd_demux_src25_channel),                                                               //          .channel
		.in_startofpacket     (cmd_demux_src25_startofpacket),                                                         //          .startofpacket
		.in_endofpacket       (cmd_demux_src25_endofpacket),                                                           //          .endofpacket
		.in_ready             (cmd_demux_src25_ready),                                                                 //          .ready
		.in_data              (cmd_demux_src25_data),                                                                  //          .data
		.out_endofpacket      (nios_cpu_data_master_to_lookup_ram_ram_dds0_am_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios_cpu_data_master_to_lookup_ram_ram_dds0_am_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios_cpu_data_master_to_lookup_ram_ram_dds0_am_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios_cpu_data_master_to_lookup_ram_ram_dds0_am_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios_cpu_data_master_to_lookup_ram_ram_dds0_am_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios_cpu_data_master_to_lookup_ram_ram_dds0_am_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (55),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (67),
		.IN_PKT_BYTE_CNT_L             (62),
		.IN_PKT_TRANS_COMPRESSED_READ  (56),
		.IN_PKT_TRANS_WRITE            (58),
		.IN_PKT_BURSTWRAP_H            (70),
		.IN_PKT_BURSTWRAP_L            (68),
		.IN_PKT_BURST_SIZE_H           (73),
		.IN_PKT_BURST_SIZE_L           (71),
		.IN_PKT_RESPONSE_STATUS_H      (101),
		.IN_PKT_RESPONSE_STATUS_L      (100),
		.IN_PKT_TRANS_EXCLUSIVE        (61),
		.IN_PKT_BURST_TYPE_H           (75),
		.IN_PKT_BURST_TYPE_L           (74),
		.IN_PKT_ORI_BURST_SIZE_L       (102),
		.IN_PKT_ORI_BURST_SIZE_H       (104),
		.IN_ST_DATA_W                  (105),
		.OUT_PKT_ADDR_H                (37),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (49),
		.OUT_PKT_BYTE_CNT_L            (44),
		.OUT_PKT_TRANS_COMPRESSED_READ (38),
		.OUT_PKT_BURST_SIZE_H          (55),
		.OUT_PKT_BURST_SIZE_L          (53),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (43),
		.OUT_PKT_BURST_TYPE_H          (57),
		.OUT_PKT_BURST_TYPE_L          (56),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (47),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios_cpu_data_master_to_lookup_ram_ram_dds0_fm_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                (NIOS_CPU_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.in_valid             (cmd_demux_src26_valid),                                                                 //      sink.valid
		.in_channel           (cmd_demux_src26_channel),                                                               //          .channel
		.in_startofpacket     (cmd_demux_src26_startofpacket),                                                         //          .startofpacket
		.in_endofpacket       (cmd_demux_src26_endofpacket),                                                           //          .endofpacket
		.in_ready             (cmd_demux_src26_ready),                                                                 //          .ready
		.in_data              (cmd_demux_src26_data),                                                                  //          .data
		.out_endofpacket      (nios_cpu_data_master_to_lookup_ram_ram_dds0_fm_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios_cpu_data_master_to_lookup_ram_ram_dds0_fm_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios_cpu_data_master_to_lookup_ram_ram_dds0_fm_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios_cpu_data_master_to_lookup_ram_ram_dds0_fm_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios_cpu_data_master_to_lookup_ram_ram_dds0_fm_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios_cpu_data_master_to_lookup_ram_ram_dds0_fm_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (55),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (67),
		.IN_PKT_BYTE_CNT_L             (62),
		.IN_PKT_TRANS_COMPRESSED_READ  (56),
		.IN_PKT_TRANS_WRITE            (58),
		.IN_PKT_BURSTWRAP_H            (70),
		.IN_PKT_BURSTWRAP_L            (68),
		.IN_PKT_BURST_SIZE_H           (73),
		.IN_PKT_BURST_SIZE_L           (71),
		.IN_PKT_RESPONSE_STATUS_H      (101),
		.IN_PKT_RESPONSE_STATUS_L      (100),
		.IN_PKT_TRANS_EXCLUSIVE        (61),
		.IN_PKT_BURST_TYPE_H           (75),
		.IN_PKT_BURST_TYPE_L           (74),
		.IN_PKT_ORI_BURST_SIZE_L       (102),
		.IN_PKT_ORI_BURST_SIZE_H       (104),
		.IN_ST_DATA_W                  (105),
		.OUT_PKT_ADDR_H                (37),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (49),
		.OUT_PKT_BYTE_CNT_L            (44),
		.OUT_PKT_TRANS_COMPRESSED_READ (38),
		.OUT_PKT_BURST_SIZE_H          (55),
		.OUT_PKT_BURST_SIZE_L          (53),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (43),
		.OUT_PKT_BURST_TYPE_H          (57),
		.OUT_PKT_BURST_TYPE_L          (56),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (47),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios_cpu_data_master_to_lookup_ram_ram_dds0_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                      //       clk.clk
		.reset                (NIOS_CPU_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.in_valid             (cmd_demux_src27_valid),                                                              //      sink.valid
		.in_channel           (cmd_demux_src27_channel),                                                            //          .channel
		.in_startofpacket     (cmd_demux_src27_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (cmd_demux_src27_endofpacket),                                                        //          .endofpacket
		.in_ready             (cmd_demux_src27_ready),                                                              //          .ready
		.in_data              (cmd_demux_src27_data),                                                               //          .data
		.out_endofpacket      (nios_cpu_data_master_to_lookup_ram_ram_dds0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios_cpu_data_master_to_lookup_ram_ram_dds0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios_cpu_data_master_to_lookup_ram_ram_dds0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios_cpu_data_master_to_lookup_ram_ram_dds0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios_cpu_data_master_to_lookup_ram_ram_dds0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios_cpu_data_master_to_lookup_ram_ram_dds0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (55),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (67),
		.IN_PKT_BYTE_CNT_L             (62),
		.IN_PKT_TRANS_COMPRESSED_READ  (56),
		.IN_PKT_TRANS_WRITE            (58),
		.IN_PKT_BURSTWRAP_H            (70),
		.IN_PKT_BURSTWRAP_L            (68),
		.IN_PKT_BURST_SIZE_H           (73),
		.IN_PKT_BURST_SIZE_L           (71),
		.IN_PKT_RESPONSE_STATUS_H      (101),
		.IN_PKT_RESPONSE_STATUS_L      (100),
		.IN_PKT_TRANS_EXCLUSIVE        (61),
		.IN_PKT_BURST_TYPE_H           (75),
		.IN_PKT_BURST_TYPE_L           (74),
		.IN_PKT_ORI_BURST_SIZE_L       (102),
		.IN_PKT_ORI_BURST_SIZE_H       (104),
		.IN_ST_DATA_W                  (105),
		.OUT_PKT_ADDR_H                (37),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (49),
		.OUT_PKT_BYTE_CNT_L            (44),
		.OUT_PKT_TRANS_COMPRESSED_READ (38),
		.OUT_PKT_BURST_SIZE_H          (55),
		.OUT_PKT_BURST_SIZE_L          (53),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (43),
		.OUT_PKT_BURST_TYPE_H          (57),
		.OUT_PKT_BURST_TYPE_L          (56),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (47),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios_cpu_data_master_to_lookup_ram_ram_dds1_am_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                (NIOS_CPU_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.in_valid             (cmd_demux_src28_valid),                                                                 //      sink.valid
		.in_channel           (cmd_demux_src28_channel),                                                               //          .channel
		.in_startofpacket     (cmd_demux_src28_startofpacket),                                                         //          .startofpacket
		.in_endofpacket       (cmd_demux_src28_endofpacket),                                                           //          .endofpacket
		.in_ready             (cmd_demux_src28_ready),                                                                 //          .ready
		.in_data              (cmd_demux_src28_data),                                                                  //          .data
		.out_endofpacket      (nios_cpu_data_master_to_lookup_ram_ram_dds1_am_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios_cpu_data_master_to_lookup_ram_ram_dds1_am_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios_cpu_data_master_to_lookup_ram_ram_dds1_am_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios_cpu_data_master_to_lookup_ram_ram_dds1_am_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios_cpu_data_master_to_lookup_ram_ram_dds1_am_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios_cpu_data_master_to_lookup_ram_ram_dds1_am_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (55),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (67),
		.IN_PKT_BYTE_CNT_L             (62),
		.IN_PKT_TRANS_COMPRESSED_READ  (56),
		.IN_PKT_TRANS_WRITE            (58),
		.IN_PKT_BURSTWRAP_H            (70),
		.IN_PKT_BURSTWRAP_L            (68),
		.IN_PKT_BURST_SIZE_H           (73),
		.IN_PKT_BURST_SIZE_L           (71),
		.IN_PKT_RESPONSE_STATUS_H      (101),
		.IN_PKT_RESPONSE_STATUS_L      (100),
		.IN_PKT_TRANS_EXCLUSIVE        (61),
		.IN_PKT_BURST_TYPE_H           (75),
		.IN_PKT_BURST_TYPE_L           (74),
		.IN_PKT_ORI_BURST_SIZE_L       (102),
		.IN_PKT_ORI_BURST_SIZE_H       (104),
		.IN_ST_DATA_W                  (105),
		.OUT_PKT_ADDR_H                (37),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (49),
		.OUT_PKT_BYTE_CNT_L            (44),
		.OUT_PKT_TRANS_COMPRESSED_READ (38),
		.OUT_PKT_BURST_SIZE_H          (55),
		.OUT_PKT_BURST_SIZE_L          (53),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (43),
		.OUT_PKT_BURST_TYPE_H          (57),
		.OUT_PKT_BURST_TYPE_L          (56),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (47),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios_cpu_data_master_to_lookup_ram_ram_dds1_fm_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                (NIOS_CPU_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.in_valid             (cmd_demux_src29_valid),                                                                 //      sink.valid
		.in_channel           (cmd_demux_src29_channel),                                                               //          .channel
		.in_startofpacket     (cmd_demux_src29_startofpacket),                                                         //          .startofpacket
		.in_endofpacket       (cmd_demux_src29_endofpacket),                                                           //          .endofpacket
		.in_ready             (cmd_demux_src29_ready),                                                                 //          .ready
		.in_data              (cmd_demux_src29_data),                                                                  //          .data
		.out_endofpacket      (nios_cpu_data_master_to_lookup_ram_ram_dds1_fm_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios_cpu_data_master_to_lookup_ram_ram_dds1_fm_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios_cpu_data_master_to_lookup_ram_ram_dds1_fm_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios_cpu_data_master_to_lookup_ram_ram_dds1_fm_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios_cpu_data_master_to_lookup_ram_ram_dds1_fm_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios_cpu_data_master_to_lookup_ram_ram_dds1_fm_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (55),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (67),
		.IN_PKT_BYTE_CNT_L             (62),
		.IN_PKT_TRANS_COMPRESSED_READ  (56),
		.IN_PKT_TRANS_WRITE            (58),
		.IN_PKT_BURSTWRAP_H            (70),
		.IN_PKT_BURSTWRAP_L            (68),
		.IN_PKT_BURST_SIZE_H           (73),
		.IN_PKT_BURST_SIZE_L           (71),
		.IN_PKT_RESPONSE_STATUS_H      (101),
		.IN_PKT_RESPONSE_STATUS_L      (100),
		.IN_PKT_TRANS_EXCLUSIVE        (61),
		.IN_PKT_BURST_TYPE_H           (75),
		.IN_PKT_BURST_TYPE_L           (74),
		.IN_PKT_ORI_BURST_SIZE_L       (102),
		.IN_PKT_ORI_BURST_SIZE_H       (104),
		.IN_ST_DATA_W                  (105),
		.OUT_PKT_ADDR_H                (37),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (49),
		.OUT_PKT_BYTE_CNT_L            (44),
		.OUT_PKT_TRANS_COMPRESSED_READ (38),
		.OUT_PKT_BURST_SIZE_H          (55),
		.OUT_PKT_BURST_SIZE_L          (53),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (43),
		.OUT_PKT_BURST_TYPE_H          (57),
		.OUT_PKT_BURST_TYPE_L          (56),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (47),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios_cpu_data_master_to_lookup_ram_ram_dds1_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                      //       clk.clk
		.reset                (NIOS_CPU_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.in_valid             (cmd_demux_src30_valid),                                                              //      sink.valid
		.in_channel           (cmd_demux_src30_channel),                                                            //          .channel
		.in_startofpacket     (cmd_demux_src30_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (cmd_demux_src30_endofpacket),                                                        //          .endofpacket
		.in_ready             (cmd_demux_src30_ready),                                                              //          .ready
		.in_data              (cmd_demux_src30_data),                                                               //          .data
		.out_endofpacket      (nios_cpu_data_master_to_lookup_ram_ram_dds1_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios_cpu_data_master_to_lookup_ram_ram_dds1_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios_cpu_data_master_to_lookup_ram_ram_dds1_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios_cpu_data_master_to_lookup_ram_ram_dds1_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios_cpu_data_master_to_lookup_ram_ram_dds1_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios_cpu_data_master_to_lookup_ram_ram_dds1_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (28),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (40),
		.IN_PKT_BYTE_CNT_L             (35),
		.IN_PKT_TRANS_COMPRESSED_READ  (29),
		.IN_PKT_TRANS_WRITE            (31),
		.IN_PKT_BURSTWRAP_H            (43),
		.IN_PKT_BURSTWRAP_L            (41),
		.IN_PKT_BURST_SIZE_H           (46),
		.IN_PKT_BURST_SIZE_L           (44),
		.IN_PKT_RESPONSE_STATUS_H      (74),
		.IN_PKT_RESPONSE_STATUS_L      (73),
		.IN_PKT_TRANS_EXCLUSIVE        (34),
		.IN_PKT_BURST_TYPE_H           (48),
		.IN_PKT_BURST_TYPE_L           (47),
		.IN_PKT_ORI_BURST_SIZE_L       (75),
		.IN_PKT_ORI_BURST_SIZE_H       (77),
		.IN_ST_DATA_W                  (78),
		.OUT_PKT_ADDR_H                (55),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (67),
		.OUT_PKT_BYTE_CNT_L            (62),
		.OUT_PKT_TRANS_COMPRESSED_READ (56),
		.OUT_PKT_BURST_SIZE_H          (73),
		.OUT_PKT_BURST_SIZE_L          (71),
		.OUT_PKT_RESPONSE_STATUS_H     (101),
		.OUT_PKT_RESPONSE_STATUS_L     (100),
		.OUT_PKT_TRANS_EXCLUSIVE       (61),
		.OUT_PKT_BURST_TYPE_H          (75),
		.OUT_PKT_BURST_TYPE_L          (74),
		.OUT_PKT_ORI_BURST_SIZE_L      (102),
		.OUT_PKT_ORI_BURST_SIZE_H      (104),
		.OUT_ST_DATA_W                 (105),
		.ST_CHANNEL_W                  (47),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) lcd_dma_read_master_to_ram_24k_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                         //       clk.clk
		.reset                (NIOS_CPU_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                              //      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                            //          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                      //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                        //          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                              //          .ready
		.in_data              (cmd_demux_001_src0_data),                                               //          .data
		.out_endofpacket      (lcd_dma_read_master_to_ram_24k_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (lcd_dma_read_master_to_ram_24k_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (lcd_dma_read_master_to_ram_24k_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (lcd_dma_read_master_to_ram_24k_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (lcd_dma_read_master_to_ram_24k_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (lcd_dma_read_master_to_ram_24k_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (28),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (40),
		.IN_PKT_BYTE_CNT_L             (35),
		.IN_PKT_TRANS_COMPRESSED_READ  (29),
		.IN_PKT_TRANS_WRITE            (31),
		.IN_PKT_BURSTWRAP_H            (43),
		.IN_PKT_BURSTWRAP_L            (41),
		.IN_PKT_BURST_SIZE_H           (46),
		.IN_PKT_BURST_SIZE_L           (44),
		.IN_PKT_RESPONSE_STATUS_H      (74),
		.IN_PKT_RESPONSE_STATUS_L      (73),
		.IN_PKT_TRANS_EXCLUSIVE        (34),
		.IN_PKT_BURST_TYPE_H           (48),
		.IN_PKT_BURST_TYPE_L           (47),
		.IN_PKT_ORI_BURST_SIZE_L       (75),
		.IN_PKT_ORI_BURST_SIZE_H       (77),
		.IN_ST_DATA_W                  (78),
		.OUT_PKT_ADDR_H                (55),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (67),
		.OUT_PKT_BYTE_CNT_L            (62),
		.OUT_PKT_TRANS_COMPRESSED_READ (56),
		.OUT_PKT_BURST_SIZE_H          (73),
		.OUT_PKT_BURST_SIZE_L          (71),
		.OUT_PKT_RESPONSE_STATUS_H     (101),
		.OUT_PKT_RESPONSE_STATUS_L     (100),
		.OUT_PKT_TRANS_EXCLUSIVE       (61),
		.OUT_PKT_BURST_TYPE_H          (75),
		.OUT_PKT_BURST_TYPE_L          (74),
		.OUT_PKT_ORI_BURST_SIZE_L      (102),
		.OUT_PKT_ORI_BURST_SIZE_H      (104),
		.OUT_ST_DATA_W                 (105),
		.ST_CHANNEL_W                  (47),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) spi_dma_write_master_to_ram_24k_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                          //       clk.clk
		.reset                (NIOS_CPU_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (cmd_demux_002_src0_valid),                                               //      sink.valid
		.in_channel           (cmd_demux_002_src0_channel),                                             //          .channel
		.in_startofpacket     (cmd_demux_002_src0_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src0_endofpacket),                                         //          .endofpacket
		.in_ready             (cmd_demux_002_src0_ready),                                               //          .ready
		.in_data              (cmd_demux_002_src0_data),                                                //          .data
		.out_endofpacket      (spi_dma_write_master_to_ram_24k_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (spi_dma_write_master_to_ram_24k_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (spi_dma_write_master_to_ram_24k_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (spi_dma_write_master_to_ram_24k_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (spi_dma_write_master_to_ram_24k_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (spi_dma_write_master_to_ram_24k_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (37),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (49),
		.IN_PKT_BYTE_CNT_L             (44),
		.IN_PKT_TRANS_COMPRESSED_READ  (38),
		.IN_PKT_TRANS_WRITE            (40),
		.IN_PKT_BURSTWRAP_H            (52),
		.IN_PKT_BURSTWRAP_L            (50),
		.IN_PKT_BURST_SIZE_H           (55),
		.IN_PKT_BURST_SIZE_L           (53),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (43),
		.IN_PKT_BURST_TYPE_H           (57),
		.IN_PKT_BURST_TYPE_L           (56),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (55),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (67),
		.OUT_PKT_BYTE_CNT_L            (62),
		.OUT_PKT_TRANS_COMPRESSED_READ (56),
		.OUT_PKT_BURST_SIZE_H          (73),
		.OUT_PKT_BURST_SIZE_L          (71),
		.OUT_PKT_RESPONSE_STATUS_H     (101),
		.OUT_PKT_RESPONSE_STATUS_L     (100),
		.OUT_PKT_TRANS_EXCLUSIVE       (61),
		.OUT_PKT_BURST_TYPE_H          (75),
		.OUT_PKT_BURST_TYPE_L          (74),
		.OUT_PKT_ORI_BURST_SIZE_L      (102),
		.OUT_PKT_ORI_BURST_SIZE_H      (104),
		.OUT_ST_DATA_W                 (105),
		.ST_CHANNEL_W                  (47),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) lookup_ram_ram_dds0_am_s1_to_nios_cpu_data_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                (NIOS_CPU_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.in_valid             (rsp_demux_025_src0_valid),                                                              //      sink.valid
		.in_channel           (rsp_demux_025_src0_channel),                                                            //          .channel
		.in_startofpacket     (rsp_demux_025_src0_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_025_src0_endofpacket),                                                        //          .endofpacket
		.in_ready             (rsp_demux_025_src0_ready),                                                              //          .ready
		.in_data              (rsp_demux_025_src0_data),                                                               //          .data
		.out_endofpacket      (lookup_ram_ram_dds0_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (lookup_ram_ram_dds0_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (lookup_ram_ram_dds0_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (lookup_ram_ram_dds0_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (lookup_ram_ram_dds0_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (lookup_ram_ram_dds0_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (37),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (49),
		.IN_PKT_BYTE_CNT_L             (44),
		.IN_PKT_TRANS_COMPRESSED_READ  (38),
		.IN_PKT_TRANS_WRITE            (40),
		.IN_PKT_BURSTWRAP_H            (52),
		.IN_PKT_BURSTWRAP_L            (50),
		.IN_PKT_BURST_SIZE_H           (55),
		.IN_PKT_BURST_SIZE_L           (53),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (43),
		.IN_PKT_BURST_TYPE_H           (57),
		.IN_PKT_BURST_TYPE_L           (56),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (55),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (67),
		.OUT_PKT_BYTE_CNT_L            (62),
		.OUT_PKT_TRANS_COMPRESSED_READ (56),
		.OUT_PKT_BURST_SIZE_H          (73),
		.OUT_PKT_BURST_SIZE_L          (71),
		.OUT_PKT_RESPONSE_STATUS_H     (101),
		.OUT_PKT_RESPONSE_STATUS_L     (100),
		.OUT_PKT_TRANS_EXCLUSIVE       (61),
		.OUT_PKT_BURST_TYPE_H          (75),
		.OUT_PKT_BURST_TYPE_L          (74),
		.OUT_PKT_ORI_BURST_SIZE_L      (102),
		.OUT_PKT_ORI_BURST_SIZE_H      (104),
		.OUT_ST_DATA_W                 (105),
		.ST_CHANNEL_W                  (47),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) lookup_ram_ram_dds0_fm_s1_to_nios_cpu_data_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                (NIOS_CPU_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.in_valid             (rsp_demux_026_src0_valid),                                                              //      sink.valid
		.in_channel           (rsp_demux_026_src0_channel),                                                            //          .channel
		.in_startofpacket     (rsp_demux_026_src0_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_026_src0_endofpacket),                                                        //          .endofpacket
		.in_ready             (rsp_demux_026_src0_ready),                                                              //          .ready
		.in_data              (rsp_demux_026_src0_data),                                                               //          .data
		.out_endofpacket      (lookup_ram_ram_dds0_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (lookup_ram_ram_dds0_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (lookup_ram_ram_dds0_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (lookup_ram_ram_dds0_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (lookup_ram_ram_dds0_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (lookup_ram_ram_dds0_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (37),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (49),
		.IN_PKT_BYTE_CNT_L             (44),
		.IN_PKT_TRANS_COMPRESSED_READ  (38),
		.IN_PKT_TRANS_WRITE            (40),
		.IN_PKT_BURSTWRAP_H            (52),
		.IN_PKT_BURSTWRAP_L            (50),
		.IN_PKT_BURST_SIZE_H           (55),
		.IN_PKT_BURST_SIZE_L           (53),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (43),
		.IN_PKT_BURST_TYPE_H           (57),
		.IN_PKT_BURST_TYPE_L           (56),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (55),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (67),
		.OUT_PKT_BYTE_CNT_L            (62),
		.OUT_PKT_TRANS_COMPRESSED_READ (56),
		.OUT_PKT_BURST_SIZE_H          (73),
		.OUT_PKT_BURST_SIZE_L          (71),
		.OUT_PKT_RESPONSE_STATUS_H     (101),
		.OUT_PKT_RESPONSE_STATUS_L     (100),
		.OUT_PKT_TRANS_EXCLUSIVE       (61),
		.OUT_PKT_BURST_TYPE_H          (75),
		.OUT_PKT_BURST_TYPE_L          (74),
		.OUT_PKT_ORI_BURST_SIZE_L      (102),
		.OUT_PKT_ORI_BURST_SIZE_H      (104),
		.OUT_ST_DATA_W                 (105),
		.ST_CHANNEL_W                  (47),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) lookup_ram_ram_dds0_s1_to_nios_cpu_data_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                      //       clk.clk
		.reset                (NIOS_CPU_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.in_valid             (rsp_demux_027_src0_valid),                                                           //      sink.valid
		.in_channel           (rsp_demux_027_src0_channel),                                                         //          .channel
		.in_startofpacket     (rsp_demux_027_src0_startofpacket),                                                   //          .startofpacket
		.in_endofpacket       (rsp_demux_027_src0_endofpacket),                                                     //          .endofpacket
		.in_ready             (rsp_demux_027_src0_ready),                                                           //          .ready
		.in_data              (rsp_demux_027_src0_data),                                                            //          .data
		.out_endofpacket      (lookup_ram_ram_dds0_s1_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (lookup_ram_ram_dds0_s1_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (lookup_ram_ram_dds0_s1_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (lookup_ram_ram_dds0_s1_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (lookup_ram_ram_dds0_s1_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (lookup_ram_ram_dds0_s1_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (37),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (49),
		.IN_PKT_BYTE_CNT_L             (44),
		.IN_PKT_TRANS_COMPRESSED_READ  (38),
		.IN_PKT_TRANS_WRITE            (40),
		.IN_PKT_BURSTWRAP_H            (52),
		.IN_PKT_BURSTWRAP_L            (50),
		.IN_PKT_BURST_SIZE_H           (55),
		.IN_PKT_BURST_SIZE_L           (53),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (43),
		.IN_PKT_BURST_TYPE_H           (57),
		.IN_PKT_BURST_TYPE_L           (56),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (55),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (67),
		.OUT_PKT_BYTE_CNT_L            (62),
		.OUT_PKT_TRANS_COMPRESSED_READ (56),
		.OUT_PKT_BURST_SIZE_H          (73),
		.OUT_PKT_BURST_SIZE_L          (71),
		.OUT_PKT_RESPONSE_STATUS_H     (101),
		.OUT_PKT_RESPONSE_STATUS_L     (100),
		.OUT_PKT_TRANS_EXCLUSIVE       (61),
		.OUT_PKT_BURST_TYPE_H          (75),
		.OUT_PKT_BURST_TYPE_L          (74),
		.OUT_PKT_ORI_BURST_SIZE_L      (102),
		.OUT_PKT_ORI_BURST_SIZE_H      (104),
		.OUT_ST_DATA_W                 (105),
		.ST_CHANNEL_W                  (47),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) lookup_ram_ram_dds1_am_s1_to_nios_cpu_data_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                (NIOS_CPU_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.in_valid             (rsp_demux_028_src0_valid),                                                              //      sink.valid
		.in_channel           (rsp_demux_028_src0_channel),                                                            //          .channel
		.in_startofpacket     (rsp_demux_028_src0_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_028_src0_endofpacket),                                                        //          .endofpacket
		.in_ready             (rsp_demux_028_src0_ready),                                                              //          .ready
		.in_data              (rsp_demux_028_src0_data),                                                               //          .data
		.out_endofpacket      (lookup_ram_ram_dds1_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (lookup_ram_ram_dds1_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (lookup_ram_ram_dds1_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (lookup_ram_ram_dds1_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (lookup_ram_ram_dds1_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (lookup_ram_ram_dds1_am_s1_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (37),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (49),
		.IN_PKT_BYTE_CNT_L             (44),
		.IN_PKT_TRANS_COMPRESSED_READ  (38),
		.IN_PKT_TRANS_WRITE            (40),
		.IN_PKT_BURSTWRAP_H            (52),
		.IN_PKT_BURSTWRAP_L            (50),
		.IN_PKT_BURST_SIZE_H           (55),
		.IN_PKT_BURST_SIZE_L           (53),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (43),
		.IN_PKT_BURST_TYPE_H           (57),
		.IN_PKT_BURST_TYPE_L           (56),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (55),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (67),
		.OUT_PKT_BYTE_CNT_L            (62),
		.OUT_PKT_TRANS_COMPRESSED_READ (56),
		.OUT_PKT_BURST_SIZE_H          (73),
		.OUT_PKT_BURST_SIZE_L          (71),
		.OUT_PKT_RESPONSE_STATUS_H     (101),
		.OUT_PKT_RESPONSE_STATUS_L     (100),
		.OUT_PKT_TRANS_EXCLUSIVE       (61),
		.OUT_PKT_BURST_TYPE_H          (75),
		.OUT_PKT_BURST_TYPE_L          (74),
		.OUT_PKT_ORI_BURST_SIZE_L      (102),
		.OUT_PKT_ORI_BURST_SIZE_H      (104),
		.OUT_ST_DATA_W                 (105),
		.ST_CHANNEL_W                  (47),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) lookup_ram_ram_dds1_fm_s1_to_nios_cpu_data_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                (NIOS_CPU_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.in_valid             (rsp_demux_029_src0_valid),                                                              //      sink.valid
		.in_channel           (rsp_demux_029_src0_channel),                                                            //          .channel
		.in_startofpacket     (rsp_demux_029_src0_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_029_src0_endofpacket),                                                        //          .endofpacket
		.in_ready             (rsp_demux_029_src0_ready),                                                              //          .ready
		.in_data              (rsp_demux_029_src0_data),                                                               //          .data
		.out_endofpacket      (lookup_ram_ram_dds1_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (lookup_ram_ram_dds1_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (lookup_ram_ram_dds1_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (lookup_ram_ram_dds1_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (lookup_ram_ram_dds1_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (lookup_ram_ram_dds1_fm_s1_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (37),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (49),
		.IN_PKT_BYTE_CNT_L             (44),
		.IN_PKT_TRANS_COMPRESSED_READ  (38),
		.IN_PKT_TRANS_WRITE            (40),
		.IN_PKT_BURSTWRAP_H            (52),
		.IN_PKT_BURSTWRAP_L            (50),
		.IN_PKT_BURST_SIZE_H           (55),
		.IN_PKT_BURST_SIZE_L           (53),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (43),
		.IN_PKT_BURST_TYPE_H           (57),
		.IN_PKT_BURST_TYPE_L           (56),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (55),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (67),
		.OUT_PKT_BYTE_CNT_L            (62),
		.OUT_PKT_TRANS_COMPRESSED_READ (56),
		.OUT_PKT_BURST_SIZE_H          (73),
		.OUT_PKT_BURST_SIZE_L          (71),
		.OUT_PKT_RESPONSE_STATUS_H     (101),
		.OUT_PKT_RESPONSE_STATUS_L     (100),
		.OUT_PKT_TRANS_EXCLUSIVE       (61),
		.OUT_PKT_BURST_TYPE_H          (75),
		.OUT_PKT_BURST_TYPE_L          (74),
		.OUT_PKT_ORI_BURST_SIZE_L      (102),
		.OUT_PKT_ORI_BURST_SIZE_H      (104),
		.OUT_ST_DATA_W                 (105),
		.ST_CHANNEL_W                  (47),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) lookup_ram_ram_dds1_s1_to_nios_cpu_data_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                      //       clk.clk
		.reset                (NIOS_CPU_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.in_valid             (rsp_demux_030_src0_valid),                                                           //      sink.valid
		.in_channel           (rsp_demux_030_src0_channel),                                                         //          .channel
		.in_startofpacket     (rsp_demux_030_src0_startofpacket),                                                   //          .startofpacket
		.in_endofpacket       (rsp_demux_030_src0_endofpacket),                                                     //          .endofpacket
		.in_ready             (rsp_demux_030_src0_ready),                                                           //          .ready
		.in_data              (rsp_demux_030_src0_data),                                                            //          .data
		.out_endofpacket      (lookup_ram_ram_dds1_s1_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (lookup_ram_ram_dds1_s1_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (lookup_ram_ram_dds1_s1_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (lookup_ram_ram_dds1_s1_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (lookup_ram_ram_dds1_s1_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (lookup_ram_ram_dds1_s1_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (55),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (67),
		.IN_PKT_BYTE_CNT_L             (62),
		.IN_PKT_TRANS_COMPRESSED_READ  (56),
		.IN_PKT_TRANS_WRITE            (58),
		.IN_PKT_BURSTWRAP_H            (70),
		.IN_PKT_BURSTWRAP_L            (68),
		.IN_PKT_BURST_SIZE_H           (73),
		.IN_PKT_BURST_SIZE_L           (71),
		.IN_PKT_RESPONSE_STATUS_H      (101),
		.IN_PKT_RESPONSE_STATUS_L      (100),
		.IN_PKT_TRANS_EXCLUSIVE        (61),
		.IN_PKT_BURST_TYPE_H           (75),
		.IN_PKT_BURST_TYPE_L           (74),
		.IN_PKT_ORI_BURST_SIZE_L       (102),
		.IN_PKT_ORI_BURST_SIZE_H       (104),
		.IN_ST_DATA_W                  (105),
		.OUT_PKT_ADDR_H                (28),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (40),
		.OUT_PKT_BYTE_CNT_L            (35),
		.OUT_PKT_TRANS_COMPRESSED_READ (29),
		.OUT_PKT_BURST_SIZE_H          (46),
		.OUT_PKT_BURST_SIZE_L          (44),
		.OUT_PKT_RESPONSE_STATUS_H     (74),
		.OUT_PKT_RESPONSE_STATUS_L     (73),
		.OUT_PKT_TRANS_EXCLUSIVE       (34),
		.OUT_PKT_BURST_TYPE_H          (48),
		.OUT_PKT_BURST_TYPE_L          (47),
		.OUT_PKT_ORI_BURST_SIZE_L      (75),
		.OUT_PKT_ORI_BURST_SIZE_H      (77),
		.OUT_ST_DATA_W                 (78),
		.ST_CHANNEL_W                  (47),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ram_24k_s1_to_lcd_dma_read_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                         //       clk.clk
		.reset                (NIOS_CPU_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (rsp_demux_037_src1_valid),                                              //      sink.valid
		.in_channel           (rsp_demux_037_src1_channel),                                            //          .channel
		.in_startofpacket     (rsp_demux_037_src1_startofpacket),                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_037_src1_endofpacket),                                        //          .endofpacket
		.in_ready             (rsp_demux_037_src1_ready),                                              //          .ready
		.in_data              (rsp_demux_037_src1_data),                                               //          .data
		.out_endofpacket      (ram_24k_s1_to_lcd_dma_read_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ram_24k_s1_to_lcd_dma_read_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ram_24k_s1_to_lcd_dma_read_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ram_24k_s1_to_lcd_dma_read_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ram_24k_s1_to_lcd_dma_read_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ram_24k_s1_to_lcd_dma_read_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (55),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (67),
		.IN_PKT_BYTE_CNT_L             (62),
		.IN_PKT_TRANS_COMPRESSED_READ  (56),
		.IN_PKT_TRANS_WRITE            (58),
		.IN_PKT_BURSTWRAP_H            (70),
		.IN_PKT_BURSTWRAP_L            (68),
		.IN_PKT_BURST_SIZE_H           (73),
		.IN_PKT_BURST_SIZE_L           (71),
		.IN_PKT_RESPONSE_STATUS_H      (101),
		.IN_PKT_RESPONSE_STATUS_L      (100),
		.IN_PKT_TRANS_EXCLUSIVE        (61),
		.IN_PKT_BURST_TYPE_H           (75),
		.IN_PKT_BURST_TYPE_L           (74),
		.IN_PKT_ORI_BURST_SIZE_L       (102),
		.IN_PKT_ORI_BURST_SIZE_H       (104),
		.IN_ST_DATA_W                  (105),
		.OUT_PKT_ADDR_H                (28),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (40),
		.OUT_PKT_BYTE_CNT_L            (35),
		.OUT_PKT_TRANS_COMPRESSED_READ (29),
		.OUT_PKT_BURST_SIZE_H          (46),
		.OUT_PKT_BURST_SIZE_L          (44),
		.OUT_PKT_RESPONSE_STATUS_H     (74),
		.OUT_PKT_RESPONSE_STATUS_L     (73),
		.OUT_PKT_TRANS_EXCLUSIVE       (34),
		.OUT_PKT_BURST_TYPE_H          (48),
		.OUT_PKT_BURST_TYPE_L          (47),
		.OUT_PKT_ORI_BURST_SIZE_L      (75),
		.OUT_PKT_ORI_BURST_SIZE_H      (77),
		.OUT_ST_DATA_W                 (78),
		.ST_CHANNEL_W                  (47),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ram_24k_s1_to_spi_dma_write_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                          //       clk.clk
		.reset                (NIOS_CPU_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (rsp_demux_037_src2_valid),                                               //      sink.valid
		.in_channel           (rsp_demux_037_src2_channel),                                             //          .channel
		.in_startofpacket     (rsp_demux_037_src2_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (rsp_demux_037_src2_endofpacket),                                         //          .endofpacket
		.in_ready             (rsp_demux_037_src2_ready),                                               //          .ready
		.in_data              (rsp_demux_037_src2_data),                                                //          .data
		.out_endofpacket      (ram_24k_s1_to_spi_dma_write_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ram_24k_s1_to_spi_dma_write_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ram_24k_s1_to_spi_dma_write_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ram_24k_s1_to_spi_dma_write_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ram_24k_s1_to_spi_dma_write_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ram_24k_s1_to_spi_dma_write_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated)
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (dds0_am_modindex_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds0_am_modindex_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds0_am_modindex_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                   //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (dds1_am_modindex_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds1_am_modindex_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds1_am_modindex_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)               //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (dds0_am_modphasestep_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds0_am_modphasestep_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds0_am_modphasestep_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                   //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (dds1_am_modphasestep_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds1_am_modphasestep_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds1_am_modphasestep_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                   //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (lcd_backlight_pwm_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (lcd_backlight_pwm_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (lcd_backlight_pwm_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (lcd_control_s1_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (lcd_control_s1_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (lcd_control_s1_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)           //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (lcd_data_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (lcd_data_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (lcd_data_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)           //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),              // in_rst_0.reset
		.in_0_data      (dds0_fm_moddeviationphase_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds0_fm_moddeviationphase_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds0_fm_moddeviationphase_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                        //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),              // in_rst_0.reset
		.in_0_data      (dds1_fm_moddeviationphase_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds1_fm_moddeviationphase_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds1_fm_moddeviationphase_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                        //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (dds0_fm_modphasestep_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds0_fm_modphasestep_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds0_fm_modphasestep_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                   //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (dds1_fm_modphasestep_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds1_fm_modphasestep_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds1_fm_modphasestep_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                   //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (dds0_outputrelay_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds0_outputrelay_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds0_outputrelay_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)               //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (dds1_outputrelay_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds1_outputrelay_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds1_outputrelay_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)               //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (dds0_pm_modindex_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds0_pm_modindex_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds0_pm_modindex_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)               //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (dds1_pm_modindex_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds1_pm_modindex_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds1_pm_modindex_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)               //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (dds0_pm_modphasestep_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds0_pm_modphasestep_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds0_pm_modphasestep_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                   //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (dds1_pm_modphasestep_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds1_pm_modphasestep_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds1_pm_modphasestep_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)                   //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (dds0_pwm_amplitude_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds0_pwm_amplitude_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds0_pwm_amplitude_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)                 //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (dds1_pwm_amplitude_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds1_pwm_amplitude_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds1_pwm_amplitude_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)                 //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (dds0_pwm_offset_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds0_pwm_offset_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds0_pwm_offset_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)              //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (dds1_pwm_offset_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds1_pwm_offset_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds1_pwm_offset_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)              //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (dds0_phaseoffset_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds0_phaseoffset_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds0_phaseoffset_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)               //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_022 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (dds1_phaseoffset_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds1_phaseoffset_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds1_phaseoffset_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_022_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_022_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_022_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_022_out_0_error)               //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_023 (
		.in_clk_0_clk   (clk_0_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (dds0_phasestep_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds0_phasestep_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds0_phasestep_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_023_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_023_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_023_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_023_out_0_error)             //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_024 (
		.in_clk_0_clk   (clk_0_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (dds1_phasestep_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dds1_phasestep_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dds1_phasestep_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_024_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_024_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_024_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_024_out_0_error)             //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter_025 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_025 (
		.in_clk_0_clk   (clk_0_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (lookup_ram_ram_dds0_am_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (lookup_ram_ram_dds0_am_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (lookup_ram_ram_dds0_am_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_025_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_025_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_025_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_025_out_0_error)                     //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter_025 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_026 (
		.in_clk_0_clk   (clk_0_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (lookup_ram_ram_dds0_fm_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (lookup_ram_ram_dds0_fm_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (lookup_ram_ram_dds0_fm_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_026_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_026_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_026_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_026_out_0_error)                     //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter_025 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_027 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (lookup_ram_ram_dds0_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (lookup_ram_ram_dds0_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (lookup_ram_ram_dds0_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_027_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_027_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_027_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_027_out_0_error)                  //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter_025 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_028 (
		.in_clk_0_clk   (clk_0_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (lookup_ram_ram_dds1_am_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (lookup_ram_ram_dds1_am_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (lookup_ram_ram_dds1_am_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_028_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_028_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_028_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_028_out_0_error)                     //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter_025 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_029 (
		.in_clk_0_clk   (clk_0_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (lookup_ram_ram_dds1_fm_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (lookup_ram_ram_dds1_fm_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (lookup_ram_ram_dds1_fm_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_029_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_029_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_029_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_029_out_0_error)                     //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter_025 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_030 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (lookup_ram_ram_dds1_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (lookup_ram_ram_dds1_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (lookup_ram_ram_dds1_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_030_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_030_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_030_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_030_out_0_error)                  //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_031 (
		.in_clk_0_clk   (clk_0_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_031_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_031_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_031_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_031_out_0_error)                       //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_032 (
		.in_clk_0_clk   (clk_0_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (lcd_dma_control_port_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (lcd_dma_control_port_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (lcd_dma_control_port_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_032_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_032_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_032_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_032_out_0_error)                      //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_033 (
		.in_clk_0_clk   (clk_0_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (spi_dma_control_port_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (spi_dma_control_port_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (spi_dma_control_port_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_033_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_033_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_033_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_033_out_0_error)                      //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_034 (
		.in_clk_0_clk   (clk_0_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (flash_csr_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (flash_csr_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (flash_csr_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_034_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_034_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_034_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_034_out_0_error)           //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_035 (
		.in_clk_0_clk   (clk_0_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (flash_data_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (flash_data_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (flash_data_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_035_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_035_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_035_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_035_out_0_error)           //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_036 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios_cpu_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios_cpu_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios_cpu_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_036_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_036_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_036_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_036_out_0_error)                    //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_037 (
		.in_clk_0_clk   (clk_0_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ram_24k_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (ram_24k_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (ram_24k_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_037_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_037_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_037_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_037_out_0_error)           //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_038 (
		.in_clk_0_clk   (clk_0_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (pio_led_debug_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (pio_led_debug_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (pio_led_debug_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_038_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_038_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_038_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_038_out_0_error)            //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_039 (
		.in_clk_0_clk   (clk_0_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (timer_delay_32bit_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (timer_delay_32bit_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (timer_delay_32bit_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_039_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_039_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_039_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_039_out_0_error)                //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_040 (
		.in_clk_0_clk   (clk_0_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (keypad_s1_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (keypad_s1_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (keypad_s1_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_040_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_040_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_040_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_040_out_0_error)           //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_041 (
		.in_clk_0_clk   (clk_0_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (btn_display_s1_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (btn_display_s1_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (btn_display_s1_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_041_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_041_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_041_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_041_out_0_error)           //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_042 (
		.in_clk_0_clk   (clk_0_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (btn_encoder_s1_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (btn_encoder_s1_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (btn_encoder_s1_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_042_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_042_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_042_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_042_out_0_error)           //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_043 (
		.in_clk_0_clk   (clk_0_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (btn_ch_onoff_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (btn_ch_onoff_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (btn_ch_onoff_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_043_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_043_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_043_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_043_out_0_error)           //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_044 (
		.in_clk_0_clk   (clk_0_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dds_reset_s1_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (dds_reset_s1_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (dds_reset_s1_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_044_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_044_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_044_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_044_out_0_error)           //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_045 (
		.in_clk_0_clk   (clk_0_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (lookup_ram_isr_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (lookup_ram_isr_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (lookup_ram_isr_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_045_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_045_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_045_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_045_out_0_error)             //         .error
	);

	NiosII_Processor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_046 (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (NIOS_CPU_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (sd_spi_spi_control_port_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sd_spi_spi_control_port_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sd_spi_spi_control_port_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_046_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_046_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_046_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_046_out_0_error)                   //         .error
	);

endmodule
